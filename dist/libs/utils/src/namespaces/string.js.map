{"version":3,"sources":["../../../../../libs/utils/src/namespaces/string.ts"],"sourcesContent":["import { adjectives, animals, uniqueNamesGenerator } from \"unique-names-generator\";\n\nimport { LayoutLocator, SortablePayload } from \"./types\";\n\nexport const getInitials = (name: string) => {\n  // eslint-disable-next-line unicorn/better-regex\n  const regex = new RegExp(/(\\p{L}{1})\\p{L}+/gu);\n  const initials = [...name.matchAll(regex)];\n\n  return ((initials.shift()?.[1] ?? \"\") + (initials.pop()?.[1] ?? \"\")).toUpperCase();\n};\n\nexport const isUrl = (string: string | null | undefined) => {\n  if (!string) return false;\n\n  const urlRegex = /https?:\\/\\/[^\\n ]+/i;\n\n  return urlRegex.test(string);\n};\n\nexport const isEmptyString = (string: string) => {\n  if (string === \"<p></p>\") return true;\n  return string.trim().length === 0;\n};\n\nexport const extractUrl = (string: string) => {\n  const urlRegex = /https?:\\/\\/[^\\n ]+/i;\n\n  const result = urlRegex.exec(string);\n  return result ? result[0] : null;\n};\n\nexport const kebabCase = (string?: string | null) => {\n  if (!string) return \"\";\n\n  return (\n    string\n      .match(/[A-Z]{2,}(?=[A-Z][a-z]+\\d*|\\b)|[A-Z]?[a-z]+\\d*|[A-Z]|\\d+/gu)\n      ?.join(\"-\")\n      .toLowerCase() ?? \"\"\n  );\n};\n\nexport const generateRandomName = () => {\n  return uniqueNamesGenerator({\n    dictionaries: [adjectives, adjectives, animals],\n    style: \"capital\",\n    separator: \" \",\n    length: 3,\n  });\n};\n\nexport const processUsername = (string?: string | null) => {\n  if (!string) return \"\";\n\n  return string.replace(/[^\\d.A-Za-z-]/g, \"\").toLowerCase();\n};\n\nexport const parseLayoutLocator = (payload: SortablePayload | null): LayoutLocator => {\n  if (!payload) return { page: 0, column: 0, section: 0 };\n\n  const section = payload.index;\n  const [page, column] = payload.containerId.split(\".\").map(Number);\n\n  return { page, column, section };\n};\n"],"names":["extractUrl","generateRandomName","getInitials","isEmptyString","isUrl","kebabCase","parseLayoutLocator","processUsername","name","initials","regex","RegExp","matchAll","shift","pop","toUpperCase","string","urlRegex","test","trim","length","result","exec","match","join","toLowerCase","uniqueNamesGenerator","dictionaries","adjectives","animals","style","separator","replace","payload","page","column","section","index","containerId","split","map","Number"],"mappings":";;;;;;;;;;;IAyBaA,UAAU;eAAVA;;IAkBAC,kBAAkB;eAAlBA;;IAvCAC,WAAW;eAAXA;;IAgBAC,aAAa;eAAbA;;IARAC,KAAK;eAALA;;IAoBAC,SAAS;eAATA;;IA0BAC,kBAAkB;eAAlBA;;IANAC,eAAe;eAAfA;;;sCApD6C;AAInD,MAAML,cAAc,CAACM;QAKjBC,iBAAgCA;IAJzC,gDAAgD;IAChD,MAAMC,QAAQ,IAAIC,OAAO;IACzB,MAAMF,WAAW;WAAID,KAAKI,QAAQ,CAACF;KAAO;QAEjCD,kBAAgCA;IAAzC,OAAO,AAAC,CAAA,AAACA,CAAAA,CAAAA,oBAAAA,kBAAAA,SAASI,KAAK,uBAAdJ,eAAkB,CAAC,EAAE,YAArBA,mBAAyB,EAAC,IAAMA,CAAAA,CAAAA,kBAAAA,gBAAAA,SAASK,GAAG,uBAAZL,aAAgB,CAAC,EAAE,YAAnBA,iBAAuB,EAAC,CAAC,EAAGM,WAAW;AAClF;AAEO,MAAMX,QAAQ,CAACY;IACpB,IAAI,CAACA,QAAQ,OAAO;IAEpB,MAAMC,WAAW;IAEjB,OAAOA,SAASC,IAAI,CAACF;AACvB;AAEO,MAAMb,gBAAgB,CAACa;IAC5B,IAAIA,WAAW,WAAW,OAAO;IACjC,OAAOA,OAAOG,IAAI,GAAGC,MAAM,KAAK;AAClC;AAEO,MAAMpB,aAAa,CAACgB;IACzB,MAAMC,WAAW;IAEjB,MAAMI,SAASJ,SAASK,IAAI,CAACN;IAC7B,OAAOK,SAASA,MAAM,CAAC,EAAE,GAAG;AAC9B;AAEO,MAAMhB,YAAY,CAACW;QAItBA;IAHF,IAAI,CAACA,QAAQ,OAAO;QAGlBA;IADF,OACEA,CAAAA,kCAAAA,gBAAAA,OACGO,KAAK,CAAC,kFADTP,cAEIQ,IAAI,CAAC,KACNC,WAAW,cAHdT,iCAGoB;AAExB;AAEO,MAAMf,qBAAqB;IAChC,OAAOyB,IAAAA,0CAAoB,EAAC;QAC1BC,cAAc;YAACC,gCAAU;YAAEA,gCAAU;YAAEC,6BAAO;SAAC;QAC/CC,OAAO;QACPC,WAAW;QACXX,QAAQ;IACV;AACF;AAEO,MAAMb,kBAAkB,CAACS;IAC9B,IAAI,CAACA,QAAQ,OAAO;IAEpB,OAAOA,OAAOgB,OAAO,CAAC,kBAAkB,IAAIP,WAAW;AACzD;AAEO,MAAMnB,qBAAqB,CAAC2B;IACjC,IAAI,CAACA,SAAS,OAAO;QAAEC,MAAM;QAAGC,QAAQ;QAAGC,SAAS;IAAE;IAEtD,MAAMA,UAAUH,QAAQI,KAAK;IAC7B,MAAM,CAACH,MAAMC,OAAO,GAAGF,QAAQK,WAAW,CAACC,KAAK,CAAC,KAAKC,GAAG,CAACC;IAE1D,OAAO;QAAEP;QAAMC;QAAQC;IAAQ;AACjC"}