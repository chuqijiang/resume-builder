import { jsx as g, jsxs as ge } from "react/jsx-runtime";
import * as G from "react";
import u, { createContext as _s, forwardRef as S, useContext as ni, useState as Hs, useCallback as Jr, useEffect as rs, useId as qh, useRef as Jh, useDebugValue as Nu } from "react";
import * as qn from "@radix-ui/react-accordion";
import * as Xe from "@radix-ui/react-alert-dialog";
import * as Gh from "@radix-ui/react-aspect-ratio";
import * as Lr from "@radix-ui/react-avatar";
import { Slot as _u } from "@radix-ui/react-slot";
import * as sa from "@radix-ui/react-checkbox";
import * as ke from "@radix-ui/react-dialog";
import { Primitive as Cn } from "@radix-ui/react-primitive";
import * as Ar from "@radix-ui/react-popover";
import { PopoverTrigger as Yh } from "@radix-ui/react-popover";
import * as Oe from "@radix-ui/react-context-menu";
import * as Te from "@radix-ui/react-dropdown-menu";
import { useFormContext as Qh, Controller as Xh, get as ia, set as Mo, appendErrors as ep, useForm as tp, FormProvider as np } from "react-hook-form";
import { FormProvider as LM } from "react-hook-form";
import * as Hu from "@radix-ui/react-label";
import * as ss from "@radix-ui/react-hover-card";
import * as rp from "@radix-ui/react-portal";
import * as qa from "react-resizable-panels";
import sp from "react-dom";
import * as Iu from "@radix-ui/react-toggle";
import * as Cr from "@radix-ui/react-tooltip";
import * as Vn from "@radix-ui/react-scroll-area";
import * as ze from "@radix-ui/react-select";
import * as Ru from "@radix-ui/react-separator";
import * as Fr from "@radix-ui/react-slider";
import * as oa from "@radix-ui/react-switch";
import * as rr from "@radix-ui/react-tabs";
import * as ht from "@radix-ui/react-toast";
import * as Du from "@radix-ui/react-toggle-group";
const ip = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M244,56v48a12,12,0,0,1-12,12H184a12,12,0,1,1,0-24H201.1l-19-17.38c-.13-.12-.26-.24-.38-.37A76,76,0,1,0,127,204h1a75.53,75.53,0,0,0,52.15-20.72,12,12,0,0,1,16.49,17.45A99.45,99.45,0,0,1,128,228h-1.37A100,100,0,1,1,198.51,57.06L220,76.72V56a12,12,0,0,1,24,0Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,128a88,88,0,1,1-88-88A88,88,0,0,1,216,128Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M240,56v48a8,8,0,0,1-8,8H184a8,8,0,0,1,0-16H211.4L184.81,71.64l-.25-.24a80,80,0,1,0-1.67,114.78,8,8,0,0,1,11,11.63A95.44,95.44,0,0,1,128,224h-1.32A96,96,0,1,1,195.75,60L224,85.8V56a8,8,0,1,1,16,0Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M240,56v48a8,8,0,0,1-8,8H184a8,8,0,0,1-5.66-13.66l17-17-10.55-9.65-.25-.24a80,80,0,1,0-1.67,114.78,8,8,0,1,1,11,11.63A95.44,95.44,0,0,1,128,224h-1.32A96,96,0,1,1,195.75,60l10.93,10L226.34,50.3A8,8,0,0,1,240,56Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M238,56v48a6,6,0,0,1-6,6H184a6,6,0,0,1,0-12h32.55l-30.38-27.8c-.06-.06-.12-.13-.19-.19a82,82,0,1,0-1.7,117.65,6,6,0,0,1,8.24,8.73A93.46,93.46,0,0,1,128,222h-1.28A94,94,0,1,1,194.37,61.4L226,90.35V56a6,6,0,1,1,12,0Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M240,56v48a8,8,0,0,1-8,8H184a8,8,0,0,1,0-16H211.4L184.81,71.64l-.25-.24a80,80,0,1,0-1.67,114.78,8,8,0,0,1,11,11.63A95.44,95.44,0,0,1,128,224h-1.32A96,96,0,1,1,195.75,60L224,85.8V56a8,8,0,1,1,16,0Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M236,56v48a4,4,0,0,1-4,4H184a4,4,0,0,1,0-8h37.7L187.53,68.69l-.13-.12a84,84,0,1,0-1.75,120.51,4,4,0,0,1,5.5,5.82A91.43,91.43,0,0,1,128,220h-1.26A92,92,0,1,1,193,62.84l35,32.05V56a4,4,0,1,1,8,0Z" }))
  ]
]), op = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M228,128a100,100,0,0,1-98.66,100H128a99.39,99.39,0,0,1-68.62-27.29,12,12,0,0,1,16.48-17.45,76,76,0,1,0-1.57-109c-.13.13-.25.25-.39.37L54.89,92H72a12,12,0,0,1,0,24H24a12,12,0,0,1-12-12V56a12,12,0,0,1,24,0V76.72L57.48,57.06A100,100,0,0,1,228,128Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,128a88,88,0,1,1-88-88A88,88,0,0,1,216,128Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M224,128a96,96,0,0,1-94.71,96H128A95.38,95.38,0,0,1,62.1,197.8a8,8,0,0,1,11-11.63A80,80,0,1,0,71.43,71.39a3.07,3.07,0,0,1-.26.25L44.59,96H72a8,8,0,0,1,0,16H24a8,8,0,0,1-8-8V56a8,8,0,0,1,16,0V85.8L60.25,60A96,96,0,0,1,224,128Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M224,128a96,96,0,0,1-94.71,96H128A95.38,95.38,0,0,1,62.1,197.8a8,8,0,0,1,11-11.63A80,80,0,1,0,71.43,71.39a3.07,3.07,0,0,1-.26.25L60.63,81.29l17,17A8,8,0,0,1,72,112H24a8,8,0,0,1-8-8V56A8,8,0,0,1,29.66,50.3L49.31,70,60.25,60A96,96,0,0,1,224,128Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M222,128a94,94,0,0,1-92.74,94H128a93.43,93.43,0,0,1-64.5-25.65,6,6,0,1,1,8.24-8.72A82,82,0,1,0,70,70l-.19.19L39.44,98H72a6,6,0,0,1,0,12H24a6,6,0,0,1-6-6V56a6,6,0,0,1,12,0V90.34L61.63,61.4A94,94,0,0,1,222,128Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M224,128a96,96,0,0,1-94.71,96H128A95.38,95.38,0,0,1,62.1,197.8a8,8,0,0,1,11-11.63A80,80,0,1,0,71.43,71.39a3.07,3.07,0,0,1-.26.25L44.59,96H72a8,8,0,0,1,0,16H24a8,8,0,0,1-8-8V56a8,8,0,0,1,16,0V85.8L60.25,60A96,96,0,0,1,224,128Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M220,128a92,92,0,0,1-90.77,92H128a91.47,91.47,0,0,1-63.13-25.1,4,4,0,1,1,5.5-5.82A84,84,0,1,0,68.6,68.57l-.13.12L34.3,100H72a4,4,0,0,1,0,8H24a4,4,0,0,1-4-4V56a4,4,0,0,1,8,0V94.89l35-32A92,92,0,0,1,220,128Z" }))
  ]
]), ap = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216.49,104.49l-80,80a12,12,0,0,1-17,0l-80-80a12,12,0,0,1,17-17L128,159l71.51-71.52a12,12,0,0,1,17,17Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,96l-80,80L48,96Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M215.39,92.94A8,8,0,0,0,208,88H48a8,8,0,0,0-5.66,13.66l80,80a8,8,0,0,0,11.32,0l80-80A8,8,0,0,0,215.39,92.94ZM128,164.69,67.31,104H188.69Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M213.66,101.66l-80,80a8,8,0,0,1-11.32,0l-80-80A8,8,0,0,1,48,88H208a8,8,0,0,1,5.66,13.66Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M212.24,100.24l-80,80a6,6,0,0,1-8.48,0l-80-80a6,6,0,0,1,8.48-8.48L128,167.51l75.76-75.75a6,6,0,0,1,8.48,8.48Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M213.66,101.66l-80,80a8,8,0,0,1-11.32,0l-80-80A8,8,0,0,1,53.66,90.34L128,164.69l74.34-74.35a8,8,0,0,1,11.32,11.32Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M210.83,98.83l-80,80a4,4,0,0,1-5.66,0l-80-80a4,4,0,0,1,5.66-5.66L128,170.34l77.17-77.17a4,4,0,1,1,5.66,5.66Z" }))
  ]
]), lp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M184.49,136.49l-80,80a12,12,0,0,1-17-17L159,128,87.51,56.49a12,12,0,1,1,17-17l80,80A12,12,0,0,1,184.49,136.49Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M176,128,96,208V48Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M181.66,122.34l-80-80A8,8,0,0,0,88,48V208a8,8,0,0,0,13.66,5.66l80-80A8,8,0,0,0,181.66,122.34ZM104,188.69V67.31L164.69,128Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M181.66,133.66l-80,80A8,8,0,0,1,88,208V48a8,8,0,0,1,13.66-5.66l80,80A8,8,0,0,1,181.66,133.66Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M180.24,132.24l-80,80a6,6,0,0,1-8.48-8.48L167.51,128,91.76,52.24a6,6,0,0,1,8.48-8.48l80,80A6,6,0,0,1,180.24,132.24Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M181.66,133.66l-80,80a8,8,0,0,1-11.32-11.32L164.69,128,90.34,53.66a8,8,0,0,1,11.32-11.32l80,80A8,8,0,0,1,181.66,133.66Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M178.83,130.83l-80,80a4,4,0,0,1-5.66-5.66L170.34,128,93.17,50.83a4,4,0,0,1,5.66-5.66l80,80A4,4,0,0,1,178.83,130.83Z" }))
  ]
]), cp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M184.49,167.51a12,12,0,0,1,0,17l-48,48a12,12,0,0,1-17,0l-48-48a12,12,0,0,1,17-17L128,207l39.51-39.52A12,12,0,0,1,184.49,167.51Zm-96-79L128,49l39.51,39.52a12,12,0,0,0,17-17l-48-48a12,12,0,0,0-17,0l-48,48a12,12,0,0,0,17,17Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M80,176h96l-48,48ZM128,32,80,80h96Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M176,168H80a8,8,0,0,0-5.66,13.66l48,48a8,8,0,0,0,11.32,0l48-48A8,8,0,0,0,176,168Zm-48,44.69L99.31,184h57.38ZM80,88h96a8,8,0,0,0,5.66-13.66l-48-48a8,8,0,0,0-11.32,0l-48,48A8,8,0,0,0,80,88Zm48-44.69L156.69,72H99.31Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M72.61,83.06a8,8,0,0,1,1.73-8.72l48-48a8,8,0,0,1,11.32,0l48,48A8,8,0,0,1,176,88H80A8,8,0,0,1,72.61,83.06ZM176,168H80a8,8,0,0,0-5.66,13.66l48,48a8,8,0,0,0,11.32,0l48-48A8,8,0,0,0,176,168Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M180.24,171.76a6,6,0,0,1,0,8.48l-48,48a6,6,0,0,1-8.48,0l-48-48a6,6,0,0,1,8.48-8.48L128,215.51l43.76-43.75A6,6,0,0,1,180.24,171.76Zm-96-87.52L128,40.49l43.76,43.75a6,6,0,0,0,8.48-8.48l-48-48a6,6,0,0,0-8.48,0l-48,48a6,6,0,0,0,8.48,8.48Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M181.66,170.34a8,8,0,0,1,0,11.32l-48,48a8,8,0,0,1-11.32,0l-48-48a8,8,0,0,1,11.32-11.32L128,212.69l42.34-42.35A8,8,0,0,1,181.66,170.34Zm-96-84.68L128,43.31l42.34,42.35a8,8,0,0,0,11.32-11.32l-48-48a8,8,0,0,0-11.32,0l-48,48A8,8,0,0,0,85.66,85.66Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M178.83,173.17a4,4,0,0,1,0,5.66l-48,48a4,4,0,0,1-5.66,0l-48-48a4,4,0,0,1,5.66-5.66L128,218.34l45.17-45.17A4,4,0,0,1,178.83,173.17Zm-96-90.34L128,37.66l45.17,45.17a4,4,0,1,0,5.66-5.66l-48-48a4,4,0,0,0-5.66,0l-48,48a4,4,0,0,0,5.66,5.66Z" }))
  ]
]), dp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M232.49,80.49l-128,128a12,12,0,0,1-17,0l-56-56a12,12,0,1,1,17-17L96,183,215.51,63.51a12,12,0,0,1,17,17Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M232,56V200a16,16,0,0,1-16,16H40a16,16,0,0,1-16-16V56A16,16,0,0,1,40,40H216A16,16,0,0,1,232,56Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M205.66,85.66l-96,96a8,8,0,0,1-11.32,0l-40-40a8,8,0,0,1,11.32-11.32L104,164.69l90.34-90.35a8,8,0,0,1,11.32,11.32Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40ZM205.66,85.66l-96,96a8,8,0,0,1-11.32,0l-40-40a8,8,0,0,1,11.32-11.32L104,164.69l90.34-90.35a8,8,0,0,1,11.32,11.32Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M228.24,76.24l-128,128a6,6,0,0,1-8.48,0l-56-56a6,6,0,0,1,8.48-8.48L96,191.51,219.76,67.76a6,6,0,0,1,8.48,8.48Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M229.66,77.66l-128,128a8,8,0,0,1-11.32,0l-56-56a8,8,0,0,1,11.32-11.32L96,188.69,218.34,66.34a8,8,0,0,1,11.32,11.32Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M226.83,74.83l-128,128a4,4,0,0,1-5.66,0l-56-56a4,4,0,0,1,5.66-5.66L96,194.34,221.17,69.17a4,4,0,1,1,5.66,5.66Z" }))
  ]
]), up = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M51.51,104.49l-32-32a12,12,0,0,1,0-17l32-32a12,12,0,1,1,17,17L45,64,68.49,87.51a12,12,0,0,1-17,17Zm48,0a12,12,0,0,0,17,0l32-32a12,12,0,0,0,0-17l-32-32a12,12,0,1,0-17,17L123,64,99.51,87.51A12,12,0,0,0,99.51,104.49ZM200,36H180a12,12,0,0,0,0,24h16V196H60V140a12,12,0,0,0-24,0v60a20,20,0,0,0,20,20H200a20,20,0,0,0,20-20V56A20,20,0,0,0,200,36Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M152,32V96a16,16,0,0,1-16,16H32A16,16,0,0,1,16,96V32A16,16,0,0,1,32,16H136A16,16,0,0,1,152,32Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M58.34,101.66l-32-32a8,8,0,0,1,0-11.32l32-32A8,8,0,0,1,69.66,37.66L43.31,64,69.66,90.34a8,8,0,0,1-11.32,11.32Zm40,0a8,8,0,0,0,11.32,0l32-32a8,8,0,0,0,0-11.32l-32-32A8,8,0,0,0,98.34,37.66L124.69,64,98.34,90.34A8,8,0,0,0,98.34,101.66ZM200,40H176a8,8,0,0,0,0,16h24V200H56V136a8,8,0,0,0-16,0v64a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V56A16,16,0,0,0,200,40Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M200,40H168a16,16,0,0,0-16-16H32A16,16,0,0,0,16,40v80a16,16,0,0,0,16,16h8v64a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V56A16,16,0,0,0,200,40ZM106.34,61.66a8,8,0,0,1,11.32-11.32l24,24a8,8,0,0,1,0,11.32l-24,24a8,8,0,0,1-11.32-11.32L124.69,80Zm-64,24a8,8,0,0,1,0-11.32l24-24A8,8,0,0,1,77.66,61.66L59.31,80,77.66,98.34a8,8,0,0,1-11.32,11.32ZM200,200H56V136h96a16,16,0,0,0,16-16V56h32Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M59.76,100.24l-32-32a6,6,0,0,1,0-8.48l32-32a6,6,0,1,1,8.48,8.48L40.49,64,68.24,91.76a6,6,0,1,1-8.48,8.48Zm40,0a6,6,0,0,0,8.48,0l32-32a6,6,0,0,0,0-8.48l-32-32a6,6,0,1,0-8.48,8.48L127.51,64,99.76,91.76A6,6,0,0,0,99.76,100.24ZM200,42H176a6,6,0,0,0,0,12h24a2,2,0,0,1,2,2V200a2,2,0,0,1-2,2H56a2,2,0,0,1-2-2V136a6,6,0,0,0-12,0v64a14,14,0,0,0,14,14H200a14,14,0,0,0,14-14V56A14,14,0,0,0,200,42Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M58.34,101.66l-32-32a8,8,0,0,1,0-11.32l32-32A8,8,0,0,1,69.66,37.66L43.31,64,69.66,90.34a8,8,0,0,1-11.32,11.32Zm40,0a8,8,0,0,0,11.32,0l32-32a8,8,0,0,0,0-11.32l-32-32A8,8,0,0,0,98.34,37.66L124.69,64,98.34,90.34A8,8,0,0,0,98.34,101.66ZM200,40H176a8,8,0,0,0,0,16h24V200H56V136a8,8,0,0,0-16,0v64a16,16,0,0,0,16,16H200a16,16,0,0,0,16-16V56A16,16,0,0,0,200,40Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M61.17,98.83l-32-32a4,4,0,0,1,0-5.66l32-32a4,4,0,0,1,5.66,5.66L37.66,64,66.83,93.17a4,4,0,0,1-5.66,5.66Zm40,0a4,4,0,0,0,5.66,0l32-32a4,4,0,0,0,0-5.66l-32-32a4,4,0,0,0-5.66,5.66L130.34,64,101.17,93.17A4,4,0,0,0,101.17,98.83ZM200,44H176a4,4,0,0,0,0,8h24a4,4,0,0,1,4,4V200a4,4,0,0,1-4,4H56a4,4,0,0,1-4-4V136a4,4,0,0,0-8,0v64a12,12,0,0,0,12,12H200a12,12,0,0,0,12-12V56A12,12,0,0,0,200,44Z" }))
  ]
]), fp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M71.68,97.22,34.74,128l36.94,30.78a12,12,0,1,1-15.36,18.44l-48-40a12,12,0,0,1,0-18.44l48-40A12,12,0,0,1,71.68,97.22Zm176,21.56-48-40a12,12,0,1,0-15.36,18.44L221.26,128l-36.94,30.78a12,12,0,1,0,15.36,18.44l48-40a12,12,0,0,0,0-18.44ZM164.1,28.72a12,12,0,0,0-15.38,7.18l-64,176a12,12,0,0,0,7.18,15.37A11.79,11.79,0,0,0,96,228a12,12,0,0,0,11.28-7.9l64-176A12,12,0,0,0,164.1,28.72Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M240,128l-48,40H64L16,128,64,88H192Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M69.12,94.15,28.5,128l40.62,33.85a8,8,0,1,1-10.24,12.29l-48-40a8,8,0,0,1,0-12.29l48-40a8,8,0,0,1,10.24,12.3Zm176,27.7-48-40a8,8,0,1,0-10.24,12.3L227.5,128l-40.62,33.85a8,8,0,1,0,10.24,12.29l48-40a8,8,0,0,0,0-12.29ZM162.73,32.48a8,8,0,0,0-10.25,4.79l-64,176a8,8,0,0,0,4.79,10.26A8.14,8.14,0,0,0,96,224a8,8,0,0,0,7.52-5.27l64-176A8,8,0,0,0,162.73,32.48Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40ZM92.8,145.6a8,8,0,1,1-9.6,12.8l-32-24a8,8,0,0,1,0-12.8l32-24a8,8,0,0,1,9.6,12.8L69.33,128Zm58.89-71.4-32,112a8,8,0,1,1-15.38-4.4l32-112a8,8,0,0,1,15.38,4.4Zm53.11,60.2-32,24a8,8,0,0,1-9.6-12.8L186.67,128,163.2,110.4a8,8,0,1,1,9.6-12.8l32,24a8,8,0,0,1,0,12.8Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M67.84,92.61,25.37,128l42.47,35.39a6,6,0,1,1-7.68,9.22l-48-40a6,6,0,0,1,0-9.22l48-40a6,6,0,0,1,7.68,9.22Zm176,30.78-48-40a6,6,0,1,0-7.68,9.22L230.63,128l-42.47,35.39a6,6,0,1,0,7.68,9.22l48-40a6,6,0,0,0,0-9.22Zm-81.79-89A6,6,0,0,0,154.36,38l-64,176A6,6,0,0,0,94,221.64a6.15,6.15,0,0,0,2,.36,6,6,0,0,0,5.64-3.95l64-176A6,6,0,0,0,162.05,34.36Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M69.12,94.15,28.5,128l40.62,33.85a8,8,0,1,1-10.24,12.29l-48-40a8,8,0,0,1,0-12.29l48-40a8,8,0,0,1,10.24,12.3Zm176,27.7-48-40a8,8,0,1,0-10.24,12.3L227.5,128l-40.62,33.85a8,8,0,1,0,10.24,12.29l48-40a8,8,0,0,0,0-12.29ZM162.73,32.48a8,8,0,0,0-10.25,4.79l-64,176a8,8,0,0,0,4.79,10.26A8.14,8.14,0,0,0,96,224a8,8,0,0,0,7.52-5.27l64-176A8,8,0,0,0,162.73,32.48Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M66.56,91.07,22.25,128l44.31,36.93A4,4,0,0,1,64,172a3.94,3.94,0,0,1-2.56-.93l-48-40a4,4,0,0,1,0-6.14l48-40a4,4,0,0,1,5.12,6.14Zm176,33.86-48-40a4,4,0,1,0-5.12,6.14L233.75,128l-44.31,36.93a4,4,0,1,0,5.12,6.14l48-40a4,4,0,0,0,0-6.14ZM161.37,36.24a4,4,0,0,0-5.13,2.39l-64,176a4,4,0,0,0,2.39,5.13A4.12,4.12,0,0,0,96,220a4,4,0,0,0,3.76-2.63l64-176A4,4,0,0,0,161.37,36.24Z" }))
  ]
]), hp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M128,96a32,32,0,1,0,32,32A32,32,0,0,0,128,96Zm0,40a8,8,0,1,1,8-8A8,8,0,0,1,128,136Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M152,128a24,24,0,1,1-24-24A24,24,0,0,1,152,128Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M128,96a32,32,0,1,0,32,32A32,32,0,0,0,128,96Zm0,48a16,16,0,1,1,16-16A16,16,0,0,1,128,144Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M156,128a28,28,0,1,1-28-28A28,28,0,0,1,156,128Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M128,98a30,30,0,1,0,30,30A30,30,0,0,0,128,98Zm0,48a18,18,0,1,1,18-18A18,18,0,0,1,128,146Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M128,96a32,32,0,1,0,32,32A32,32,0,0,0,128,96Zm0,48a16,16,0,1,1,16-16A16,16,0,0,1,128,144Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M128,100a28,28,0,1,0,28,28A28,28,0,0,0,128,100Zm0,48a20,20,0,1,1,20-20A20,20,0,0,1,128,148Z" }))
  ]
]), pp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M108,60A16,16,0,1,1,92,44,16,16,0,0,1,108,60Zm56,16a16,16,0,1,0-16-16A16,16,0,0,0,164,76ZM92,112a16,16,0,1,0,16,16A16,16,0,0,0,92,112Zm72,0a16,16,0,1,0,16,16A16,16,0,0,0,164,112ZM92,180a16,16,0,1,0,16,16A16,16,0,0,0,92,180Zm72,0a16,16,0,1,0,16,16A16,16,0,0,0,164,180Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M208,32V224a16,16,0,0,1-16,16H64a16,16,0,0,1-16-16V32A16,16,0,0,1,64,16H192A16,16,0,0,1,208,32Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M104,60A12,12,0,1,1,92,48,12,12,0,0,1,104,60Zm60,12a12,12,0,1,0-12-12A12,12,0,0,0,164,72ZM92,116a12,12,0,1,0,12,12A12,12,0,0,0,92,116Zm72,0a12,12,0,1,0,12,12A12,12,0,0,0,164,116ZM92,184a12,12,0,1,0,12,12A12,12,0,0,0,92,184Zm72,0a12,12,0,1,0,12,12A12,12,0,0,0,164,184Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M192,16H64A16,16,0,0,0,48,32V224a16,16,0,0,0,16,16H192a16,16,0,0,0,16-16V32A16,16,0,0,0,192,16ZM100,200a12,12,0,1,1,12-12A12,12,0,0,1,100,200Zm0-60a12,12,0,1,1,12-12A12,12,0,0,1,100,140Zm0-60a12,12,0,1,1,12-12A12,12,0,0,1,100,80Zm56,120a12,12,0,1,1,12-12A12,12,0,0,1,156,200Zm0-60a12,12,0,1,1,12-12A12,12,0,0,1,156,140Zm0-60a12,12,0,1,1,12-12A12,12,0,0,1,156,80Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M102,60A10,10,0,1,1,92,50,10,10,0,0,1,102,60Zm62,10a10,10,0,1,0-10-10A10,10,0,0,0,164,70ZM92,118a10,10,0,1,0,10,10A10,10,0,0,0,92,118Zm72,0a10,10,0,1,0,10,10A10,10,0,0,0,164,118ZM92,186a10,10,0,1,0,10,10A10,10,0,0,0,92,186Zm72,0a10,10,0,1,0,10,10A10,10,0,0,0,164,186Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M104,60A12,12,0,1,1,92,48,12,12,0,0,1,104,60Zm60,12a12,12,0,1,0-12-12A12,12,0,0,0,164,72ZM92,116a12,12,0,1,0,12,12A12,12,0,0,0,92,116Zm72,0a12,12,0,1,0,12,12A12,12,0,0,0,164,116ZM92,184a12,12,0,1,0,12,12A12,12,0,0,0,92,184Zm72,0a12,12,0,1,0,12,12A12,12,0,0,0,164,184Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M100,60a8,8,0,1,1-8-8A8,8,0,0,1,100,60Zm64,8a8,8,0,1,0-8-8A8,8,0,0,0,164,68ZM92,120a8,8,0,1,0,8,8A8,8,0,0,0,92,120Zm72,0a8,8,0,1,0,8,8A8,8,0,0,0,164,120ZM92,188a8,8,0,1,0,8,8A8,8,0,0,0,92,188Zm72,0a8,8,0,1,0,8,8A8,8,0,0,0,164,188Z" }))
  ]
]), mp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M204.37,51.59A108,108,0,1,0,236,128,108.11,108.11,0,0,0,204.37,51.59ZM140,136H116V111.39l24-12Zm-40,71.25V160h56v47.25a84.73,84.73,0,0,1-56,0Zm87.4-19.84a84.53,84.53,0,0,1-7.4,6.55V156a20,20,0,0,0-16-19.6V80a12,12,0,0,0-17.37-10.73l-48,24A12,12,0,0,0,92,104v32.41A20,20,0,0,0,76,156v38a84.53,84.53,0,0,1-7.4-6.55,84,84,0,1,1,118.8,0Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M195.88,195.88A95.7,95.7,0,0,1,168,215.29V152a8,8,0,0,0-8-8h-8V72L104,96v48H96a8,8,0,0,0-8,8v63.29a96,96,0,1,1,107.88-19.41Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M201.54,54.46A104,104,0,0,0,54.46,201.54,104,104,0,0,0,201.54,54.46ZM96,210V152h64v58a88.33,88.33,0,0,1-64,0Zm48-74H112V100.94l32-16Zm46.22,54.22A88.09,88.09,0,0,1,176,201.77V152a16,16,0,0,0-16-16V72a8,8,0,0,0-11.58-7.16l-48,24A8,8,0,0,0,96,96v40a16,16,0,0,0-16,16v49.77a88,88,0,1,1,110.22-11.55Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M201.54,54.46A104,104,0,0,0,54.46,201.54,104,104,0,0,0,201.54,54.46ZM96,210V152h64v58a88.33,88.33,0,0,1-64,0Zm94.22-19.78A88.09,88.09,0,0,1,176,201.77V152a16,16,0,0,0-16-16V72a8,8,0,0,0-11.58-7.16l-48,24A8,8,0,0,0,96,96v40a16,16,0,0,0-16,16v49.77a88,88,0,1,1,110.22-11.55Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M200.12,55.87A102,102,0,1,0,55.88,200.12,102,102,0,1,0,200.12,55.87ZM94,211.37V152a2,2,0,0,1,2-2h64a2,2,0,0,1,2,2v59.37a90.49,90.49,0,0,1-68,0ZM146,138H110V99.71l36-18Zm45.64,53.64h0A90.93,90.93,0,0,1,174,205.39V152a14,14,0,0,0-14-14h-2V72a6,6,0,0,0-8.68-5.37l-48,24A6,6,0,0,0,98,96v42H96a14,14,0,0,0-14,14v53.39a90.93,90.93,0,0,1-17.64-13.75,90,90,0,1,1,127.28,0Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M201.54,54.46A104,104,0,0,0,54.46,201.54,104,104,0,0,0,201.54,54.46ZM96,210V152h64v58a88.33,88.33,0,0,1-64,0Zm48-74H112V100.94l32-16Zm46.22,54.22A88.09,88.09,0,0,1,176,201.77V152a16,16,0,0,0-16-16V72a8,8,0,0,0-11.58-7.16l-48,24A8,8,0,0,0,96,96v40a16,16,0,0,0-16,16v49.77a88,88,0,1,1,110.22-11.55Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M198.71,57.29A100,100,0,1,0,57.29,198.71,100,100,0,1,0,198.71,57.29ZM92,212.7V152a4,4,0,0,1,4-4h64a4,4,0,0,1,4,4v60.7a92.42,92.42,0,0,1-72,0ZM148,140H108V98.47l40-20Zm45.05,53.05A92,92,0,0,1,172,208.83V152a12,12,0,0,0-12-12h-4V72a4,4,0,0,0-5.79-3.58l-48,24A4,4,0,0,0,100,96v44H96a12,12,0,0,0-12,12v56.83a92,92,0,1,1,109.05-15.78Z" }))
  ]
]), gp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M144,96a16,16,0,1,1,16,16A16,16,0,0,1,144,96Zm92-40V200a20,20,0,0,1-20,20H40a20,20,0,0,1-20-20V56A20,20,0,0,1,40,36H216A20,20,0,0,1,236,56ZM44,60v79.72l33.86-33.86a20,20,0,0,1,28.28,0L147.31,147l17.18-17.17a20,20,0,0,1,28.28,0L212,149.09V60Zm0,136H162.34L92,125.66l-48,48Zm168,0V183l-33.37-33.37L164.28,164l32,32Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M224,56V178.06l-39.72-39.72a8,8,0,0,0-11.31,0L147.31,164,97.66,114.34a8,8,0,0,0-11.32,0L32,168.69V56a8,8,0,0,1,8-8H216A8,8,0,0,1,224,56Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm0,16V158.75l-26.07-26.06a16,16,0,0,0-22.63,0l-20,20-44-44a16,16,0,0,0-22.62,0L40,149.37V56ZM40,172l52-52,80,80H40Zm176,28H194.63l-36-36,20-20L216,181.38V200ZM144,100a12,12,0,1,1,12,12A12,12,0,0,1,144,100Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40ZM156,88a12,12,0,1,1-12,12A12,12,0,0,1,156,88Zm60,112H40V160.69l46.34-46.35a8,8,0,0,1,11.32,0h0L165,181.66a8,8,0,0,0,11.32-11.32l-17.66-17.65L173,138.34a8,8,0,0,1,11.31,0L216,170.07V200Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,42H40A14,14,0,0,0,26,56V200a14,14,0,0,0,14,14H216a14,14,0,0,0,14-14V56A14,14,0,0,0,216,42ZM40,54H216a2,2,0,0,1,2,2V163.57L188.53,134.1a14,14,0,0,0-19.8,0l-21.42,21.42L101.9,110.1a14,14,0,0,0-19.8,0L38,154.2V56A2,2,0,0,1,40,54ZM38,200V171.17l52.58-52.58a2,2,0,0,1,2.84,0L176.83,202H40A2,2,0,0,1,38,200Zm178,2H193.8l-38-38,21.41-21.42a2,2,0,0,1,2.83,0l38,38V200A2,2,0,0,1,216,202ZM146,100a10,10,0,1,1,10,10A10,10,0,0,1,146,100Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm0,16V158.75l-26.07-26.06a16,16,0,0,0-22.63,0l-20,20-44-44a16,16,0,0,0-22.62,0L40,149.37V56ZM40,172l52-52,80,80H40Zm176,28H194.63l-36-36,20-20L216,181.38V200ZM144,100a12,12,0,1,1,12,12A12,12,0,0,1,144,100Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,44H40A12,12,0,0,0,28,56V200a12,12,0,0,0,12,12H216a12,12,0,0,0,12-12V56A12,12,0,0,0,216,44ZM40,52H216a4,4,0,0,1,4,4V168.4l-32.89-32.89a12,12,0,0,0-17,0l-22.83,22.83-46.82-46.83a12,12,0,0,0-17,0L36,159V56A4,4,0,0,1,40,52ZM36,200V170.34l53.17-53.17a4,4,0,0,1,5.66,0L181.66,204H40A4,4,0,0,1,36,200Zm180,4H193l-40-40,22.83-22.83a4,4,0,0,1,5.66,0L220,179.71V200A4,4,0,0,1,216,204ZM148,100a8,8,0,1,1,8,8A8,8,0,0,1,148,100Z" }))
  ]
]), yp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M71.51,144.49a12,12,0,0,1,0-17l24-24a12,12,0,0,1,17,17L109,124h55V104a12,12,0,0,1,24,0v32a12,12,0,0,1-12,12H109l3.52,3.51a12,12,0,0,1-17,17ZM236,56V200a20,20,0,0,1-20,20H40a20,20,0,0,1-20-20V56A20,20,0,0,1,40,36H216A20,20,0,0,1,236,56Zm-24,4H44V196H212Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M224,56V200a8,8,0,0,1-8,8H40a8,8,0,0,1-8-8V56a8,8,0,0,1,8-8H216A8,8,0,0,1,224,56Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M184,104v32a8,8,0,0,1-8,8H99.31l10.35,10.34a8,8,0,0,1-11.32,11.32l-24-24a8,8,0,0,1,0-11.32l24-24a8,8,0,0,1,11.32,11.32L99.31,128H168V104a8,8,0,0,1,16,0Zm48-48V200a16,16,0,0,1-16,16H40a16,16,0,0,1-16-16V56A16,16,0,0,1,40,40H216A16,16,0,0,1,232,56ZM216,200V56H40V200H216Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,40H40A16,16,0,0,0,24,56V200a16,16,0,0,0,16,16H216a16,16,0,0,0,16-16V56A16,16,0,0,0,216,40Zm-32,96a8,8,0,0,1-8,8H99.31l10.35,10.34a8,8,0,0,1-11.32,11.32l-24-24a8,8,0,0,1,0-11.32l24-24a8,8,0,0,1,11.32,11.32L99.31,128H168V104a8,8,0,0,1,16,0Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M182,104v32a6,6,0,0,1-6,6H94.48l13.76,13.76a6,6,0,1,1-8.48,8.48l-24-24a6,6,0,0,1,0-8.48l24-24a6,6,0,0,1,8.48,8.48L94.48,130H170V104a6,6,0,0,1,12,0Zm48-48V200a14,14,0,0,1-14,14H40a14,14,0,0,1-14-14V56A14,14,0,0,1,40,42H216A14,14,0,0,1,230,56Zm-12,0a2,2,0,0,0-2-2H40a2,2,0,0,0-2,2V200a2,2,0,0,0,2,2H216a2,2,0,0,0,2-2Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M184,104v32a8,8,0,0,1-8,8H99.31l10.35,10.34a8,8,0,0,1-11.32,11.32l-24-24a8,8,0,0,1,0-11.32l24-24a8,8,0,0,1,11.32,11.32L99.31,128H168V104a8,8,0,0,1,16,0Zm48-48V200a16,16,0,0,1-16,16H40a16,16,0,0,1-16-16V56A16,16,0,0,1,40,40H216A16,16,0,0,1,232,56ZM216,200V56H40V200H216Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M180,104v32a4,4,0,0,1-4,4H89.66l17.17,17.17a4,4,0,0,1-5.66,5.66l-24-24a4,4,0,0,1,0-5.66l24-24a4,4,0,0,1,5.66,5.66L89.66,132H172V104a4,4,0,0,1,8,0Zm48-48V200a12,12,0,0,1-12,12H40a12,12,0,0,1-12-12V56A12,12,0,0,1,40,44H216A12,12,0,0,1,228,56Zm-8,0a4,4,0,0,0-4-4H40a4,4,0,0,0-4,4V200a4,4,0,0,0,4,4H216a4,4,0,0,0,4-4Z" }))
  ]
]), bp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M87.5,151.52l64-64a12,12,0,0,1,17,17l-64,64a12,12,0,0,1-17-17Zm131-114a60.08,60.08,0,0,0-84.87,0L103.51,67.61a12,12,0,0,0,17,17l30.07-30.06a36,36,0,0,1,50.93,50.92L171.4,135.52a12,12,0,1,0,17,17l30.08-30.06A60.09,60.09,0,0,0,218.45,37.55ZM135.52,171.4l-30.07,30.08a36,36,0,0,1-50.92-50.93l30.06-30.07a12,12,0,0,0-17-17L37.55,133.58a60,60,0,0,0,84.88,84.87l30.06-30.07a12,12,0,0,0-17-17Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M209.94,113.94l-96,96a48,48,0,0,1-67.88-67.88l96-96a48,48,0,0,1,67.88,67.88Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M165.66,90.34a8,8,0,0,1,0,11.32l-64,64a8,8,0,0,1-11.32-11.32l64-64A8,8,0,0,1,165.66,90.34ZM215.6,40.4a56,56,0,0,0-79.2,0L106.34,70.45a8,8,0,0,0,11.32,11.32l30.06-30a40,40,0,0,1,56.57,56.56l-30.07,30.06a8,8,0,0,0,11.31,11.32L215.6,119.6a56,56,0,0,0,0-79.2ZM138.34,174.22l-30.06,30.06a40,40,0,1,1-56.56-56.57l30.05-30.05a8,8,0,0,0-11.32-11.32L40.4,136.4a56,56,0,0,0,79.2,79.2l30.06-30.07a8,8,0,0,0-11.32-11.31Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM144.56,173.66l-21.45,21.45a44,44,0,0,1-62.22-62.22l21.45-21.46a8,8,0,0,1,11.32,11.31L72.2,144.2a28,28,0,0,0,39.6,39.6l21.45-21.46a8,8,0,0,1,11.31,11.32Zm-34.9-16a8,8,0,0,1-11.32-11.32l48-48a8,8,0,0,1,11.32,11.32Zm85.45-34.55-21.45,21.45a8,8,0,0,1-11.32-11.31L183.8,111.8a28,28,0,0,0-39.6-39.6L122.74,93.66a8,8,0,0,1-11.31-11.32l21.46-21.45a44,44,0,0,1,62.22,62.22Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M164.25,91.75a6,6,0,0,1,0,8.49l-64,64a6,6,0,0,1-8.49-8.48l64-64A6,6,0,0,1,164.25,91.75ZM214.2,41.8a54.07,54.07,0,0,0-76.38,0L107.75,71.85a6,6,0,0,0,8.49,8.49l30.07-30.06a42,42,0,0,1,59.41,59.41l-30.08,30.07a6,6,0,1,0,8.49,8.49l30.07-30.07A54,54,0,0,0,214.2,41.8ZM139.76,175.64l-30.07,30.08a42,42,0,0,1-59.41-59.41l30.06-30.07a6,6,0,0,0-8.49-8.49l-30,30.07a54,54,0,0,0,76.38,76.39l30.07-30.08a6,6,0,0,0-8.49-8.49Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M165.66,90.34a8,8,0,0,1,0,11.32l-64,64a8,8,0,0,1-11.32-11.32l64-64A8,8,0,0,1,165.66,90.34ZM215.6,40.4a56,56,0,0,0-79.2,0L106.34,70.45a8,8,0,0,0,11.32,11.32l30.06-30a40,40,0,0,1,56.57,56.56l-30.07,30.06a8,8,0,0,0,11.31,11.32L215.6,119.6a56,56,0,0,0,0-79.2ZM138.34,174.22l-30.06,30.06a40,40,0,1,1-56.56-56.57l30.05-30.05a8,8,0,0,0-11.32-11.32L40.4,136.4a56,56,0,0,0,79.2,79.2l30.06-30.07a8,8,0,0,0-11.32-11.31Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M162.84,93.16a4,4,0,0,1,0,5.66l-64,64a4,4,0,0,1-5.66-5.66l64-64A4,4,0,0,1,162.84,93.16Zm49.95-49.95a52.07,52.07,0,0,0-73.56,0L109.17,73.27a4,4,0,0,0,5.65,5.66l30.07-30.06a44,44,0,0,1,62.24,62.24l-30.07,30.06a4,4,0,0,0,5.66,5.66l30.07-30.06A52.07,52.07,0,0,0,212.79,43.21ZM141.17,177.06l-30.06,30.07a44,44,0,0,1-62.24-62.24l30.06-30.06a4,4,0,0,0-5.66-5.66L43.21,139.23a52,52,0,0,0,73.56,73.56l30.06-30.07a4,4,0,1,0-5.66-5.66Z" }))
  ]
]), vp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M76,64A12,12,0,0,1,88,52H216a12,12,0,0,1,0,24H88A12,12,0,0,1,76,64Zm140,52H88a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Zm0,64H88a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24ZM44,112a16,16,0,1,0,16,16A16,16,0,0,0,44,112Zm0-64A16,16,0,1,0,60,64,16,16,0,0,0,44,48Zm0,128a16,16,0,1,0,16,16A16,16,0,0,0,44,176Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,64V192H88V64Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M80,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H88A8,8,0,0,1,80,64Zm136,56H88a8,8,0,1,0,0,16H216a8,8,0,0,0,0-16Zm0,64H88a8,8,0,1,0,0,16H216a8,8,0,0,0,0-16ZM44,52A12,12,0,1,0,56,64,12,12,0,0,0,44,52Zm0,64a12,12,0,1,0,12,12A12,12,0,0,0,44,116Zm0,64a12,12,0,1,0,12,12A12,12,0,0,0,44,180Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM68,188a12,12,0,1,1,12-12A12,12,0,0,1,68,188Zm0-48a12,12,0,1,1,12-12A12,12,0,0,1,68,140Zm0-48A12,12,0,1,1,80,80,12,12,0,0,1,68,92Zm124,92H104a8,8,0,0,1,0-16h88a8,8,0,0,1,0,16Zm0-48H104a8,8,0,0,1,0-16h88a8,8,0,0,1,0,16Zm0-48H104a8,8,0,0,1,0-16h88a8,8,0,0,1,0,16Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M82,64a6,6,0,0,1,6-6H216a6,6,0,0,1,0,12H88A6,6,0,0,1,82,64Zm134,58H88a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Zm0,64H88a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12ZM44,54A10,10,0,1,0,54,64,10,10,0,0,0,44,54Zm0,128a10,10,0,1,0,10,10A10,10,0,0,0,44,182Zm0-64a10,10,0,1,0,10,10A10,10,0,0,0,44,118Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M80,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H88A8,8,0,0,1,80,64Zm136,56H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,64H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM44,52A12,12,0,1,0,56,64,12,12,0,0,0,44,52Zm0,64a12,12,0,1,0,12,12A12,12,0,0,0,44,116Zm0,64a12,12,0,1,0,12,12A12,12,0,0,0,44,180Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M84,64a4,4,0,0,1,4-4H216a4,4,0,0,1,0,8H88A4,4,0,0,1,84,64Zm132,60H88a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Zm0,64H88a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8ZM44,120a8,8,0,1,0,8,8A8,8,0,0,0,44,120Zm0-64a8,8,0,1,0,8,8A8,8,0,0,0,44,56Zm0,128a8,8,0,1,0,8,8A8,8,0,0,0,44,184Z" }))
  ]
]), xp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M228,128a12,12,0,0,1-12,12H116a12,12,0,0,1,0-24H216A12,12,0,0,1,228,128ZM116,76H216a12,12,0,0,0,0-24H116a12,12,0,0,0,0,24ZM216,180H116a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24ZM44,59.31V104a12,12,0,0,0,24,0V40A12,12,0,0,0,50.64,29.27l-16,8a12,12,0,0,0,9.36,22Zm39.73,96.86a27.7,27.7,0,0,0-11.2-18.63A28.89,28.89,0,0,0,32.9,143a27.71,27.71,0,0,0-4.17,7.54,12,12,0,0,0,22.55,8.21,4,4,0,0,1,.58-1,4.78,4.78,0,0,1,6.5-.82,3.82,3.82,0,0,1,1.61,2.6,3.63,3.63,0,0,1-.77,2.77l-.13.17L30.39,200.82A12,12,0,0,0,40,220H72a12,12,0,0,0,0-24H64l14.28-19.11A27.48,27.48,0,0,0,83.73,156.17Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,64V192H104V64Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H104a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM104,72H216a8,8,0,0,0,0-16H104a8,8,0,0,0,0,16ZM216,184H104a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM43.58,55.16,48,52.94V104a8,8,0,0,0,16,0V40a8,8,0,0,0-11.58-7.16l-16,8a8,8,0,0,0,7.16,14.32ZM79.77,156.72a23.73,23.73,0,0,0-9.6-15.95,24.86,24.86,0,0,0-34.11,4.7,23.63,23.63,0,0,0-3.57,6.46,8,8,0,1,0,15,5.47,7.84,7.84,0,0,1,1.18-2.13,8.76,8.76,0,0,1,12-1.59A7.91,7.91,0,0,1,63.93,159a7.64,7.64,0,0,1-1.57,5.78,1,1,0,0,0-.08.11L33.59,203.21A8,8,0,0,0,40,216H72a8,8,0,0,0,0-16H56l19.08-25.53A23.47,23.47,0,0,0,79.77,156.72Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM56.84,75.58a8,8,0,0,1,3.58-10.74l16-8A8,8,0,0,1,88,64v48a8,8,0,0,1-16,0V76.94l-4.42,2.22A8,8,0,0,1,56.84,75.58ZM92,180a8,8,0,0,1,0,16H68a8,8,0,0,1-6.4-12.8l21.67-28.89A3.92,3.92,0,0,0,84,152a4,4,0,0,0-7.77-1.33,8,8,0,0,1-15.09-5.34,20,20,0,1,1,35,18.53L84,180Zm100,4H120a8,8,0,0,1,0-16h72a8,8,0,0,1,0,16Zm0-48H120a8,8,0,0,1,0-16h72a8,8,0,0,1,0,16Zm0-48H120a8,8,0,0,1,0-16h72a8,8,0,0,1,0,16Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M222,128a6,6,0,0,1-6,6H104a6,6,0,0,1,0-12H216A6,6,0,0,1,222,128ZM104,70H216a6,6,0,0,0,0-12H104a6,6,0,0,0,0,12ZM216,186H104a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12ZM42.68,53.37,50,49.71V104a6,6,0,0,0,12,0V40a6,6,0,0,0-8.68-5.37l-16,8a6,6,0,0,0,5.36,10.74ZM72,202H52l21.48-28.74A21.5,21.5,0,0,0,77.79,157,21.75,21.75,0,0,0,69,142.38a22.86,22.86,0,0,0-31.35,4.31,22.18,22.18,0,0,0-3.28,5.92,6,6,0,0,0,11.28,4.11,9.87,9.87,0,0,1,1.48-2.67,10.78,10.78,0,0,1,14.78-2,9.89,9.89,0,0,1,4,6.61,9.64,9.64,0,0,1-2,7.28l-.06.09L35.2,204.41A6,6,0,0,0,40,214H72a6,6,0,0,0,0-12Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H104a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM104,72H216a8,8,0,0,0,0-16H104a8,8,0,0,0,0,16ZM216,184H104a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM43.58,55.16,48,52.94V104a8,8,0,0,0,16,0V40a8,8,0,0,0-11.58-7.16l-16,8a8,8,0,0,0,7.16,14.32ZM79.77,156.72a23.73,23.73,0,0,0-9.6-15.95,24.86,24.86,0,0,0-34.11,4.7,23.63,23.63,0,0,0-3.57,6.46,8,8,0,1,0,15,5.47,7.84,7.84,0,0,1,1.18-2.13,8.76,8.76,0,0,1,12-1.59A7.91,7.91,0,0,1,63.93,159a7.64,7.64,0,0,1-1.57,5.78,1,1,0,0,0-.08.11L33.59,203.21A8,8,0,0,0,40,216H72a8,8,0,0,0,0-16H56l19.08-25.53A23.47,23.47,0,0,0,79.77,156.72Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M220,128a4,4,0,0,1-4,4H104a4,4,0,0,1,0-8H216A4,4,0,0,1,220,128ZM104,68H216a4,4,0,0,0,0-8H104a4,4,0,0,0,0,8ZM216,188H104a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8ZM41.79,51.58,52,46.47V104a4,4,0,0,0,8,0V40a4,4,0,0,0-5.79-3.58l-16,8a4,4,0,1,0,3.58,7.16ZM72,204H48l23.85-31.92a19.54,19.54,0,0,0,4-14.8,19.76,19.76,0,0,0-8-13.28,20.84,20.84,0,0,0-28.59,3.92,19.85,19.85,0,0,0-3,5.38A4,4,0,0,0,43.76,156a12.1,12.1,0,0,1,1.78-3.22,12.78,12.78,0,0,1,17.54-2.37,11.85,11.85,0,0,1,4.81,7.94,11.65,11.65,0,0,1-2.41,8.85L36.8,205.61A4,4,0,0,0,40,212H72a4,4,0,0,0,0-8Z" }))
  ]
]), kp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M232.49,215.51,185,168a92.12,92.12,0,1,0-17,17l47.53,47.54a12,12,0,0,0,17-17ZM44,112a68,68,0,1,1,68,68A68.07,68.07,0,0,1,44,112Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M192,112a80,80,0,1,1-80-80A80,80,0,0,1,192,112Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M229.66,218.34,179.6,168.28a88.21,88.21,0,1,0-11.32,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M168,112a56,56,0,1,1-56-56A56,56,0,0,1,168,112Zm61.66,117.66a8,8,0,0,1-11.32,0l-50.06-50.07a88,88,0,1,1,11.32-11.31l50.06,50.06A8,8,0,0,1,229.66,229.66ZM112,184a72,72,0,1,0-72-72A72.08,72.08,0,0,0,112,184Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M228.24,219.76l-51.38-51.38a86.15,86.15,0,1,0-8.48,8.48l51.38,51.38a6,6,0,0,0,8.48-8.48ZM38,112a74,74,0,1,1,74,74A74.09,74.09,0,0,1,38,112Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M229.66,218.34l-50.07-50.06a88.11,88.11,0,1,0-11.31,11.31l50.06,50.07a8,8,0,0,0,11.32-11.32ZM40,112a72,72,0,1,1,72,72A72.08,72.08,0,0,1,40,112Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M226.83,221.17l-52.7-52.7a84.1,84.1,0,1,0-5.66,5.66l52.7,52.7a4,4,0,0,0,5.66-5.66ZM36,112a76,76,0,1,1,76,76A76.08,76.08,0,0,1,36,112Z" }))
  ]
]), wp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M228,128a12,12,0,0,1-12,12H40a12,12,0,0,1,0-24H216A12,12,0,0,1,228,128Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M216,56V200a16,16,0,0,1-16,16H56a16,16,0,0,1-16-16V56A16,16,0,0,1,56,40H200A16,16,0,0,1,216,56Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM184,136H72a8,8,0,0,1,0-16H184a8,8,0,0,1,0,16Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M222,128a6,6,0,0,1-6,6H40a6,6,0,0,1,0-12H216A6,6,0,0,1,222,128Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M220,128a4,4,0,0,1-4,4H40a4,4,0,0,1,0-8H216A4,4,0,0,1,220,128Z" }))
  ]
]), Ep = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,36H96a68,68,0,0,0,0,136h36v36a12,12,0,0,0,24,0V60h16V208a12,12,0,0,0,24,0V60h12a12,12,0,0,0,0-24ZM132,148H96a44,44,0,0,1,0-88h36Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M144,48V160H96A56,56,0,0,1,96,48Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M208,40H96a64,64,0,0,0,0,128h40v40a8,8,0,0,0,16,0V56h24V208a8,8,0,0,0,16,0V56h16a8,8,0,0,0,0-16ZM136,152H96a48,48,0,0,1,0-96h40Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,48a8,8,0,0,1-8,8H192V208a8,8,0,0,1-16,0V56H152V208a8,8,0,0,1-16,0V168H96A64,64,0,0,1,96,40H208A8,8,0,0,1,216,48Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,42H96a62,62,0,0,0,0,124h42v42a6,6,0,0,0,12,0V54h28V208a6,6,0,0,0,12,0V54h18a6,6,0,0,0,0-12ZM138,154H96A50,50,0,0,1,96,54h42Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,40H96a64,64,0,0,0,0,128h40v40a8,8,0,0,0,16,0V56h24V208a8,8,0,0,0,16,0V56h16a8,8,0,0,0,0-16ZM136,152H96a48,48,0,0,1,0-96h40Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,44H96a60,60,0,0,0,0,120h44v44a4,4,0,0,0,8,0V52h32V208a4,4,0,0,0,8,0V52h20a4,4,0,0,0,0-8ZM140,156H96A52,52,0,0,1,96,52h44Z" }))
  ]
]), Mp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M58.89,178.86a12,12,0,0,0,16-5.75L90.44,140h75.12l15.58,33.11a12,12,0,0,0,21.72-10.22l-64-136a12,12,0,0,0-21.72,0l-64,136A12,12,0,0,0,58.89,178.86ZM128,60.18,154.27,116H101.73ZM228,216a12,12,0,0,1-12,12H40a12,12,0,0,1,0-24H216A12,12,0,0,1,228,216Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M173.18,128H82.82L128,32Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M60.59,175.24a8,8,0,0,0,10.65-3.83L87.9,136h80.2l16.66,35.41a8,8,0,1,0,14.48-6.82l-64-136a8,8,0,0,0-14.48,0l-64,136A8,8,0,0,0,60.59,175.24ZM128,50.79,160.57,120H95.43ZM224,216a8,8,0,0,1-8,8H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,216Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M148.73,120H107.27L128,75.09ZM216,32V224a8,8,0,0,1-8,8H48a8,8,0,0,1-8-8V32a8,8,0,0,1,8-8H208A8,8,0,0,1,216,32ZM76.65,167.26a8,8,0,0,0,10.61-3.91L99.89,136h56.22l12.63,27.35a8,8,0,0,0,14.52-6.7l-48-104a8,8,0,0,0-14.52,0l-48,104A8,8,0,0,0,76.65,167.26ZM200,192a8,8,0,0,0-8-8H64a8,8,0,0,0,0,16H192A8,8,0,0,0,200,192Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M61.45,173.43a6,6,0,0,0,8-2.88L86.63,134h82.74l17.2,36.55A6,6,0,0,0,192,174a5.92,5.92,0,0,0,2.55-.57,6,6,0,0,0,2.88-8l-64-136a6,6,0,0,0-10.86,0l-64,136A6,6,0,0,0,61.45,173.43ZM128,46.09,163.72,122H92.28ZM222,216a6,6,0,0,1-6,6H40a6,6,0,0,1,0-12H216A6,6,0,0,1,222,216Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M60.59,175.24a8,8,0,0,0,10.65-3.83L87.9,136h80.2l16.66,35.41a8,8,0,1,0,14.48-6.82l-64-136a8,8,0,0,0-14.48,0l-64,136A8,8,0,0,0,60.59,175.24ZM128,50.79,160.57,120H95.43ZM224,216a8,8,0,0,1-8,8H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,216Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M62.3,171.62a4,4,0,0,0,5.32-1.92L85.36,132h85.28l17.74,37.7a4,4,0,1,0,7.24-3.4l-64-136a4,4,0,0,0-7.24,0l-64,136A4,4,0,0,0,62.3,171.62ZM128,41.39,166.87,124H89.13ZM220,216a4,4,0,0,1-4,4H40a4,4,0,0,1,0-8H216A4,4,0,0,1,220,216Z" }))
  ]
]), Sp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M28,64A12,12,0,0,1,40,52H216a12,12,0,0,1,0,24H40A12,12,0,0,1,28,64ZM64,92a12,12,0,0,0,0,24H192a12,12,0,0,0,0-24Zm152,40H40a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Zm-24,40H64a12,12,0,0,0,0,24H192a12,12,0,0,0,0-24Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M216,64V168a16,16,0,0,1-16,16H56a16,16,0,0,1-16-16V64Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M32,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H40A8,8,0,0,1,32,64ZM64,96a8,8,0,0,0,0,16H192a8,8,0,0,0,0-16Zm152,40H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm-24,40H64a8,8,0,0,0,0,16H192a8,8,0,0,0,0-16Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM176,184H80a8,8,0,0,1,0-16h96a8,8,0,0,1,0,16Zm16-32H64a8,8,0,0,1,0-16H192a8,8,0,0,1,0,16ZM72,112a8,8,0,0,1,8-8h96a8,8,0,0,1,0,16H80A8,8,0,0,1,72,112ZM192,88H64a8,8,0,0,1,0-16H192a8,8,0,0,1,0,16Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M34,64a6,6,0,0,1,6-6H216a6,6,0,0,1,0,12H40A6,6,0,0,1,34,64ZM64,98a6,6,0,0,0,0,12H192a6,6,0,0,0,0-12Zm152,40H40a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Zm-24,40H64a6,6,0,0,0,0,12H192a6,6,0,0,0,0-12Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M32,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H40A8,8,0,0,1,32,64ZM64,96a8,8,0,0,0,0,16H192a8,8,0,0,0,0-16Zm152,40H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm-24,40H64a8,8,0,0,0,0,16H192a8,8,0,0,0,0-16Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M36,64a4,4,0,0,1,4-4H216a4,4,0,0,1,0,8H40A4,4,0,0,1,36,64Zm28,36a4,4,0,0,0,0,8H192a4,4,0,0,0,0-8Zm152,40H40a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Zm-24,40H64a4,4,0,0,0,0,8H192a4,4,0,0,0,0-8Z" }))
  ]
]), Ap = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M28,64A12,12,0,0,1,40,52H216a12,12,0,0,1,0,24H40A12,12,0,0,1,28,64ZM216,92H40a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Zm0,40H40a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Zm0,40H40a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,64V184H40V64Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M32,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H40A8,8,0,0,1,32,64ZM216,96H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,40H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,40H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM192,184H64a8,8,0,0,1,0-16H192a8,8,0,0,1,0,16Zm0-32H64a8,8,0,0,1,0-16H192a8,8,0,0,1,0,16Zm0-32H64a8,8,0,0,1,0-16H192a8,8,0,0,1,0,16Zm0-32H64a8,8,0,0,1,0-16H192a8,8,0,0,1,0,16Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M34,64a6,6,0,0,1,6-6H216a6,6,0,0,1,0,12H40A6,6,0,0,1,34,64ZM216,98H40a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Zm0,40H40a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Zm0,40H40a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M32,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H40A8,8,0,0,1,32,64ZM216,96H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,40H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,40H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M36,64a4,4,0,0,1,4-4H216a4,4,0,0,1,0,8H40A4,4,0,0,1,36,64Zm180,36H40a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Zm0,40H40a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Zm0,40H40a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Z" }))
  ]
]), Cp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M28,64A12,12,0,0,1,40,52H216a12,12,0,0,1,0,24H40A12,12,0,0,1,28,64Zm12,52H168a12,12,0,0,0,0-24H40a12,12,0,0,0,0,24Zm176,16H40a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Zm-48,40H40a12,12,0,0,0,0,24H168a12,12,0,0,0,0-24Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,64V168a16,16,0,0,1-16,16H40V64Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M32,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H40A8,8,0,0,1,32,64Zm8,48H168a8,8,0,0,0,0-16H40a8,8,0,0,0,0,16Zm176,24H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm-48,40H40a8,8,0,0,0,0,16H168a8,8,0,0,0,0-16Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM160,184H64a8,8,0,0,1,0-16h96a8,8,0,0,1,0,16Zm32-32H64a8,8,0,0,1,0-16H192a8,8,0,0,1,0,16ZM56,112a8,8,0,0,1,8-8h96a8,8,0,0,1,0,16H64A8,8,0,0,1,56,112ZM192,88H64a8,8,0,0,1,0-16H192a8,8,0,0,1,0,16Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M34,64a6,6,0,0,1,6-6H216a6,6,0,0,1,0,12H40A6,6,0,0,1,34,64Zm6,46H168a6,6,0,0,0,0-12H40a6,6,0,0,0,0,12Zm176,28H40a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Zm-48,40H40a6,6,0,0,0,0,12H168a6,6,0,0,0,0-12Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M32,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H40A8,8,0,0,1,32,64Zm8,48H168a8,8,0,0,0,0-16H40a8,8,0,0,0,0,16Zm176,24H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm-48,40H40a8,8,0,0,0,0,16H168a8,8,0,0,0,0-16Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M36,64a4,4,0,0,1,4-4H216a4,4,0,0,1,0,8H40A4,4,0,0,1,36,64Zm4,44H168a4,4,0,0,0,0-8H40a4,4,0,0,0,0,8Zm176,32H40a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Zm-48,40H40a4,4,0,0,0,0,8H168a4,4,0,0,0,0-8Z" }))
  ]
]), Op = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M28,64A12,12,0,0,1,40,52H216a12,12,0,0,1,0,24H40A12,12,0,0,1,28,64ZM216,92H88a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Zm0,40H40a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Zm0,40H88a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,64V184H56a16,16,0,0,1-16-16V64Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M32,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H40A8,8,0,0,1,32,64ZM216,96H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,40H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,40H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM192,184H96a8,8,0,0,1,0-16h96a8,8,0,0,1,0,16Zm0-32H64a8,8,0,0,1,0-16H192a8,8,0,0,1,0,16Zm0-32H96a8,8,0,0,1,0-16h96a8,8,0,0,1,0,16Zm0-32H64a8,8,0,0,1,0-16H192a8,8,0,0,1,0,16Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M34,64a6,6,0,0,1,6-6H216a6,6,0,0,1,0,12H40A6,6,0,0,1,34,64ZM216,98H88a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Zm0,40H40a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Zm0,40H88a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M32,64a8,8,0,0,1,8-8H216a8,8,0,0,1,0,16H40A8,8,0,0,1,32,64ZM216,96H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,40H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Zm0,40H88a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M36,64a4,4,0,0,1,4-4H216a4,4,0,0,1,0,8H40A4,4,0,0,1,36,64Zm180,36H88a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Zm0,40H40a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Zm0,40H88a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8Z" }))
  ]
]), Tp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M185.08,114.46A48,48,0,0,0,148,36H80A12,12,0,0,0,68,48V200a12,12,0,0,0,12,12h80a52,52,0,0,0,25.08-97.54ZM92,60h56a24,24,0,0,1,0,48H92Zm68,128H92V132h68a28,28,0,0,1,0,56Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M200,160a40,40,0,0,1-40,40H80V48h68a36,36,0,0,1,0,72h12A40,40,0,0,1,200,160Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M178.48,115.7A44,44,0,0,0,148,40H80a8,8,0,0,0-8,8V200a8,8,0,0,0,8,8h80a48,48,0,0,0,18.48-92.3ZM88,56h60a28,28,0,0,1,0,56H88Zm72,136H88V128h72a32,32,0,0,1,0,64Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M168,156a20,20,0,0,1-20,20H96V136h52A20,20,0,0,1,168,156ZM224,48V208a16,16,0,0,1-16,16H48a16,16,0,0,1-16-16V48A16,16,0,0,1,48,32H208A16,16,0,0,1,224,48ZM184,156a36,36,0,0,0-18-31.15A36,36,0,0,0,140,64H88a8,8,0,0,0-8,8V184a8,8,0,0,0,8,8h60A36,36,0,0,0,184,156Zm-24-56a20,20,0,0,0-20-20H96v40h44A20,20,0,0,0,160,100Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M174.69,116.41A42,42,0,0,0,148,42H80a6,6,0,0,0-6,6V200a6,6,0,0,0,6,6h80a46,46,0,0,0,14.69-89.59ZM86,54h62a30,30,0,0,1,0,60H86Zm74,140H86V126h74a34,34,0,0,1,0,68Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M178.48,115.7A44,44,0,0,0,148,40H80a8,8,0,0,0-8,8V200a8,8,0,0,0,8,8h80a48,48,0,0,0,18.48-92.3ZM88,56h60a28,28,0,0,1,0,56H88Zm72,136H88V128h72a32,32,0,0,1,0,64Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M170.27,117.21A40,40,0,0,0,148,44H80a4,4,0,0,0-4,4V200a4,4,0,0,0,4,4h80a44,44,0,0,0,10.27-86.79ZM84,52h64a32,32,0,0,1,0,64H84Zm76,144H84V124h76a36,36,0,0,1,0,72Z" }))
  ]
]), Np = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M236,112v96a12,12,0,0,1-24,0V134.42L206.66,138a12,12,0,0,1-13.32-20l24-16A12,12,0,0,1,236,112ZM144,44a12,12,0,0,0-12,12v48H52V56a12,12,0,0,0-24,0V176a12,12,0,0,0,24,0V128h80v48a12,12,0,0,0,24,0V56A12,12,0,0,0,144,44Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M224,72V208H56a16,16,0,0,1-16-16V56H208A16,16,0,0,1,224,72Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M152,56V176a8,8,0,0,1-16,0V124H48v52a8,8,0,0,1-16,0V56a8,8,0,0,1,16,0v52h88V56a8,8,0,0,1,16,0Zm75.77,49a8,8,0,0,0-8.21.39l-24,16a8,8,0,1,0,8.88,13.32L216,127V208a8,8,0,0,0,16,0V112A8,8,0,0,0,227.77,105Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM144,160a8,8,0,0,1-16,0V128H72v32a8,8,0,0,1-16,0V80a8,8,0,0,1,16,0v32h56V80a8,8,0,0,1,16,0Zm56,16a8,8,0,0,1-16,0V111l-11.56,7.71a8,8,0,1,1-8.88-13.32l24-16A8,8,0,0,1,200,96Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M230,112v96a6,6,0,0,1-12,0V123.21L203.33,133a6,6,0,0,1-6.66-10l24-16a6,6,0,0,1,9.33,5ZM144,50a6,6,0,0,0-6,6v54H46V56a6,6,0,0,0-12,0V176a6,6,0,0,0,12,0V122h92v54a6,6,0,0,0,12,0V56A6,6,0,0,0,144,50Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M152,56V176a8,8,0,0,1-16,0V124H48v52a8,8,0,0,1-16,0V56a8,8,0,0,1,16,0v52h88V56a8,8,0,0,1,16,0Zm75.77,49a8,8,0,0,0-8.21.39l-24,16a8,8,0,1,0,8.88,13.32L216,127V208a8,8,0,0,0,16,0V112A8,8,0,0,0,227.77,105Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M228,112v96a4,4,0,0,1-8,0V119.47l-17.78,11.86a4,4,0,1,1-4.44-6.66l24-16A4,4,0,0,1,228,112ZM144,52a4,4,0,0,0-4,4v56H44V56a4,4,0,0,0-8,0V176a4,4,0,0,0,8,0V120h96v56a4,4,0,0,0,8,0V56A4,4,0,0,0,144,52Z" }))
  ]
]), _p = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M252,180a40,40,0,0,1-68.57,28,12,12,0,1,1,17.14-16.79A16,16,0,1,0,212,164a12,12,0,0,1-9.83-18.88L217,124H192a12,12,0,0,1,0-24h48a12,12,0,0,1,9.83,18.88l-18.34,26.2A40,40,0,0,1,252,180ZM144,44a12,12,0,0,0-12,12v48H52V56a12,12,0,0,0-24,0V176a12,12,0,0,0,24,0V128h80v48a12,12,0,0,0,24,0V56A12,12,0,0,0,144,44Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M240,72V192a16,16,0,0,1-16,16H56a16,16,0,0,1-16-16V56H224A16,16,0,0,1,240,72Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M152,56V176a8,8,0,0,1-16,0V124H48v52a8,8,0,0,1-16,0V56a8,8,0,0,1,16,0v52h88V56a8,8,0,0,1,16,0Zm73.52,90.63,21-30A8,8,0,0,0,240,104H192a8,8,0,0,0,0,16h32.63l-19.18,27.41A8,8,0,0,0,212,160a20,20,0,1,1-14.29,34,8,8,0,1,0-11.42,11.19A36,36,0,0,0,248,180,36.07,36.07,0,0,0,225.52,146.63Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM128,160a8,8,0,0,1-16,0V128H72v32a8,8,0,0,1-16,0V80a8,8,0,0,1,16,0v32h40V80a8,8,0,0,1,16,0Zm40,24a32,32,0,0,1-21.34-8.15,8,8,0,1,1,10.68-11.92A16,16,0,1,0,168,136a8,8,0,0,1-6.4-12.8L176,104H152a8,8,0,0,1,0-16h40a8,8,0,0,1,6.4,12.8l-16.71,22.28A32,32,0,0,1,168,184Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M246,180a34,34,0,0,1-58.29,23.79,6,6,0,0,1,8.58-8.39A22,22,0,1,0,212,158a6,6,0,0,1-4.92-9.44L228.48,118H192a6,6,0,0,1,0-12h48a6,6,0,0,1,4.91,9.44l-22.52,32.18A34.06,34.06,0,0,1,246,180ZM144,50a6,6,0,0,0-6,6v54H46V56a6,6,0,0,0-12,0V176a6,6,0,0,0,12,0V122h92v54a6,6,0,0,0,12,0V56A6,6,0,0,0,144,50Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M152,56V176a8,8,0,0,1-16,0V124H48v52a8,8,0,0,1-16,0V56a8,8,0,0,1,16,0v52h88V56a8,8,0,0,1,16,0Zm73.52,90.63,21-30A8,8,0,0,0,240,104H192a8,8,0,0,0,0,16h32.63l-19.18,27.41A8,8,0,0,0,212,160a20,20,0,1,1-14.29,34,8,8,0,1,0-11.42,11.19A36,36,0,0,0,248,180,36.07,36.07,0,0,0,225.52,146.63Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M244,180a32,32,0,0,1-54.86,22.4,4,4,0,0,1,5.72-5.6A24,24,0,1,0,212,156a4,4,0,0,1-3.28-6.29L232.32,116H192a4,4,0,0,1,0-8h48a4,4,0,0,1,3.28,6.29L219.12,148.8A32.06,32.06,0,0,1,244,180ZM144,52a4,4,0,0,0-4,4v56H44V56a4,4,0,0,0-8,0V176a4,4,0,0,0,8,0V120h96v56a4,4,0,0,0,8,0V56A4,4,0,0,0,144,52Z" }))
  ]
]), Hp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M156,56V176a12,12,0,0,1-24,0V128H52v48a12,12,0,0,1-24,0V56a12,12,0,0,1,24,0v48h80V56a12,12,0,0,1,24,0Zm84,140H216l28.74-38.33A36,36,0,1,0,182.05,124a12,12,0,0,0,22.63,8,11.67,11.67,0,0,1,1.73-3.22,12,12,0,1,1,19.15,14.46L182.4,200.8A12,12,0,0,0,192,220h48a12,12,0,0,0,0-24Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M240,72V208H56a16,16,0,0,1-16-16V56H224A16,16,0,0,1,240,72Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M248,208a8,8,0,0,1-8,8H192a8,8,0,0,1-6.4-12.8l43.16-57.56a16,16,0,1,0-25.54-19.27,16.28,16.28,0,0,0-2.32,4.3,8,8,0,1,1-15.08-5.34,32,32,0,1,1,55.73,29.93L208,200h32A8,8,0,0,1,248,208ZM144,48a8,8,0,0,0-8,8v52H48V56a8,8,0,0,0-16,0V176a8,8,0,0,0,16,0V124h88v52a8,8,0,0,0,16,0V56A8,8,0,0,0,144,48Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM128,160a8,8,0,0,1-16,0V128H72v32a8,8,0,0,1-16,0V80a8,8,0,0,1,16,0v32h40V80a8,8,0,0,1,16,0Zm64,24H152a8,8,0,0,1-6.4-12.8l36-48a12,12,0,1,0-19.15-14.46,13.06,13.06,0,0,0-2.58,4.81,8,8,0,1,1-15.68-3.18,28.17,28.17,0,1,1,50.2,22.44L168,168h24a8,8,0,0,1,0,16Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M150,56V176a6,6,0,0,1-12,0V122H46v54a6,6,0,0,1-12,0V56a6,6,0,0,1,12,0v54h92V56a6,6,0,0,1,12,0Zm90,146H204L240,154.05A30,30,0,1,0,187.71,126,6,6,0,1,0,199,130a18,18,0,0,1,14.47-11.82,18,18,0,0,1,16.87,28.66L187.2,204.4A6,6,0,0,0,192,214h48a6,6,0,0,0,0-12Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M152,56V176a8,8,0,0,1-16,0V124H48v52a8,8,0,0,1-16,0V56a8,8,0,0,1,16,0v52h88V56a8,8,0,0,1,16,0Zm88,144H208l33.55-44.74a32,32,0,1,0-55.73-29.93,8,8,0,1,0,15.08,5.34,16.28,16.28,0,0,1,2.32-4.3,16,16,0,1,1,25.54,19.27L185.6,203.2A8,8,0,0,0,192,216h48a8,8,0,0,0,0-16Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M148,56V176a4,4,0,0,1-8,0V120H44v56a4,4,0,0,1-8,0V56a4,4,0,0,1,8,0v56h96V56a4,4,0,0,1,8,0Zm92,148H200l38.36-51.15a28,28,0,1,0-48.77-26.18,4,4,0,1,0,7.54,2.66A20.36,20.36,0,0,1,200,124,20,20,0,0,1,232,148L188.8,205.6A4,4,0,0,0,192,212h48a4,4,0,0,0,0-8Z" }))
  ]
]), Ip = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M228,128a12,12,0,0,1-12,12H120a12,12,0,0,1,0-24h96A12,12,0,0,1,228,128ZM120,76h96a12,12,0,0,0,0-24H120a12,12,0,0,0,0,24Zm96,104H40a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24ZM31.51,144.49a12,12,0,0,0,17,0l40-40a12,12,0,0,0,0-17l-40-40a12,12,0,0,0-17,17L63,96,31.51,127.51A12,12,0,0,0,31.51,144.49Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,64V192H40V64Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H112a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM112,72H216a8,8,0,0,0,0-16H112a8,8,0,0,0,0,16ZM216,184H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM34.34,141.66a8,8,0,0,0,11.32,0l40-40a8,8,0,0,0,0-11.32l-40-40A8,8,0,0,0,34.34,61.66L68.69,96,34.34,130.34A8,8,0,0,0,34.34,141.66Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H112a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM112,72H216a8,8,0,0,0,0-16H112a8,8,0,0,0,0,16ZM216,184H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM36.94,143.39a8,8,0,0,0,8.72-1.73l40-40a8,8,0,0,0,0-11.32l-40-40A8,8,0,0,0,32,56v80A8,8,0,0,0,36.94,143.39Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M222,128a6,6,0,0,1-6,6H112a6,6,0,0,1,0-12H216A6,6,0,0,1,222,128ZM112,70H216a6,6,0,0,0,0-12H112a6,6,0,0,0,0,12ZM216,186H40a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12ZM35.76,140.24a6,6,0,0,0,8.48,0l40-40a6,6,0,0,0,0-8.48l-40-40a6,6,0,0,0-8.48,8.48L71.51,96,35.76,131.76A6,6,0,0,0,35.76,140.24Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H112a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM112,72H216a8,8,0,0,0,0-16H112a8,8,0,0,0,0,16ZM216,184H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM34.34,141.66a8,8,0,0,0,11.32,0l40-40a8,8,0,0,0,0-11.32l-40-40A8,8,0,0,0,34.34,61.66L68.69,96,34.34,130.34A8,8,0,0,0,34.34,141.66Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M220,128a4,4,0,0,1-4,4H112a4,4,0,0,1,0-8H216A4,4,0,0,1,220,128ZM112,68H216a4,4,0,0,0,0-8H112a4,4,0,0,0,0,8ZM216,188H40a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8ZM37.17,138.83a4,4,0,0,0,5.66,0l40-40a4,4,0,0,0,0-5.66l-40-40a4,4,0,0,0-5.66,5.66L74.34,96,37.17,133.17A4,4,0,0,0,37.17,138.83Z" }))
  ]
]), Rp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M204,56a12,12,0,0,1-12,12H160.65l-40,120H144a12,12,0,0,1,0,24H64a12,12,0,0,1,0-24H95.35l40-120H112a12,12,0,0,1,0-24h80A12,12,0,0,1,204,56Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M192,56,144,200H64L112,56Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M200,56a8,8,0,0,1-8,8H157.77L115.1,192H144a8,8,0,0,1,0,16H64a8,8,0,0,1,0-16H98.23L140.9,64H112a8,8,0,0,1,0-16h80A8,8,0,0,1,200,56Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM176,80H153.64l-34.29,96H136a8,8,0,0,1,0,16H80a8,8,0,0,1,0-16h22.36l34.29-96H120a8,8,0,0,1,0-16h56a8,8,0,0,1,0,16Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M198,56a6,6,0,0,1-6,6H156.32l-44,132H144a6,6,0,0,1,0,12H64a6,6,0,0,1,0-12H99.68l44-132H112a6,6,0,0,1,0-12h80A6,6,0,0,1,198,56Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M200,56a8,8,0,0,1-8,8H157.77L115.1,192H144a8,8,0,0,1,0,16H64a8,8,0,0,1,0-16H98.23L140.9,64H112a8,8,0,0,1,0-16h80A8,8,0,0,1,200,56Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M196,56a4,4,0,0,1-4,4H154.88L109.55,196H144a4,4,0,0,1,0,8H64a4,4,0,0,1,0-8h37.12L146.45,60H112a4,4,0,0,1,0-8h80A4,4,0,0,1,196,56Z" }))
  ]
]), Dp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M228,128a12,12,0,0,1-12,12H120a12,12,0,0,1,0-24h96A12,12,0,0,1,228,128ZM120,76h96a12,12,0,0,0,0-24H120a12,12,0,0,0,0,24Zm96,104H40a12,12,0,0,0,0,24H216a12,12,0,0,0,0-24ZM72,148a12,12,0,0,0,8.49-20.49L49,96,80.49,64.48a12,12,0,0,0-17-17l-40,40a12,12,0,0,0,0,17l40,40A12,12,0,0,0,72,148Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M216,64V192H40V88L64,64Z", opacity: "0.2" }), /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H112a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM112,72H216a8,8,0,0,0,0-16H112a8,8,0,0,0,0,16ZM216,184H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM72,144a8,8,0,0,0,5.66-13.66L43.31,96,77.66,61.66A8,8,0,0,0,66.34,50.34l-40,40a8,8,0,0,0,0,11.32l40,40A8,8,0,0,0,72,144Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H112a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM112,72H216a8,8,0,0,0,0-16H112a8,8,0,0,0,0,16ZM216,184H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM72,144a8,8,0,0,0,8-8V56a8,8,0,0,0-13.66-5.66l-40,40a8,8,0,0,0,0,11.32l40,40A8,8,0,0,0,72,144Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M222,128a6,6,0,0,1-6,6H112a6,6,0,0,1,0-12H216A6,6,0,0,1,222,128ZM112,70H216a6,6,0,0,0,0-12H112a6,6,0,0,0,0,12ZM216,186H40a6,6,0,0,0,0,12H216a6,6,0,0,0,0-12ZM72,142a6,6,0,0,0,4.24-10.24L40.49,96,76.24,60.24a6,6,0,0,0-8.48-8.48l-40,40a6,6,0,0,0,0,8.48l40,40A6,6,0,0,0,72,142Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H112a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM112,72H216a8,8,0,0,0,0-16H112a8,8,0,0,0,0,16ZM216,184H40a8,8,0,0,0,0,16H216a8,8,0,0,0,0-16ZM72,144a8,8,0,0,0,5.66-13.66L43.31,96,77.66,61.66A8,8,0,0,0,66.34,50.34l-40,40a8,8,0,0,0,0,11.32l40,40A8,8,0,0,0,72,144Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M220,128a4,4,0,0,1-4,4H112a4,4,0,0,1,0-8H216A4,4,0,0,1,220,128ZM112,68H216a4,4,0,0,0,0-8H112a4,4,0,0,0,0,8ZM216,188H40a4,4,0,0,0,0,8H216a4,4,0,0,0,0-8ZM72,140a4,4,0,0,0,2.83-6.83L37.66,96,74.83,58.83a4,4,0,0,0-5.66-5.66l-40,40a4,4,0,0,0,0,5.66l40,40A4,4,0,0,0,72,140Z" }))
  ]
]), Lp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M228,128a12,12,0,0,1-12,12H185.86A41.48,41.48,0,0,1,196,168c0,14.45-7.81,28.32-21.43,38.05C162,215.05,145.44,220,128,220s-34-4.95-46.57-13.95C67.81,196.32,60,182.45,60,168a12,12,0,0,1,24,0c0,15.18,20.15,28,44,28s44-12.82,44-28c0-12.76-9.3-20.18-35.35-28H40a12,12,0,0,1,0-24H216A12,12,0,0,1,228,128ZM75.11,100a12,12,0,0,0,12-12c0-16,17.58-28,40.89-28,17.36,0,31.37,6.65,37.48,17.78a12,12,0,0,0,21-11.56C176.13,47.3,154.25,36,128,36,91,36,63.11,58.35,63.11,88A12,12,0,0,0,75.11,100Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M176,72l-55.31,51.05c-24-6.7-45.58-14.26-45.58-35,0-22.09,22-40,52.89-40C151.2,48,168.37,57.64,176,72Zm-55.31,51.05L72,168c0,22.09,25.07,40,56,40s56-17.91,56-40C184,138.43,150.52,131.4,120.69,123.05Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H175.93c9.19,7.11,16.07,17.2,16.07,32,0,13.34-7,25.7-19.75,34.79C160.33,211.31,144.61,216,128,216s-32.33-4.69-44.25-13.21C71,193.7,64,181.34,64,168a8,8,0,0,1,16,0c0,17.35,22,32,48,32s48-14.65,48-32c0-14.85-10.54-23.58-38.77-32H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM76.33,104a8,8,0,0,0,7.61-10.49A17.3,17.3,0,0,1,83.11,88c0-18.24,19.3-32,44.89-32,18.84,0,34.16,7.42,41,19.85a8,8,0,0,0,14-7.7C173.33,50.52,152.77,40,128,40,93.29,40,67.11,60.63,67.11,88a33.73,33.73,0,0,0,1.62,10.49A8,8,0,0,0,76.33,104Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM82.71,94.58C86,76.57,104.58,64,128,64c18.2,0,33.59,7.41,41.18,19.83a8,8,0,1,1-13.66,8.34C150.94,84.66,140.39,80,128,80c-15.3,0-27.73,7.33-29.55,17.42A8,8,0,0,1,90.59,104a7.76,7.76,0,0,1-1.43-.13A8,8,0,0,1,82.71,94.58ZM192,136H168.29A28.45,28.45,0,0,1,176,156c0,20.19-21.08,36-48,36-23.89,0-43.83-12.78-47.43-30.4a8,8,0,1,1,15.67-3.2c2,9.87,16,17.6,31.76,17.6,17.35,0,32-9.16,32-20,0-9.14-6.76-14.43-25.72-20H64a8,8,0,0,1,0-16H192a8,8,0,0,1,0,16Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M222,128a6,6,0,0,1-6,6H169.45c11.28,6.92,20.55,17.38,20.55,34,0,25.36-27.81,46-62,46s-62-20.64-62-46a6,6,0,0,1,12,0c0,18.75,22.43,34,50,34s50-15.25,50-34c0-18.23-15.46-26.59-40.47-34H40a6,6,0,0,1,0-12H216A6,6,0,0,1,222,128ZM76.33,102a6.2,6.2,0,0,0,1.88-.3A6,6,0,0,0,82,94.13,19.74,19.74,0,0,1,81.11,88c0-19.38,20.16-34,46.89-34,19.58,0,35.56,7.81,42.74,20.89a6,6,0,0,0,10.52-5.78C171.94,52.13,152,42,128,42,94.43,42,69.11,61.77,69.11,88a31.62,31.62,0,0,0,1.52,9.87A6,6,0,0,0,76.33,102Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M224,128a8,8,0,0,1-8,8H175.93c9.19,7.11,16.07,17.2,16.07,32,0,13.34-7,25.7-19.75,34.79C160.33,211.31,144.61,216,128,216s-32.33-4.69-44.25-13.21C71,193.7,64,181.34,64,168a8,8,0,0,1,16,0c0,17.35,22,32,48,32s48-14.65,48-32c0-14.85-10.54-23.58-38.77-32H40a8,8,0,0,1,0-16H216A8,8,0,0,1,224,128ZM76.33,104a8,8,0,0,0,7.61-10.49A17.3,17.3,0,0,1,83.11,88c0-18.24,19.3-32,44.89-32,18.84,0,34.16,7.42,41,19.85a8,8,0,0,0,14-7.7C173.33,50.52,152.77,40,128,40,93.29,40,67.11,60.63,67.11,88a33.73,33.73,0,0,0,1.62,10.49A8,8,0,0,0,76.33,104Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M220,128a4,4,0,0,1-4,4H161.16c15.45,7.24,26.84,17.8,26.84,36,0,24.26-26.92,44-60,44s-60-19.74-60-44a4,4,0,0,1,8,0c0,19.85,23.33,36,52,36s52-16.15,52-36c0-19.54-16.13-28.3-42.18-36H40a4,4,0,0,1,0-8H216A4,4,0,0,1,220,128ZM76.33,100a3.85,3.85,0,0,0,1.25-.2,4,4,0,0,0,2.55-5,21.9,21.9,0,0,1-1-6.75c0-20.52,21-36,48.89-36,20.32,0,37,8.2,44.49,21.92a4,4,0,0,0,7-3.85C170.54,53.75,151.29,44,128,44,95.57,44,71.11,62.92,71.11,88a29.76,29.76,0,0,0,1.42,9.25A4,4,0,0,0,76.33,100Z" }))
  ]
]), Pp = /* @__PURE__ */ new Map([
  [
    "bold",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208.49,191.51a12,12,0,0,1-17,17L128,145,64.49,208.49a12,12,0,0,1-17-17L111,128,47.51,64.49a12,12,0,0,1,17-17L128,111l63.51-63.52a12,12,0,0,1,17,17L145,128Z" }))
  ],
  [
    "duotone",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement(
      "path",
      {
        d: "M216,56V200a16,16,0,0,1-16,16H56a16,16,0,0,1-16-16V56A16,16,0,0,1,56,40H200A16,16,0,0,1,216,56Z",
        opacity: "0.2"
      }
    ), /* @__PURE__ */ u.createElement("path", { d: "M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z" }))
  ],
  [
    "fill",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M208,32H48A16,16,0,0,0,32,48V208a16,16,0,0,0,16,16H208a16,16,0,0,0,16-16V48A16,16,0,0,0,208,32ZM181.66,170.34a8,8,0,0,1-11.32,11.32L128,139.31,85.66,181.66a8,8,0,0,1-11.32-11.32L116.69,128,74.34,85.66A8,8,0,0,1,85.66,74.34L128,116.69l42.34-42.35a8,8,0,0,1,11.32,11.32L139.31,128Z" }))
  ],
  [
    "light",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M204.24,195.76a6,6,0,1,1-8.48,8.48L128,136.49,60.24,204.24a6,6,0,0,1-8.48-8.48L119.51,128,51.76,60.24a6,6,0,0,1,8.48-8.48L128,119.51l67.76-67.75a6,6,0,0,1,8.48,8.48L136.49,128Z" }))
  ],
  [
    "regular",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M205.66,194.34a8,8,0,0,1-11.32,11.32L128,139.31,61.66,205.66a8,8,0,0,1-11.32-11.32L116.69,128,50.34,61.66A8,8,0,0,1,61.66,50.34L128,116.69l66.34-66.35a8,8,0,0,1,11.32,11.32L139.31,128Z" }))
  ],
  [
    "thin",
    /* @__PURE__ */ u.createElement(u.Fragment, null, /* @__PURE__ */ u.createElement("path", { d: "M202.83,197.17a4,4,0,0,1-5.66,5.66L128,133.66,58.83,202.83a4,4,0,0,1-5.66-5.66L122.34,128,53.17,58.83a4,4,0,0,1,5.66-5.66L128,122.34l69.17-69.17a4,4,0,1,1,5.66,5.66L133.66,128Z" }))
  ]
]), $p = _s({
  color: "currentColor",
  size: "1em",
  weight: "regular",
  mirrored: !1
});
var Zp = Object.defineProperty, ri = Object.getOwnPropertySymbols, Lu = Object.prototype.hasOwnProperty, Pu = Object.prototype.propertyIsEnumerable, _l = (n, e, t) => e in n ? Zp(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Hl = (n, e) => {
  for (var t in e || (e = {}))
    Lu.call(e, t) && _l(n, t, e[t]);
  if (ri)
    for (var t of ri(e))
      Pu.call(e, t) && _l(n, t, e[t]);
  return n;
}, Il = (n, e) => {
  var t = {};
  for (var r in n)
    Lu.call(n, r) && e.indexOf(r) < 0 && (t[r] = n[r]);
  if (n != null && ri)
    for (var r of ri(n))
      e.indexOf(r) < 0 && Pu.call(n, r) && (t[r] = n[r]);
  return t;
};
const $u = S((n, e) => {
  const t = n, {
    alt: r,
    color: s,
    size: i,
    weight: o,
    mirrored: a,
    children: l,
    weights: c
  } = t, d = Il(t, [
    "alt",
    "color",
    "size",
    "weight",
    "mirrored",
    "children",
    "weights"
  ]), f = ni($p), {
    color: h = "currentColor",
    size: p,
    weight: m = "regular",
    mirrored: b = !1
  } = f, v = Il(f, [
    "color",
    "size",
    "weight",
    "mirrored"
  ]);
  return /* @__PURE__ */ u.createElement(
    "svg",
    Hl(Hl({
      ref: e,
      xmlns: "http://www.w3.org/2000/svg",
      width: i ?? p,
      height: i ?? p,
      fill: s ?? h,
      viewBox: "0 0 256 256",
      transform: a || b ? "scale(-1, 1)" : void 0
    }, v), d),
    !!r && /* @__PURE__ */ u.createElement("title", null, r),
    l,
    c.get(o ?? m)
  );
});
$u.displayName = "IconBase";
const be = $u;
var Vp = Object.defineProperty, zp = Object.defineProperties, jp = Object.getOwnPropertyDescriptors, Rl = Object.getOwnPropertySymbols, Fp = Object.prototype.hasOwnProperty, Bp = Object.prototype.propertyIsEnumerable, Dl = (n, e, t) => e in n ? Vp(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Wp = (n, e) => {
  for (var t in e || (e = {}))
    Fp.call(e, t) && Dl(n, t, e[t]);
  if (Rl)
    for (var t of Rl(e))
      Bp.call(e, t) && Dl(n, t, e[t]);
  return n;
}, Up = (n, e) => zp(n, jp(e));
const Zu = S((n, e) => /* @__PURE__ */ u.createElement(be, Up(Wp({ ref: e }, n), { weights: ip })));
Zu.displayName = "ArrowClockwise";
var Kp = Object.defineProperty, qp = Object.defineProperties, Jp = Object.getOwnPropertyDescriptors, Ll = Object.getOwnPropertySymbols, Gp = Object.prototype.hasOwnProperty, Yp = Object.prototype.propertyIsEnumerable, Pl = (n, e, t) => e in n ? Kp(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Qp = (n, e) => {
  for (var t in e || (e = {}))
    Gp.call(e, t) && Pl(n, t, e[t]);
  if (Ll)
    for (var t of Ll(e))
      Yp.call(e, t) && Pl(n, t, e[t]);
  return n;
}, Xp = (n, e) => qp(n, Jp(e));
const Vu = S((n, e) => /* @__PURE__ */ u.createElement(be, Xp(Qp({ ref: e }, n), { weights: op })));
Vu.displayName = "ArrowCounterClockwise";
var e1 = Object.defineProperty, t1 = Object.defineProperties, n1 = Object.getOwnPropertyDescriptors, $l = Object.getOwnPropertySymbols, r1 = Object.prototype.hasOwnProperty, s1 = Object.prototype.propertyIsEnumerable, Zl = (n, e, t) => e in n ? e1(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, i1 = (n, e) => {
  for (var t in e || (e = {}))
    r1.call(e, t) && Zl(n, t, e[t]);
  if ($l)
    for (var t of $l(e))
      s1.call(e, t) && Zl(n, t, e[t]);
  return n;
}, o1 = (n, e) => t1(n, n1(e));
const Ja = S((n, e) => /* @__PURE__ */ u.createElement(be, o1(i1({ ref: e }, n), { weights: ap })));
Ja.displayName = "CaretDown";
var a1 = Object.defineProperty, l1 = Object.defineProperties, c1 = Object.getOwnPropertyDescriptors, Vl = Object.getOwnPropertySymbols, d1 = Object.prototype.hasOwnProperty, u1 = Object.prototype.propertyIsEnumerable, zl = (n, e, t) => e in n ? a1(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, f1 = (n, e) => {
  for (var t in e || (e = {}))
    d1.call(e, t) && zl(n, t, e[t]);
  if (Vl)
    for (var t of Vl(e))
      u1.call(e, t) && zl(n, t, e[t]);
  return n;
}, h1 = (n, e) => l1(n, c1(e));
const Ga = S((n, e) => /* @__PURE__ */ u.createElement(be, h1(f1({ ref: e }, n), { weights: lp })));
Ga.displayName = "CaretRight";
var p1 = Object.defineProperty, m1 = Object.defineProperties, g1 = Object.getOwnPropertyDescriptors, jl = Object.getOwnPropertySymbols, y1 = Object.prototype.hasOwnProperty, b1 = Object.prototype.propertyIsEnumerable, Fl = (n, e, t) => e in n ? p1(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, v1 = (n, e) => {
  for (var t in e || (e = {}))
    y1.call(e, t) && Fl(n, t, e[t]);
  if (jl)
    for (var t of jl(e))
      b1.call(e, t) && Fl(n, t, e[t]);
  return n;
}, x1 = (n, e) => m1(n, g1(e));
const zu = S((n, e) => /* @__PURE__ */ u.createElement(be, x1(v1({ ref: e }, n), { weights: cp })));
zu.displayName = "CaretUpDown";
var k1 = Object.defineProperty, w1 = Object.defineProperties, E1 = Object.getOwnPropertyDescriptors, Bl = Object.getOwnPropertySymbols, M1 = Object.prototype.hasOwnProperty, S1 = Object.prototype.propertyIsEnumerable, Wl = (n, e, t) => e in n ? k1(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, A1 = (n, e) => {
  for (var t in e || (e = {}))
    M1.call(e, t) && Wl(n, t, e[t]);
  if (Bl)
    for (var t of Bl(e))
      S1.call(e, t) && Wl(n, t, e[t]);
  return n;
}, C1 = (n, e) => w1(n, E1(e));
const sr = S((n, e) => /* @__PURE__ */ u.createElement(be, C1(A1({ ref: e }, n), { weights: dp })));
sr.displayName = "Check";
var O1 = Object.defineProperty, T1 = Object.defineProperties, N1 = Object.getOwnPropertyDescriptors, Ul = Object.getOwnPropertySymbols, _1 = Object.prototype.hasOwnProperty, H1 = Object.prototype.propertyIsEnumerable, Kl = (n, e, t) => e in n ? O1(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, I1 = (n, e) => {
  for (var t in e || (e = {}))
    _1.call(e, t) && Kl(n, t, e[t]);
  if (Ul)
    for (var t of Ul(e))
      H1.call(e, t) && Kl(n, t, e[t]);
  return n;
}, R1 = (n, e) => T1(n, N1(e));
const ju = S((n, e) => /* @__PURE__ */ u.createElement(be, R1(I1({ ref: e }, n), { weights: up })));
ju.displayName = "CodeBlock";
var D1 = Object.defineProperty, L1 = Object.defineProperties, P1 = Object.getOwnPropertyDescriptors, ql = Object.getOwnPropertySymbols, $1 = Object.prototype.hasOwnProperty, Z1 = Object.prototype.propertyIsEnumerable, Jl = (n, e, t) => e in n ? D1(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, V1 = (n, e) => {
  for (var t in e || (e = {}))
    $1.call(e, t) && Jl(n, t, e[t]);
  if (ql)
    for (var t of ql(e))
      Z1.call(e, t) && Jl(n, t, e[t]);
  return n;
}, z1 = (n, e) => L1(n, P1(e));
const Fu = S((n, e) => /* @__PURE__ */ u.createElement(be, z1(V1({ ref: e }, n), { weights: fp })));
Fu.displayName = "Code";
var j1 = Object.defineProperty, F1 = Object.defineProperties, B1 = Object.getOwnPropertyDescriptors, Gl = Object.getOwnPropertySymbols, W1 = Object.prototype.hasOwnProperty, U1 = Object.prototype.propertyIsEnumerable, Yl = (n, e, t) => e in n ? j1(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, K1 = (n, e) => {
  for (var t in e || (e = {}))
    W1.call(e, t) && Yl(n, t, e[t]);
  if (Gl)
    for (var t of Gl(e))
      U1.call(e, t) && Yl(n, t, e[t]);
  return n;
}, q1 = (n, e) => F1(n, B1(e));
const Bu = S((n, e) => /* @__PURE__ */ u.createElement(be, q1(K1({ ref: e }, n), { weights: hp })));
Bu.displayName = "DotOutline";
var J1 = Object.defineProperty, G1 = Object.defineProperties, Y1 = Object.getOwnPropertyDescriptors, Ql = Object.getOwnPropertySymbols, Q1 = Object.prototype.hasOwnProperty, X1 = Object.prototype.propertyIsEnumerable, Xl = (n, e, t) => e in n ? J1(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, em = (n, e) => {
  for (var t in e || (e = {}))
    Q1.call(e, t) && Xl(n, t, e[t]);
  if (Ql)
    for (var t of Ql(e))
      X1.call(e, t) && Xl(n, t, e[t]);
  return n;
}, tm = (n, e) => G1(n, Y1(e));
const Wu = S((n, e) => /* @__PURE__ */ u.createElement(be, tm(em({ ref: e }, n), { weights: pp })));
Wu.displayName = "DotsSixVertical";
var nm = Object.defineProperty, rm = Object.defineProperties, sm = Object.getOwnPropertyDescriptors, ec = Object.getOwnPropertySymbols, im = Object.prototype.hasOwnProperty, om = Object.prototype.propertyIsEnumerable, tc = (n, e, t) => e in n ? nm(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, am = (n, e) => {
  for (var t in e || (e = {}))
    im.call(e, t) && tc(n, t, e[t]);
  if (ec)
    for (var t of ec(e))
      om.call(e, t) && tc(n, t, e[t]);
  return n;
}, lm = (n, e) => rm(n, sm(e));
const Uu = S((n, e) => /* @__PURE__ */ u.createElement(be, lm(am({ ref: e }, n), { weights: mp })));
Uu.displayName = "HighlighterCircle";
var cm = Object.defineProperty, dm = Object.defineProperties, um = Object.getOwnPropertyDescriptors, nc = Object.getOwnPropertySymbols, fm = Object.prototype.hasOwnProperty, hm = Object.prototype.propertyIsEnumerable, rc = (n, e, t) => e in n ? cm(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, pm = (n, e) => {
  for (var t in e || (e = {}))
    fm.call(e, t) && rc(n, t, e[t]);
  if (nc)
    for (var t of nc(e))
      hm.call(e, t) && rc(n, t, e[t]);
  return n;
}, mm = (n, e) => dm(n, um(e));
const Ku = S((n, e) => /* @__PURE__ */ u.createElement(be, mm(pm({ ref: e }, n), { weights: gp })));
Ku.displayName = "Image";
var gm = Object.defineProperty, ym = Object.defineProperties, bm = Object.getOwnPropertyDescriptors, sc = Object.getOwnPropertySymbols, vm = Object.prototype.hasOwnProperty, xm = Object.prototype.propertyIsEnumerable, ic = (n, e, t) => e in n ? gm(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, km = (n, e) => {
  for (var t in e || (e = {}))
    vm.call(e, t) && ic(n, t, e[t]);
  if (sc)
    for (var t of sc(e))
      xm.call(e, t) && ic(n, t, e[t]);
  return n;
}, wm = (n, e) => ym(n, bm(e));
const qu = S((n, e) => /* @__PURE__ */ u.createElement(be, wm(km({ ref: e }, n), { weights: yp })));
qu.displayName = "KeyReturn";
var Em = Object.defineProperty, Mm = Object.defineProperties, Sm = Object.getOwnPropertyDescriptors, oc = Object.getOwnPropertySymbols, Am = Object.prototype.hasOwnProperty, Cm = Object.prototype.propertyIsEnumerable, ac = (n, e, t) => e in n ? Em(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Om = (n, e) => {
  for (var t in e || (e = {}))
    Am.call(e, t) && ac(n, t, e[t]);
  if (oc)
    for (var t of oc(e))
      Cm.call(e, t) && ac(n, t, e[t]);
  return n;
}, Tm = (n, e) => Mm(n, Sm(e));
const Ju = S((n, e) => /* @__PURE__ */ u.createElement(be, Tm(Om({ ref: e }, n), { weights: bp })));
Ju.displayName = "LinkSimple";
var Nm = Object.defineProperty, _m = Object.defineProperties, Hm = Object.getOwnPropertyDescriptors, lc = Object.getOwnPropertySymbols, Im = Object.prototype.hasOwnProperty, Rm = Object.prototype.propertyIsEnumerable, cc = (n, e, t) => e in n ? Nm(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Dm = (n, e) => {
  for (var t in e || (e = {}))
    Im.call(e, t) && cc(n, t, e[t]);
  if (lc)
    for (var t of lc(e))
      Rm.call(e, t) && cc(n, t, e[t]);
  return n;
}, Lm = (n, e) => _m(n, Hm(e));
const Gu = S((n, e) => /* @__PURE__ */ u.createElement(be, Lm(Dm({ ref: e }, n), { weights: vp })));
Gu.displayName = "ListBullets";
var Pm = Object.defineProperty, $m = Object.defineProperties, Zm = Object.getOwnPropertyDescriptors, dc = Object.getOwnPropertySymbols, Vm = Object.prototype.hasOwnProperty, zm = Object.prototype.propertyIsEnumerable, uc = (n, e, t) => e in n ? Pm(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, jm = (n, e) => {
  for (var t in e || (e = {}))
    Vm.call(e, t) && uc(n, t, e[t]);
  if (dc)
    for (var t of dc(e))
      zm.call(e, t) && uc(n, t, e[t]);
  return n;
}, Fm = (n, e) => $m(n, Zm(e));
const Yu = S((n, e) => /* @__PURE__ */ u.createElement(be, Fm(jm({ ref: e }, n), { weights: xp })));
Yu.displayName = "ListNumbers";
var Bm = Object.defineProperty, Wm = Object.defineProperties, Um = Object.getOwnPropertyDescriptors, fc = Object.getOwnPropertySymbols, Km = Object.prototype.hasOwnProperty, qm = Object.prototype.propertyIsEnumerable, hc = (n, e, t) => e in n ? Bm(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Jm = (n, e) => {
  for (var t in e || (e = {}))
    Km.call(e, t) && hc(n, t, e[t]);
  if (fc)
    for (var t of fc(e))
      qm.call(e, t) && hc(n, t, e[t]);
  return n;
}, Gm = (n, e) => Wm(n, Um(e));
const Qu = S((n, e) => /* @__PURE__ */ u.createElement(be, Gm(Jm({ ref: e }, n), { weights: kp })));
Qu.displayName = "MagnifyingGlass";
var Ym = Object.defineProperty, Qm = Object.defineProperties, Xm = Object.getOwnPropertyDescriptors, pc = Object.getOwnPropertySymbols, eg = Object.prototype.hasOwnProperty, tg = Object.prototype.propertyIsEnumerable, mc = (n, e, t) => e in n ? Ym(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, ng = (n, e) => {
  for (var t in e || (e = {}))
    eg.call(e, t) && mc(n, t, e[t]);
  if (pc)
    for (var t of pc(e))
      tg.call(e, t) && mc(n, t, e[t]);
  return n;
}, rg = (n, e) => Qm(n, Xm(e));
const Xu = S((n, e) => /* @__PURE__ */ u.createElement(be, rg(ng({ ref: e }, n), { weights: wp })));
Xu.displayName = "Minus";
var sg = Object.defineProperty, ig = Object.defineProperties, og = Object.getOwnPropertyDescriptors, gc = Object.getOwnPropertySymbols, ag = Object.prototype.hasOwnProperty, lg = Object.prototype.propertyIsEnumerable, yc = (n, e, t) => e in n ? sg(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, cg = (n, e) => {
  for (var t in e || (e = {}))
    ag.call(e, t) && yc(n, t, e[t]);
  if (gc)
    for (var t of gc(e))
      lg.call(e, t) && yc(n, t, e[t]);
  return n;
}, dg = (n, e) => ig(n, og(e));
const ef = S((n, e) => /* @__PURE__ */ u.createElement(be, dg(cg({ ref: e }, n), { weights: Ep })));
ef.displayName = "Paragraph";
var ug = Object.defineProperty, fg = Object.defineProperties, hg = Object.getOwnPropertyDescriptors, bc = Object.getOwnPropertySymbols, pg = Object.prototype.hasOwnProperty, mg = Object.prototype.propertyIsEnumerable, vc = (n, e, t) => e in n ? ug(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, gg = (n, e) => {
  for (var t in e || (e = {}))
    pg.call(e, t) && vc(n, t, e[t]);
  if (bc)
    for (var t of bc(e))
      mg.call(e, t) && vc(n, t, e[t]);
  return n;
}, yg = (n, e) => fg(n, hg(e));
const tf = S((n, e) => /* @__PURE__ */ u.createElement(be, yg(gg({ ref: e }, n), { weights: Mp })));
tf.displayName = "TextAUnderline";
var bg = Object.defineProperty, vg = Object.defineProperties, xg = Object.getOwnPropertyDescriptors, xc = Object.getOwnPropertySymbols, kg = Object.prototype.hasOwnProperty, wg = Object.prototype.propertyIsEnumerable, kc = (n, e, t) => e in n ? bg(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Eg = (n, e) => {
  for (var t in e || (e = {}))
    kg.call(e, t) && kc(n, t, e[t]);
  if (xc)
    for (var t of xc(e))
      wg.call(e, t) && kc(n, t, e[t]);
  return n;
}, Mg = (n, e) => vg(n, xg(e));
const nf = S((n, e) => /* @__PURE__ */ u.createElement(be, Mg(Eg({ ref: e }, n), { weights: Sp })));
nf.displayName = "TextAlignCenter";
var Sg = Object.defineProperty, Ag = Object.defineProperties, Cg = Object.getOwnPropertyDescriptors, wc = Object.getOwnPropertySymbols, Og = Object.prototype.hasOwnProperty, Tg = Object.prototype.propertyIsEnumerable, Ec = (n, e, t) => e in n ? Sg(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Ng = (n, e) => {
  for (var t in e || (e = {}))
    Og.call(e, t) && Ec(n, t, e[t]);
  if (wc)
    for (var t of wc(e))
      Tg.call(e, t) && Ec(n, t, e[t]);
  return n;
}, _g = (n, e) => Ag(n, Cg(e));
const rf = S((n, e) => /* @__PURE__ */ u.createElement(be, _g(Ng({ ref: e }, n), { weights: Ap })));
rf.displayName = "TextAlignJustify";
var Hg = Object.defineProperty, Ig = Object.defineProperties, Rg = Object.getOwnPropertyDescriptors, Mc = Object.getOwnPropertySymbols, Dg = Object.prototype.hasOwnProperty, Lg = Object.prototype.propertyIsEnumerable, Sc = (n, e, t) => e in n ? Hg(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Pg = (n, e) => {
  for (var t in e || (e = {}))
    Dg.call(e, t) && Sc(n, t, e[t]);
  if (Mc)
    for (var t of Mc(e))
      Lg.call(e, t) && Sc(n, t, e[t]);
  return n;
}, $g = (n, e) => Ig(n, Rg(e));
const sf = S((n, e) => /* @__PURE__ */ u.createElement(be, $g(Pg({ ref: e }, n), { weights: Cp })));
sf.displayName = "TextAlignLeft";
var Zg = Object.defineProperty, Vg = Object.defineProperties, zg = Object.getOwnPropertyDescriptors, Ac = Object.getOwnPropertySymbols, jg = Object.prototype.hasOwnProperty, Fg = Object.prototype.propertyIsEnumerable, Cc = (n, e, t) => e in n ? Zg(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Bg = (n, e) => {
  for (var t in e || (e = {}))
    jg.call(e, t) && Cc(n, t, e[t]);
  if (Ac)
    for (var t of Ac(e))
      Fg.call(e, t) && Cc(n, t, e[t]);
  return n;
}, Wg = (n, e) => Vg(n, zg(e));
const of = S((n, e) => /* @__PURE__ */ u.createElement(be, Wg(Bg({ ref: e }, n), { weights: Op })));
of.displayName = "TextAlignRight";
var Ug = Object.defineProperty, Kg = Object.defineProperties, qg = Object.getOwnPropertyDescriptors, Oc = Object.getOwnPropertySymbols, Jg = Object.prototype.hasOwnProperty, Gg = Object.prototype.propertyIsEnumerable, Tc = (n, e, t) => e in n ? Ug(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Yg = (n, e) => {
  for (var t in e || (e = {}))
    Jg.call(e, t) && Tc(n, t, e[t]);
  if (Oc)
    for (var t of Oc(e))
      Gg.call(e, t) && Tc(n, t, e[t]);
  return n;
}, Qg = (n, e) => Kg(n, qg(e));
const af = S((n, e) => /* @__PURE__ */ u.createElement(be, Qg(Yg({ ref: e }, n), { weights: Tp })));
af.displayName = "TextB";
var Xg = Object.defineProperty, e2 = Object.defineProperties, t2 = Object.getOwnPropertyDescriptors, Nc = Object.getOwnPropertySymbols, n2 = Object.prototype.hasOwnProperty, r2 = Object.prototype.propertyIsEnumerable, _c = (n, e, t) => e in n ? Xg(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, s2 = (n, e) => {
  for (var t in e || (e = {}))
    n2.call(e, t) && _c(n, t, e[t]);
  if (Nc)
    for (var t of Nc(e))
      r2.call(e, t) && _c(n, t, e[t]);
  return n;
}, i2 = (n, e) => e2(n, t2(e));
const lf = S((n, e) => /* @__PURE__ */ u.createElement(be, i2(s2({ ref: e }, n), { weights: Np })));
lf.displayName = "TextHOne";
var o2 = Object.defineProperty, a2 = Object.defineProperties, l2 = Object.getOwnPropertyDescriptors, Hc = Object.getOwnPropertySymbols, c2 = Object.prototype.hasOwnProperty, d2 = Object.prototype.propertyIsEnumerable, Ic = (n, e, t) => e in n ? o2(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, u2 = (n, e) => {
  for (var t in e || (e = {}))
    c2.call(e, t) && Ic(n, t, e[t]);
  if (Hc)
    for (var t of Hc(e))
      d2.call(e, t) && Ic(n, t, e[t]);
  return n;
}, f2 = (n, e) => a2(n, l2(e));
const cf = S((n, e) => /* @__PURE__ */ u.createElement(be, f2(u2({ ref: e }, n), { weights: _p })));
cf.displayName = "TextHThree";
var h2 = Object.defineProperty, p2 = Object.defineProperties, m2 = Object.getOwnPropertyDescriptors, Rc = Object.getOwnPropertySymbols, g2 = Object.prototype.hasOwnProperty, y2 = Object.prototype.propertyIsEnumerable, Dc = (n, e, t) => e in n ? h2(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, b2 = (n, e) => {
  for (var t in e || (e = {}))
    g2.call(e, t) && Dc(n, t, e[t]);
  if (Rc)
    for (var t of Rc(e))
      y2.call(e, t) && Dc(n, t, e[t]);
  return n;
}, v2 = (n, e) => p2(n, m2(e));
const df = S((n, e) => /* @__PURE__ */ u.createElement(be, v2(b2({ ref: e }, n), { weights: Hp })));
df.displayName = "TextHTwo";
var x2 = Object.defineProperty, k2 = Object.defineProperties, w2 = Object.getOwnPropertyDescriptors, Lc = Object.getOwnPropertySymbols, E2 = Object.prototype.hasOwnProperty, M2 = Object.prototype.propertyIsEnumerable, Pc = (n, e, t) => e in n ? x2(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, S2 = (n, e) => {
  for (var t in e || (e = {}))
    E2.call(e, t) && Pc(n, t, e[t]);
  if (Lc)
    for (var t of Lc(e))
      M2.call(e, t) && Pc(n, t, e[t]);
  return n;
}, A2 = (n, e) => k2(n, w2(e));
const uf = S((n, e) => /* @__PURE__ */ u.createElement(be, A2(S2({ ref: e }, n), { weights: Ip })));
uf.displayName = "TextIndent";
var C2 = Object.defineProperty, O2 = Object.defineProperties, T2 = Object.getOwnPropertyDescriptors, $c = Object.getOwnPropertySymbols, N2 = Object.prototype.hasOwnProperty, _2 = Object.prototype.propertyIsEnumerable, Zc = (n, e, t) => e in n ? C2(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, H2 = (n, e) => {
  for (var t in e || (e = {}))
    N2.call(e, t) && Zc(n, t, e[t]);
  if ($c)
    for (var t of $c(e))
      _2.call(e, t) && Zc(n, t, e[t]);
  return n;
}, I2 = (n, e) => O2(n, T2(e));
const ff = S((n, e) => /* @__PURE__ */ u.createElement(be, I2(H2({ ref: e }, n), { weights: Rp })));
ff.displayName = "TextItalic";
var R2 = Object.defineProperty, D2 = Object.defineProperties, L2 = Object.getOwnPropertyDescriptors, Vc = Object.getOwnPropertySymbols, P2 = Object.prototype.hasOwnProperty, $2 = Object.prototype.propertyIsEnumerable, zc = (n, e, t) => e in n ? R2(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, Z2 = (n, e) => {
  for (var t in e || (e = {}))
    P2.call(e, t) && zc(n, t, e[t]);
  if (Vc)
    for (var t of Vc(e))
      $2.call(e, t) && zc(n, t, e[t]);
  return n;
}, V2 = (n, e) => D2(n, L2(e));
const hf = S((n, e) => /* @__PURE__ */ u.createElement(be, V2(Z2({ ref: e }, n), { weights: Dp })));
hf.displayName = "TextOutdent";
var z2 = Object.defineProperty, j2 = Object.defineProperties, F2 = Object.getOwnPropertyDescriptors, jc = Object.getOwnPropertySymbols, B2 = Object.prototype.hasOwnProperty, W2 = Object.prototype.propertyIsEnumerable, Fc = (n, e, t) => e in n ? z2(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, U2 = (n, e) => {
  for (var t in e || (e = {}))
    B2.call(e, t) && Fc(n, t, e[t]);
  if (jc)
    for (var t of jc(e))
      W2.call(e, t) && Fc(n, t, e[t]);
  return n;
}, K2 = (n, e) => j2(n, F2(e));
const pf = S((n, e) => /* @__PURE__ */ u.createElement(be, K2(U2({ ref: e }, n), { weights: Lp })));
pf.displayName = "TextStrikethrough";
var q2 = Object.defineProperty, J2 = Object.defineProperties, G2 = Object.getOwnPropertyDescriptors, Bc = Object.getOwnPropertySymbols, Y2 = Object.prototype.hasOwnProperty, Q2 = Object.prototype.propertyIsEnumerable, Wc = (n, e, t) => e in n ? q2(n, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : n[e] = t, X2 = (n, e) => {
  for (var t in e || (e = {}))
    Y2.call(e, t) && Wc(n, t, e[t]);
  if (Bc)
    for (var t of Bc(e))
      Q2.call(e, t) && Wc(n, t, e[t]);
  return n;
}, e6 = (n, e) => J2(n, G2(e));
const no = S((n, e) => /* @__PURE__ */ u.createElement(be, e6(X2({ ref: e }, n), { weights: Pp })));
no.displayName = "X";
var gr = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {}, t6 = { exports: {} };
/* @license
Papa Parse
v5.4.1
https://github.com/mholt/PapaParse
License: MIT
*/
(function(n, e) {
  (function(t, r) {
    n.exports = r();
  })(gr, function t() {
    var r = typeof self < "u" ? self : typeof window < "u" ? window : r !== void 0 ? r : {}, s = !r.document && !!r.postMessage, i = r.IS_PAPA_WORKER || !1, o = {}, a = 0, l = { parse: function(x, y) {
      var E = (y = y || {}).dynamicTyping || !1;
      if ($(E) && (y.dynamicTypingFunction = E, E = {}), y.dynamicTyping = E, y.transform = !!$(y.transform) && y.transform, y.worker && l.WORKERS_SUPPORTED) {
        var O = function() {
          if (!l.WORKERS_SUPPORTED) return !1;
          var Q = (D = r.URL || r.webkitURL || null, C = t.toString(), l.BLOB_URL || (l.BLOB_URL = D.createObjectURL(new Blob(["var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; ", "(", C, ")();"], { type: "text/javascript" })))), R = new r.Worker(Q), D, C;
          return R.onmessage = H, R.id = a++, o[R.id] = R;
        }();
        return O.userStep = y.step, O.userChunk = y.chunk, O.userComplete = y.complete, O.userError = y.error, y.step = $(y.step), y.chunk = $(y.chunk), y.complete = $(y.complete), y.error = $(y.error), delete y.worker, void O.postMessage({ input: x, config: y, workerId: O.id });
      }
      var _ = null;
      return l.NODE_STREAM_INPUT, typeof x == "string" ? (x = function(Q) {
        return Q.charCodeAt(0) === 65279 ? Q.slice(1) : Q;
      }(x), _ = y.download ? new f(y) : new p(y)) : x.readable === !0 && $(x.read) && $(x.on) ? _ = new m(y) : (r.File && x instanceof File || x instanceof Object) && (_ = new h(y)), _.stream(x);
    }, unparse: function(x, y) {
      var E = !1, O = !0, _ = ",", Q = `\r
`, R = '"', D = R + R, C = !1, M = null, N = !1;
      (function() {
        if (typeof y == "object") {
          if (typeof y.delimiter != "string" || l.BAD_DELIMITERS.filter(function(k) {
            return y.delimiter.indexOf(k) !== -1;
          }).length || (_ = y.delimiter), (typeof y.quotes == "boolean" || typeof y.quotes == "function" || Array.isArray(y.quotes)) && (E = y.quotes), typeof y.skipEmptyLines != "boolean" && typeof y.skipEmptyLines != "string" || (C = y.skipEmptyLines), typeof y.newline == "string" && (Q = y.newline), typeof y.quoteChar == "string" && (R = y.quoteChar), typeof y.header == "boolean" && (O = y.header), Array.isArray(y.columns)) {
            if (y.columns.length === 0) throw new Error("Option columns is empty");
            M = y.columns;
          }
          y.escapeChar !== void 0 && (D = y.escapeChar + R), (typeof y.escapeFormulae == "boolean" || y.escapeFormulae instanceof RegExp) && (N = y.escapeFormulae instanceof RegExp ? y.escapeFormulae : /^[=+\-@\t\r].*$/);
        }
      })();
      var I = new RegExp(v(R), "g");
      if (typeof x == "string" && (x = JSON.parse(x)), Array.isArray(x)) {
        if (!x.length || Array.isArray(x[0])) return X(null, x, C);
        if (typeof x[0] == "object") return X(M || Object.keys(x[0]), x, C);
      } else if (typeof x == "object") return typeof x.data == "string" && (x.data = JSON.parse(x.data)), Array.isArray(x.data) && (x.fields || (x.fields = x.meta && x.meta.fields || M), x.fields || (x.fields = Array.isArray(x.data[0]) ? x.fields : typeof x.data[0] == "object" ? Object.keys(x.data[0]) : []), Array.isArray(x.data[0]) || typeof x.data[0] == "object" || (x.data = [x.data])), X(x.fields || [], x.data || [], C);
      throw new Error("Unable to serialize unrecognized input");
      function X(k, Z, K) {
        var V = "";
        typeof k == "string" && (k = JSON.parse(k)), typeof Z == "string" && (Z = JSON.parse(Z));
        var re = Array.isArray(k) && 0 < k.length, ae = !Array.isArray(Z[0]);
        if (re && O) {
          for (var me = 0; me < k.length; me++) 0 < me && (V += _), V += te(k[me], me);
          0 < Z.length && (V += Q);
        }
        for (var J = 0; J < Z.length; J++) {
          var se = re ? k.length : Z[J].length, ve = !1, Me = re ? Object.keys(Z[J]).length === 0 : Z[J].length === 0;
          if (K && !re && (ve = K === "greedy" ? Z[J].join("").trim() === "" : Z[J].length === 1 && Z[J][0].length === 0), K === "greedy" && re) {
            for (var xe = [], Je = 0; Je < se; Je++) {
              var De = ae ? k[Je] : Je;
              xe.push(Z[J][De]);
            }
            ve = xe.join("").trim() === "";
          }
          if (!ve) {
            for (var Se = 0; Se < se; Se++) {
              0 < Se && !Me && (V += _);
              var Et = re && ae ? k[Se] : Se;
              V += te(Z[J][Et], Se);
            }
            J < Z.length - 1 && (!K || 0 < se && !Me) && (V += Q);
          }
        }
        return V;
      }
      function te(k, Z) {
        if (k == null) return "";
        if (k.constructor === Date) return JSON.stringify(k).slice(1, 25);
        var K = !1;
        N && typeof k == "string" && N.test(k) && (k = "'" + k, K = !0);
        var V = k.toString().replace(I, D);
        return (K = K || E === !0 || typeof E == "function" && E(k, Z) || Array.isArray(E) && E[Z] || function(re, ae) {
          for (var me = 0; me < ae.length; me++) if (-1 < re.indexOf(ae[me])) return !0;
          return !1;
        }(V, l.BAD_DELIMITERS) || -1 < V.indexOf(_) || V.charAt(0) === " " || V.charAt(V.length - 1) === " ") ? R + V + R : V;
      }
    } };
    if (l.RECORD_SEP = "", l.UNIT_SEP = "", l.BYTE_ORDER_MARK = "\uFEFF", l.BAD_DELIMITERS = ["\r", `
`, '"', l.BYTE_ORDER_MARK], l.WORKERS_SUPPORTED = !s && !!r.Worker, l.NODE_STREAM_INPUT = 1, l.LocalChunkSize = 10485760, l.RemoteChunkSize = 5242880, l.DefaultDelimiter = ",", l.Parser = w, l.ParserHandle = b, l.NetworkStreamer = f, l.FileStreamer = h, l.StringStreamer = p, l.ReadableStreamStreamer = m, r.jQuery) {
      var c = r.jQuery;
      c.fn.parse = function(x) {
        var y = x.config || {}, E = [];
        return this.each(function(Q) {
          if (!(c(this).prop("tagName").toUpperCase() === "INPUT" && c(this).attr("type").toLowerCase() === "file" && r.FileReader) || !this.files || this.files.length === 0) return !0;
          for (var R = 0; R < this.files.length; R++) E.push({ file: this.files[R], inputElem: this, instanceConfig: c.extend({}, y) });
        }), O(), this;
        function O() {
          if (E.length !== 0) {
            var Q, R, D, C, M = E[0];
            if ($(x.before)) {
              var N = x.before(M.file, M.inputElem);
              if (typeof N == "object") {
                if (N.action === "abort") return Q = "AbortError", R = M.file, D = M.inputElem, C = N.reason, void ($(x.error) && x.error({ name: Q }, R, D, C));
                if (N.action === "skip") return void _();
                typeof N.config == "object" && (M.instanceConfig = c.extend(M.instanceConfig, N.config));
              } else if (N === "skip") return void _();
            }
            var I = M.instanceConfig.complete;
            M.instanceConfig.complete = function(X) {
              $(I) && I(X, M.file, M.inputElem), _();
            }, l.parse(M.file, M.instanceConfig);
          } else $(x.complete) && x.complete();
        }
        function _() {
          E.splice(0, 1), O();
        }
      };
    }
    function d(x) {
      this._handle = null, this._finished = !1, this._completed = !1, this._halted = !1, this._input = null, this._baseIndex = 0, this._partialLine = "", this._rowCount = 0, this._start = 0, this._nextChunk = null, this.isFirstChunk = !0, this._completeResults = { data: [], errors: [], meta: {} }, (function(y) {
        var E = q(y);
        E.chunkSize = parseInt(E.chunkSize), y.step || y.chunk || (E.chunkSize = null), this._handle = new b(E), (this._handle.streamer = this)._config = E;
      }).call(this, x), this.parseChunk = function(y, E) {
        if (this.isFirstChunk && $(this._config.beforeFirstChunk)) {
          var O = this._config.beforeFirstChunk(y);
          O !== void 0 && (y = O);
        }
        this.isFirstChunk = !1, this._halted = !1;
        var _ = this._partialLine + y;
        this._partialLine = "";
        var Q = this._handle.parse(_, this._baseIndex, !this._finished);
        if (!this._handle.paused() && !this._handle.aborted()) {
          var R = Q.meta.cursor;
          this._finished || (this._partialLine = _.substring(R - this._baseIndex), this._baseIndex = R), Q && Q.data && (this._rowCount += Q.data.length);
          var D = this._finished || this._config.preview && this._rowCount >= this._config.preview;
          if (i) r.postMessage({ results: Q, workerId: l.WORKER_ID, finished: D });
          else if ($(this._config.chunk) && !E) {
            if (this._config.chunk(Q, this._handle), this._handle.paused() || this._handle.aborted()) return void (this._halted = !0);
            Q = void 0, this._completeResults = void 0;
          }
          return this._config.step || this._config.chunk || (this._completeResults.data = this._completeResults.data.concat(Q.data), this._completeResults.errors = this._completeResults.errors.concat(Q.errors), this._completeResults.meta = Q.meta), this._completed || !D || !$(this._config.complete) || Q && Q.meta.aborted || (this._config.complete(this._completeResults, this._input), this._completed = !0), D || Q && Q.meta.paused || this._nextChunk(), Q;
        }
        this._halted = !0;
      }, this._sendError = function(y) {
        $(this._config.error) ? this._config.error(y) : i && this._config.error && r.postMessage({ workerId: l.WORKER_ID, error: y, finished: !1 });
      };
    }
    function f(x) {
      var y;
      (x = x || {}).chunkSize || (x.chunkSize = l.RemoteChunkSize), d.call(this, x), this._nextChunk = s ? function() {
        this._readChunk(), this._chunkLoaded();
      } : function() {
        this._readChunk();
      }, this.stream = function(E) {
        this._input = E, this._nextChunk();
      }, this._readChunk = function() {
        if (this._finished) this._chunkLoaded();
        else {
          if (y = new XMLHttpRequest(), this._config.withCredentials && (y.withCredentials = this._config.withCredentials), s || (y.onload = A(this._chunkLoaded, this), y.onerror = A(this._chunkError, this)), y.open(this._config.downloadRequestBody ? "POST" : "GET", this._input, !s), this._config.downloadRequestHeaders) {
            var E = this._config.downloadRequestHeaders;
            for (var O in E) y.setRequestHeader(O, E[O]);
          }
          if (this._config.chunkSize) {
            var _ = this._start + this._config.chunkSize - 1;
            y.setRequestHeader("Range", "bytes=" + this._start + "-" + _);
          }
          try {
            y.send(this._config.downloadRequestBody);
          } catch (Q) {
            this._chunkError(Q.message);
          }
          s && y.status === 0 && this._chunkError();
        }
      }, this._chunkLoaded = function() {
        y.readyState === 4 && (y.status < 200 || 400 <= y.status ? this._chunkError() : (this._start += this._config.chunkSize ? this._config.chunkSize : y.responseText.length, this._finished = !this._config.chunkSize || this._start >= function(E) {
          var O = E.getResponseHeader("Content-Range");
          return O === null ? -1 : parseInt(O.substring(O.lastIndexOf("/") + 1));
        }(y), this.parseChunk(y.responseText)));
      }, this._chunkError = function(E) {
        var O = y.statusText || E;
        this._sendError(new Error(O));
      };
    }
    function h(x) {
      var y, E;
      (x = x || {}).chunkSize || (x.chunkSize = l.LocalChunkSize), d.call(this, x);
      var O = typeof FileReader < "u";
      this.stream = function(_) {
        this._input = _, E = _.slice || _.webkitSlice || _.mozSlice, O ? ((y = new FileReader()).onload = A(this._chunkLoaded, this), y.onerror = A(this._chunkError, this)) : y = new FileReaderSync(), this._nextChunk();
      }, this._nextChunk = function() {
        this._finished || this._config.preview && !(this._rowCount < this._config.preview) || this._readChunk();
      }, this._readChunk = function() {
        var _ = this._input;
        if (this._config.chunkSize) {
          var Q = Math.min(this._start + this._config.chunkSize, this._input.size);
          _ = E.call(_, this._start, Q);
        }
        var R = y.readAsText(_, this._config.encoding);
        O || this._chunkLoaded({ target: { result: R } });
      }, this._chunkLoaded = function(_) {
        this._start += this._config.chunkSize, this._finished = !this._config.chunkSize || this._start >= this._input.size, this.parseChunk(_.target.result);
      }, this._chunkError = function() {
        this._sendError(y.error);
      };
    }
    function p(x) {
      var y;
      d.call(this, x = x || {}), this.stream = function(E) {
        return y = E, this._nextChunk();
      }, this._nextChunk = function() {
        if (!this._finished) {
          var E, O = this._config.chunkSize;
          return O ? (E = y.substring(0, O), y = y.substring(O)) : (E = y, y = ""), this._finished = !y, this.parseChunk(E);
        }
      };
    }
    function m(x) {
      d.call(this, x = x || {});
      var y = [], E = !0, O = !1;
      this.pause = function() {
        d.prototype.pause.apply(this, arguments), this._input.pause();
      }, this.resume = function() {
        d.prototype.resume.apply(this, arguments), this._input.resume();
      }, this.stream = function(_) {
        this._input = _, this._input.on("data", this._streamData), this._input.on("end", this._streamEnd), this._input.on("error", this._streamError);
      }, this._checkIsFinished = function() {
        O && y.length === 1 && (this._finished = !0);
      }, this._nextChunk = function() {
        this._checkIsFinished(), y.length ? this.parseChunk(y.shift()) : E = !0;
      }, this._streamData = A(function(_) {
        try {
          y.push(typeof _ == "string" ? _ : _.toString(this._config.encoding)), E && (E = !1, this._checkIsFinished(), this.parseChunk(y.shift()));
        } catch (Q) {
          this._streamError(Q);
        }
      }, this), this._streamError = A(function(_) {
        this._streamCleanUp(), this._sendError(_);
      }, this), this._streamEnd = A(function() {
        this._streamCleanUp(), O = !0, this._streamData("");
      }, this), this._streamCleanUp = A(function() {
        this._input.removeListener("data", this._streamData), this._input.removeListener("end", this._streamEnd), this._input.removeListener("error", this._streamError);
      }, this);
    }
    function b(x) {
      var y, E, O, _ = Math.pow(2, 53), Q = -_, R = /^\s*-?(\d+\.?|\.\d+|\d+\.\d+)([eE][-+]?\d+)?\s*$/, D = /^((\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z)))$/, C = this, M = 0, N = 0, I = !1, X = !1, te = [], k = { data: [], errors: [], meta: {} };
      if ($(x.step)) {
        var Z = x.step;
        x.step = function(J) {
          if (k = J, re()) V();
          else {
            if (V(), k.data.length === 0) return;
            M += J.data.length, x.preview && M > x.preview ? E.abort() : (k.data = k.data[0], Z(k, C));
          }
        };
      }
      function K(J) {
        return x.skipEmptyLines === "greedy" ? J.join("").trim() === "" : J.length === 1 && J[0].length === 0;
      }
      function V() {
        return k && O && (me("Delimiter", "UndetectableDelimiter", "Unable to auto-detect delimiting character; defaulted to '" + l.DefaultDelimiter + "'"), O = !1), x.skipEmptyLines && (k.data = k.data.filter(function(J) {
          return !K(J);
        })), re() && function() {
          if (!k) return;
          function J(ve, Me) {
            $(x.transformHeader) && (ve = x.transformHeader(ve, Me)), te.push(ve);
          }
          if (Array.isArray(k.data[0])) {
            for (var se = 0; re() && se < k.data.length; se++) k.data[se].forEach(J);
            k.data.splice(0, 1);
          } else k.data.forEach(J);
        }(), function() {
          if (!k || !x.header && !x.dynamicTyping && !x.transform) return k;
          function J(ve, Me) {
            var xe, Je = x.header ? {} : [];
            for (xe = 0; xe < ve.length; xe++) {
              var De = xe, Se = ve[xe];
              x.header && (De = xe >= te.length ? "__parsed_extra" : te[xe]), x.transform && (Se = x.transform(Se, De)), Se = ae(De, Se), De === "__parsed_extra" ? (Je[De] = Je[De] || [], Je[De].push(Se)) : Je[De] = Se;
            }
            return x.header && (xe > te.length ? me("FieldMismatch", "TooManyFields", "Too many fields: expected " + te.length + " fields but parsed " + xe, N + Me) : xe < te.length && me("FieldMismatch", "TooFewFields", "Too few fields: expected " + te.length + " fields but parsed " + xe, N + Me)), Je;
          }
          var se = 1;
          return !k.data.length || Array.isArray(k.data[0]) ? (k.data = k.data.map(J), se = k.data.length) : k.data = J(k.data, 0), x.header && k.meta && (k.meta.fields = te), N += se, k;
        }();
      }
      function re() {
        return x.header && te.length === 0;
      }
      function ae(J, se) {
        return ve = J, x.dynamicTypingFunction && x.dynamicTyping[ve] === void 0 && (x.dynamicTyping[ve] = x.dynamicTypingFunction(ve)), (x.dynamicTyping[ve] || x.dynamicTyping) === !0 ? se === "true" || se === "TRUE" || se !== "false" && se !== "FALSE" && (function(Me) {
          if (R.test(Me)) {
            var xe = parseFloat(Me);
            if (Q < xe && xe < _) return !0;
          }
          return !1;
        }(se) ? parseFloat(se) : D.test(se) ? new Date(se) : se === "" ? null : se) : se;
        var ve;
      }
      function me(J, se, ve, Me) {
        var xe = { type: J, code: se, message: ve };
        Me !== void 0 && (xe.row = Me), k.errors.push(xe);
      }
      this.parse = function(J, se, ve) {
        var Me = x.quoteChar || '"';
        if (x.newline || (x.newline = function(De, Se) {
          De = De.substring(0, 1048576);
          var Et = new RegExp(v(Se) + "([^]*?)" + v(Se), "gm"), pt = (De = De.replace(Et, "")).split("\r"), It = De.split(`
`), Wt = 1 < It.length && It[0].length < pt[0].length;
          if (pt.length === 1 || Wt) return `
`;
          for (var mt = 0, _e = 0; _e < pt.length; _e++) pt[_e][0] === `
` && mt++;
          return mt >= pt.length / 2 ? `\r
` : "\r";
        }(J, Me)), O = !1, x.delimiter) $(x.delimiter) && (x.delimiter = x.delimiter(J), k.meta.delimiter = x.delimiter);
        else {
          var xe = function(De, Se, Et, pt, It) {
            var Wt, mt, _e, Le;
            It = It || [",", "	", "|", ";", l.RECORD_SEP, l.UNIT_SEP];
            for (var _n = 0; _n < It.length; _n++) {
              var we = It[_n], ar = 0, Ut = 0, Hn = 0;
              _e = void 0;
              for (var en = new w({ comments: pt, delimiter: we, newline: Se, preview: 10 }).parse(De), tn = 0; tn < en.data.length; tn++) if (Et && K(en.data[tn])) Hn++;
              else {
                var nn = en.data[tn].length;
                Ut += nn, _e !== void 0 ? 0 < nn && (ar += Math.abs(nn - _e), _e = nn) : _e = nn;
              }
              0 < en.data.length && (Ut /= en.data.length - Hn), (mt === void 0 || ar <= mt) && (Le === void 0 || Le < Ut) && 1.99 < Ut && (mt = ar, Wt = we, Le = Ut);
            }
            return { successful: !!(x.delimiter = Wt), bestDelimiter: Wt };
          }(J, x.newline, x.skipEmptyLines, x.comments, x.delimitersToGuess);
          xe.successful ? x.delimiter = xe.bestDelimiter : (O = !0, x.delimiter = l.DefaultDelimiter), k.meta.delimiter = x.delimiter;
        }
        var Je = q(x);
        return x.preview && x.header && Je.preview++, y = J, E = new w(Je), k = E.parse(y, se, ve), V(), I ? { meta: { paused: !0 } } : k || { meta: { paused: !1 } };
      }, this.paused = function() {
        return I;
      }, this.pause = function() {
        I = !0, E.abort(), y = $(x.chunk) ? "" : y.substring(E.getCharIndex());
      }, this.resume = function() {
        C.streamer._halted ? (I = !1, C.streamer.parseChunk(y, !0)) : setTimeout(C.resume, 3);
      }, this.aborted = function() {
        return X;
      }, this.abort = function() {
        X = !0, E.abort(), k.meta.aborted = !0, $(x.complete) && x.complete(k), y = "";
      };
    }
    function v(x) {
      return x.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    }
    function w(x) {
      var y, E = (x = x || {}).delimiter, O = x.newline, _ = x.comments, Q = x.step, R = x.preview, D = x.fastMode, C = y = x.quoteChar === void 0 || x.quoteChar === null ? '"' : x.quoteChar;
      if (x.escapeChar !== void 0 && (C = x.escapeChar), (typeof E != "string" || -1 < l.BAD_DELIMITERS.indexOf(E)) && (E = ","), _ === E) throw new Error("Comment character same as delimiter");
      _ === !0 ? _ = "#" : (typeof _ != "string" || -1 < l.BAD_DELIMITERS.indexOf(_)) && (_ = !1), O !== `
` && O !== "\r" && O !== `\r
` && (O = `
`);
      var M = 0, N = !1;
      this.parse = function(I, X, te) {
        if (typeof I != "string") throw new Error("Input must be a string");
        var k = I.length, Z = E.length, K = O.length, V = _.length, re = $(Q), ae = [], me = [], J = [], se = M = 0;
        if (!I) return gt();
        if (x.header && !X) {
          var ve = I.split(O)[0].split(E), Me = [], xe = {}, Je = !1;
          for (var De in ve) {
            var Se = ve[De];
            $(x.transformHeader) && (Se = x.transformHeader(Se, De));
            var Et = Se, pt = xe[Se] || 0;
            for (0 < pt && (Je = !0, Et = Se + "_" + pt), xe[Se] = pt + 1; Me.includes(Et); ) Et = Et + "_" + pt;
            Me.push(Et);
          }
          if (Je) {
            var It = I.split(O);
            It[0] = Me.join(E), I = It.join(O);
          }
        }
        if (D || D !== !1 && I.indexOf(y) === -1) {
          for (var Wt = I.split(O), mt = 0; mt < Wt.length; mt++) {
            if (J = Wt[mt], M += J.length, mt !== Wt.length - 1) M += O.length;
            else if (te) return gt();
            if (!_ || J.substring(0, V) !== _) {
              if (re) {
                if (ae = [], Hn(J.split(E)), $s(), N) return gt();
              } else Hn(J.split(E));
              if (R && R <= mt) return ae = ae.slice(0, R), gt(!0);
            }
          }
          return gt();
        }
        for (var _e = I.indexOf(E, M), Le = I.indexOf(O, M), _n = new RegExp(v(C) + v(y), "g"), we = I.indexOf(y, M); ; ) if (I[M] !== y) if (_ && J.length === 0 && I.substring(M, M + V) === _) {
          if (Le === -1) return gt();
          M = Le + K, Le = I.indexOf(O, M), _e = I.indexOf(E, M);
        } else if (_e !== -1 && (_e < Le || Le === -1)) J.push(I.substring(M, _e)), M = _e + Z, _e = I.indexOf(E, M);
        else {
          if (Le === -1) break;
          if (J.push(I.substring(M, Le)), nn(Le + K), re && ($s(), N)) return gt();
          if (R && ae.length >= R) return gt(!0);
        }
        else for (we = M, M++; ; ) {
          if ((we = I.indexOf(y, we + 1)) === -1) return te || me.push({ type: "Quotes", code: "MissingQuotes", message: "Quoted field unterminated", row: ae.length, index: M }), tn();
          if (we === k - 1) return tn(I.substring(M, we).replace(_n, y));
          if (y !== C || I[we + 1] !== C) {
            if (y === C || we === 0 || I[we - 1] !== C) {
              _e !== -1 && _e < we + 1 && (_e = I.indexOf(E, we + 1)), Le !== -1 && Le < we + 1 && (Le = I.indexOf(O, we + 1));
              var ar = en(Le === -1 ? _e : Math.min(_e, Le));
              if (I.substr(we + 1 + ar, Z) === E) {
                J.push(I.substring(M, we).replace(_n, y)), I[M = we + 1 + ar + Z] !== y && (we = I.indexOf(y, M)), _e = I.indexOf(E, M), Le = I.indexOf(O, M);
                break;
              }
              var Ut = en(Le);
              if (I.substring(we + 1 + Ut, we + 1 + Ut + K) === O) {
                if (J.push(I.substring(M, we).replace(_n, y)), nn(we + 1 + Ut + K), _e = I.indexOf(E, M), we = I.indexOf(y, M), re && ($s(), N)) return gt();
                if (R && ae.length >= R) return gt(!0);
                break;
              }
              me.push({ type: "Quotes", code: "InvalidQuotes", message: "Trailing quote on quoted field is malformed", row: ae.length, index: M }), we++;
            }
          } else we++;
        }
        return tn();
        function Hn(yt) {
          ae.push(yt), se = M;
        }
        function en(yt) {
          var Nl = 0;
          if (yt !== -1) {
            var Eo = I.substring(we + 1, yt);
            Eo && Eo.trim() === "" && (Nl = Eo.length);
          }
          return Nl;
        }
        function tn(yt) {
          return te || (yt === void 0 && (yt = I.substring(M)), J.push(yt), M = k, Hn(J), re && $s()), gt();
        }
        function nn(yt) {
          M = yt, Hn(J), J = [], Le = I.indexOf(O, M);
        }
        function gt(yt) {
          return { data: ae, errors: me, meta: { delimiter: E, linebreak: O, aborted: N, truncated: !!yt, cursor: se + (X || 0) } };
        }
        function $s() {
          Q(gt()), ae = [], me = [];
        }
      }, this.abort = function() {
        N = !0;
      }, this.getCharIndex = function() {
        return M;
      };
    }
    function H(x) {
      var y = x.data, E = o[y.workerId], O = !1;
      if (y.error) E.userError(y.error, y.file);
      else if (y.results && y.results.data) {
        var _ = { abort: function() {
          O = !0, z(y.workerId, { data: [], errors: [], meta: { aborted: !0 } });
        }, pause: F, resume: F };
        if ($(E.userStep)) {
          for (var Q = 0; Q < y.results.data.length && (E.userStep({ data: y.results.data[Q], errors: y.results.errors, meta: y.results.meta }, _), !O); Q++) ;
          delete y.results;
        } else $(E.userChunk) && (E.userChunk(y.results, _, y.file), delete y.results);
      }
      y.finished && !O && z(y.workerId, y.results);
    }
    function z(x, y) {
      var E = o[x];
      $(E.userComplete) && E.userComplete(y), E.terminate(), delete o[x];
    }
    function F() {
      throw new Error("Not implemented.");
    }
    function q(x) {
      if (typeof x != "object" || x === null) return x;
      var y = Array.isArray(x) ? [] : {};
      for (var E in x) y[E] = q(x[E]);
      return y;
    }
    function A(x, y) {
      return function() {
        x.apply(y, arguments);
      };
    }
    function $(x) {
      return typeof x == "function";
    }
    return i && (r.onmessage = function(x) {
      var y = x.data;
      if (l.WORKER_ID === void 0 && y && (l.WORKER_ID = y.workerId), typeof y.input == "string") r.postMessage({ workerId: l.WORKER_ID, results: l.parse(y.input, y.config), finished: !0 });
      else if (r.File && y.input instanceof File || y.input instanceof Object) {
        var E = l.parse(y.input, y.config);
        E && r.postMessage({ workerId: l.WORKER_ID, results: E, finished: !0 });
      }
    }), (f.prototype = Object.create(d.prototype)).constructor = f, (h.prototype = Object.create(d.prototype)).constructor = h, (p.prototype = Object.create(p.prototype)).constructor = p, (m.prototype = Object.create(d.prototype)).constructor = m, l;
  });
})(t6);
var n6 = { exports: {} };
(function(n, e) {
  (function(t, r) {
    n.exports = r();
  })(gr, function() {
    var t = 1e3, r = 6e4, s = 36e5, i = "millisecond", o = "second", a = "minute", l = "hour", c = "day", d = "week", f = "month", h = "quarter", p = "year", m = "date", b = "Invalid Date", v = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, w = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, H = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), ordinal: function(R) {
      var D = ["th", "st", "nd", "rd"], C = R % 100;
      return "[" + R + (D[(C - 20) % 10] || D[C] || D[0]) + "]";
    } }, z = function(R, D, C) {
      var M = String(R);
      return !M || M.length >= D ? R : "" + Array(D + 1 - M.length).join(C) + R;
    }, F = { s: z, z: function(R) {
      var D = -R.utcOffset(), C = Math.abs(D), M = Math.floor(C / 60), N = C % 60;
      return (D <= 0 ? "+" : "-") + z(M, 2, "0") + ":" + z(N, 2, "0");
    }, m: function R(D, C) {
      if (D.date() < C.date()) return -R(C, D);
      var M = 12 * (C.year() - D.year()) + (C.month() - D.month()), N = D.clone().add(M, f), I = C - N < 0, X = D.clone().add(M + (I ? -1 : 1), f);
      return +(-(M + (C - N) / (I ? N - X : X - N)) || 0);
    }, a: function(R) {
      return R < 0 ? Math.ceil(R) || 0 : Math.floor(R);
    }, p: function(R) {
      return { M: f, y: p, w: d, d: c, D: m, h: l, m: a, s: o, ms: i, Q: h }[R] || String(R || "").toLowerCase().replace(/s$/, "");
    }, u: function(R) {
      return R === void 0;
    } }, q = "en", A = {};
    A[q] = H;
    var $ = "$isDayjsObject", x = function(R) {
      return R instanceof _ || !(!R || !R[$]);
    }, y = function R(D, C, M) {
      var N;
      if (!D) return q;
      if (typeof D == "string") {
        var I = D.toLowerCase();
        A[I] && (N = I), C && (A[I] = C, N = I);
        var X = D.split("-");
        if (!N && X.length > 1) return R(X[0]);
      } else {
        var te = D.name;
        A[te] = D, N = te;
      }
      return !M && N && (q = N), N || !M && q;
    }, E = function(R, D) {
      if (x(R)) return R.clone();
      var C = typeof D == "object" ? D : {};
      return C.date = R, C.args = arguments, new _(C);
    }, O = F;
    O.l = y, O.i = x, O.w = function(R, D) {
      return E(R, { locale: D.$L, utc: D.$u, x: D.$x, $offset: D.$offset });
    };
    var _ = function() {
      function R(C) {
        this.$L = y(C.locale, null, !0), this.parse(C), this.$x = this.$x || C.x || {}, this[$] = !0;
      }
      var D = R.prototype;
      return D.parse = function(C) {
        this.$d = function(M) {
          var N = M.date, I = M.utc;
          if (N === null) return /* @__PURE__ */ new Date(NaN);
          if (O.u(N)) return /* @__PURE__ */ new Date();
          if (N instanceof Date) return new Date(N);
          if (typeof N == "string" && !/Z$/i.test(N)) {
            var X = N.match(v);
            if (X) {
              var te = X[2] - 1 || 0, k = (X[7] || "0").substring(0, 3);
              return I ? new Date(Date.UTC(X[1], te, X[3] || 1, X[4] || 0, X[5] || 0, X[6] || 0, k)) : new Date(X[1], te, X[3] || 1, X[4] || 0, X[5] || 0, X[6] || 0, k);
            }
          }
          return new Date(N);
        }(C), this.init();
      }, D.init = function() {
        var C = this.$d;
        this.$y = C.getFullYear(), this.$M = C.getMonth(), this.$D = C.getDate(), this.$W = C.getDay(), this.$H = C.getHours(), this.$m = C.getMinutes(), this.$s = C.getSeconds(), this.$ms = C.getMilliseconds();
      }, D.$utils = function() {
        return O;
      }, D.isValid = function() {
        return this.$d.toString() !== b;
      }, D.isSame = function(C, M) {
        var N = E(C);
        return this.startOf(M) <= N && N <= this.endOf(M);
      }, D.isAfter = function(C, M) {
        return E(C) < this.startOf(M);
      }, D.isBefore = function(C, M) {
        return this.endOf(M) < E(C);
      }, D.$g = function(C, M, N) {
        return O.u(C) ? this[M] : this.set(N, C);
      }, D.unix = function() {
        return Math.floor(this.valueOf() / 1e3);
      }, D.valueOf = function() {
        return this.$d.getTime();
      }, D.startOf = function(C, M) {
        var N = this, I = !!O.u(M) || M, X = O.p(C), te = function(J, se) {
          var ve = O.w(N.$u ? Date.UTC(N.$y, se, J) : new Date(N.$y, se, J), N);
          return I ? ve : ve.endOf(c);
        }, k = function(J, se) {
          return O.w(N.toDate()[J].apply(N.toDate("s"), (I ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(se)), N);
        }, Z = this.$W, K = this.$M, V = this.$D, re = "set" + (this.$u ? "UTC" : "");
        switch (X) {
          case p:
            return I ? te(1, 0) : te(31, 11);
          case f:
            return I ? te(1, K) : te(0, K + 1);
          case d:
            var ae = this.$locale().weekStart || 0, me = (Z < ae ? Z + 7 : Z) - ae;
            return te(I ? V - me : V + (6 - me), K);
          case c:
          case m:
            return k(re + "Hours", 0);
          case l:
            return k(re + "Minutes", 1);
          case a:
            return k(re + "Seconds", 2);
          case o:
            return k(re + "Milliseconds", 3);
          default:
            return this.clone();
        }
      }, D.endOf = function(C) {
        return this.startOf(C, !1);
      }, D.$set = function(C, M) {
        var N, I = O.p(C), X = "set" + (this.$u ? "UTC" : ""), te = (N = {}, N[c] = X + "Date", N[m] = X + "Date", N[f] = X + "Month", N[p] = X + "FullYear", N[l] = X + "Hours", N[a] = X + "Minutes", N[o] = X + "Seconds", N[i] = X + "Milliseconds", N)[I], k = I === c ? this.$D + (M - this.$W) : M;
        if (I === f || I === p) {
          var Z = this.clone().set(m, 1);
          Z.$d[te](k), Z.init(), this.$d = Z.set(m, Math.min(this.$D, Z.daysInMonth())).$d;
        } else te && this.$d[te](k);
        return this.init(), this;
      }, D.set = function(C, M) {
        return this.clone().$set(C, M);
      }, D.get = function(C) {
        return this[O.p(C)]();
      }, D.add = function(C, M) {
        var N, I = this;
        C = Number(C);
        var X = O.p(M), te = function(K) {
          var V = E(I);
          return O.w(V.date(V.date() + Math.round(K * C)), I);
        };
        if (X === f) return this.set(f, this.$M + C);
        if (X === p) return this.set(p, this.$y + C);
        if (X === c) return te(1);
        if (X === d) return te(7);
        var k = (N = {}, N[a] = r, N[l] = s, N[o] = t, N)[X] || 1, Z = this.$d.getTime() + C * k;
        return O.w(Z, this);
      }, D.subtract = function(C, M) {
        return this.add(-1 * C, M);
      }, D.format = function(C) {
        var M = this, N = this.$locale();
        if (!this.isValid()) return N.invalidDate || b;
        var I = C || "YYYY-MM-DDTHH:mm:ssZ", X = O.z(this), te = this.$H, k = this.$m, Z = this.$M, K = N.weekdays, V = N.months, re = N.meridiem, ae = function(se, ve, Me, xe) {
          return se && (se[ve] || se(M, I)) || Me[ve].slice(0, xe);
        }, me = function(se) {
          return O.s(te % 12 || 12, se, "0");
        }, J = re || function(se, ve, Me) {
          var xe = se < 12 ? "AM" : "PM";
          return Me ? xe.toLowerCase() : xe;
        };
        return I.replace(w, function(se, ve) {
          return ve || function(Me) {
            switch (Me) {
              case "YY":
                return String(M.$y).slice(-2);
              case "YYYY":
                return O.s(M.$y, 4, "0");
              case "M":
                return Z + 1;
              case "MM":
                return O.s(Z + 1, 2, "0");
              case "MMM":
                return ae(N.monthsShort, Z, V, 3);
              case "MMMM":
                return ae(V, Z);
              case "D":
                return M.$D;
              case "DD":
                return O.s(M.$D, 2, "0");
              case "d":
                return String(M.$W);
              case "dd":
                return ae(N.weekdaysMin, M.$W, K, 2);
              case "ddd":
                return ae(N.weekdaysShort, M.$W, K, 3);
              case "dddd":
                return K[M.$W];
              case "H":
                return String(te);
              case "HH":
                return O.s(te, 2, "0");
              case "h":
                return me(1);
              case "hh":
                return me(2);
              case "a":
                return J(te, k, !0);
              case "A":
                return J(te, k, !1);
              case "m":
                return String(k);
              case "mm":
                return O.s(k, 2, "0");
              case "s":
                return String(M.$s);
              case "ss":
                return O.s(M.$s, 2, "0");
              case "SSS":
                return O.s(M.$ms, 3, "0");
              case "Z":
                return X;
            }
            return null;
          }(se) || X.replace(":", "");
        });
      }, D.utcOffset = function() {
        return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
      }, D.diff = function(C, M, N) {
        var I, X = this, te = O.p(M), k = E(C), Z = (k.utcOffset() - this.utcOffset()) * r, K = this - k, V = function() {
          return O.m(X, k);
        };
        switch (te) {
          case p:
            I = V() / 12;
            break;
          case f:
            I = V();
            break;
          case h:
            I = V() / 3;
            break;
          case d:
            I = (K - Z) / 6048e5;
            break;
          case c:
            I = (K - Z) / 864e5;
            break;
          case l:
            I = K / s;
            break;
          case a:
            I = K / r;
            break;
          case o:
            I = K / t;
            break;
          default:
            I = K;
        }
        return N ? I : O.a(I);
      }, D.daysInMonth = function() {
        return this.endOf(f).$D;
      }, D.$locale = function() {
        return A[this.$L];
      }, D.locale = function(C, M) {
        if (!C) return this.$L;
        var N = this.clone(), I = y(C, M, !0);
        return I && (N.$L = I), N;
      }, D.clone = function() {
        return O.w(this.$d, this);
      }, D.toDate = function() {
        return new Date(this.valueOf());
      }, D.toJSON = function() {
        return this.isValid() ? this.toISOString() : null;
      }, D.toISOString = function() {
        return this.$d.toISOString();
      }, D.toString = function() {
        return this.$d.toUTCString();
      }, R;
    }(), Q = _.prototype;
    return E.prototype = Q, [["$ms", i], ["$s", o], ["$m", a], ["$H", l], ["$W", c], ["$M", f], ["$y", p], ["$D", m]].forEach(function(R) {
      Q[R[1]] = function(D) {
        return this.$g(D, R[0], R[1]);
      };
    }), E.extend = function(R, D) {
      return R.$i || (R(D, _, E), R.$i = !0), E;
    }, E.locale = y, E.isDayjs = x, E.unix = function(R) {
      return E(1e3 * R);
    }, E.en = A[q], E.Ls = A, E.p = {}, E;
  });
})(n6);
function mf(n) {
  var e, t, r = "";
  if (typeof n == "string" || typeof n == "number") r += n;
  else if (typeof n == "object") if (Array.isArray(n)) {
    var s = n.length;
    for (e = 0; e < s; e++) n[e] && (t = mf(n[e])) && (r && (r += " "), r += t);
  } else for (t in n) n[t] && (r && (r += " "), r += t);
  return r;
}
function r6() {
  for (var n, e, t = 0, r = "", s = arguments.length; t < s; t++) (n = arguments[t]) && (e = mf(n)) && (r && (r += " "), r += e);
  return r;
}
const Ya = "-", s6 = (n) => {
  const e = o6(n), {
    conflictingClassGroups: t,
    conflictingClassGroupModifiers: r
  } = n;
  return {
    getClassGroupId: (o) => {
      const a = o.split(Ya);
      return a[0] === "" && a.length !== 1 && a.shift(), gf(a, e) || i6(o);
    },
    getConflictingClassGroupIds: (o, a) => {
      const l = t[o] || [];
      return a && r[o] ? [...l, ...r[o]] : l;
    }
  };
}, gf = (n, e) => {
  var o;
  if (n.length === 0)
    return e.classGroupId;
  const t = n[0], r = e.nextPart.get(t), s = r ? gf(n.slice(1), r) : void 0;
  if (s)
    return s;
  if (e.validators.length === 0)
    return;
  const i = n.join(Ya);
  return (o = e.validators.find(({
    validator: a
  }) => a(i))) == null ? void 0 : o.classGroupId;
}, Uc = /^\[(.+)\]$/, i6 = (n) => {
  if (Uc.test(n)) {
    const e = Uc.exec(n)[1], t = e == null ? void 0 : e.substring(0, e.indexOf(":"));
    if (t)
      return "arbitrary.." + t;
  }
}, o6 = (n) => {
  const {
    theme: e,
    prefix: t
  } = n, r = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  return l6(Object.entries(n.classGroups), t).forEach(([i, o]) => {
    aa(o, r, i, e);
  }), r;
}, aa = (n, e, t, r) => {
  n.forEach((s) => {
    if (typeof s == "string") {
      const i = s === "" ? e : Kc(e, s);
      i.classGroupId = t;
      return;
    }
    if (typeof s == "function") {
      if (a6(s)) {
        aa(s(r), e, t, r);
        return;
      }
      e.validators.push({
        validator: s,
        classGroupId: t
      });
      return;
    }
    Object.entries(s).forEach(([i, o]) => {
      aa(o, Kc(e, i), t, r);
    });
  });
}, Kc = (n, e) => {
  let t = n;
  return e.split(Ya).forEach((r) => {
    t.nextPart.has(r) || t.nextPart.set(r, {
      nextPart: /* @__PURE__ */ new Map(),
      validators: []
    }), t = t.nextPart.get(r);
  }), t;
}, a6 = (n) => n.isThemeGetter, l6 = (n, e) => e ? n.map(([t, r]) => {
  const s = r.map((i) => typeof i == "string" ? e + i : typeof i == "object" ? Object.fromEntries(Object.entries(i).map(([o, a]) => [e + o, a])) : i);
  return [t, s];
}) : n, c6 = (n) => {
  if (n < 1)
    return {
      get: () => {
      },
      set: () => {
      }
    };
  let e = 0, t = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map();
  const s = (i, o) => {
    t.set(i, o), e++, e > n && (e = 0, r = t, t = /* @__PURE__ */ new Map());
  };
  return {
    get(i) {
      let o = t.get(i);
      if (o !== void 0)
        return o;
      if ((o = r.get(i)) !== void 0)
        return s(i, o), o;
    },
    set(i, o) {
      t.has(i) ? t.set(i, o) : s(i, o);
    }
  };
}, yf = "!", d6 = (n) => {
  const {
    separator: e,
    experimentalParseClassName: t
  } = n, r = e.length === 1, s = e[0], i = e.length, o = (a) => {
    const l = [];
    let c = 0, d = 0, f;
    for (let v = 0; v < a.length; v++) {
      let w = a[v];
      if (c === 0) {
        if (w === s && (r || a.slice(v, v + i) === e)) {
          l.push(a.slice(d, v)), d = v + i;
          continue;
        }
        if (w === "/") {
          f = v;
          continue;
        }
      }
      w === "[" ? c++ : w === "]" && c--;
    }
    const h = l.length === 0 ? a : a.substring(d), p = h.startsWith(yf), m = p ? h.substring(1) : h, b = f && f > d ? f - d : void 0;
    return {
      modifiers: l,
      hasImportantModifier: p,
      baseClassName: m,
      maybePostfixModifierPosition: b
    };
  };
  return t ? (a) => t({
    className: a,
    parseClassName: o
  }) : o;
}, u6 = (n) => {
  if (n.length <= 1)
    return n;
  const e = [];
  let t = [];
  return n.forEach((r) => {
    r[0] === "[" ? (e.push(...t.sort(), r), t = []) : t.push(r);
  }), e.push(...t.sort()), e;
}, f6 = (n) => ({
  cache: c6(n.cacheSize),
  parseClassName: d6(n),
  ...s6(n)
}), h6 = /\s+/, p6 = (n, e) => {
  const {
    parseClassName: t,
    getClassGroupId: r,
    getConflictingClassGroupIds: s
  } = e, i = [], o = n.trim().split(h6);
  let a = "";
  for (let l = o.length - 1; l >= 0; l -= 1) {
    const c = o[l], {
      modifiers: d,
      hasImportantModifier: f,
      baseClassName: h,
      maybePostfixModifierPosition: p
    } = t(c);
    let m = !!p, b = r(m ? h.substring(0, p) : h);
    if (!b) {
      if (!m) {
        a = c + (a.length > 0 ? " " + a : a);
        continue;
      }
      if (b = r(h), !b) {
        a = c + (a.length > 0 ? " " + a : a);
        continue;
      }
      m = !1;
    }
    const v = u6(d).join(":"), w = f ? v + yf : v, H = w + b;
    if (i.includes(H))
      continue;
    i.push(H);
    const z = s(b, m);
    for (let F = 0; F < z.length; ++F) {
      const q = z[F];
      i.push(w + q);
    }
    a = c + (a.length > 0 ? " " + a : a);
  }
  return a;
};
function m6() {
  let n = 0, e, t, r = "";
  for (; n < arguments.length; )
    (e = arguments[n++]) && (t = bf(e)) && (r && (r += " "), r += t);
  return r;
}
const bf = (n) => {
  if (typeof n == "string")
    return n;
  let e, t = "";
  for (let r = 0; r < n.length; r++)
    n[r] && (e = bf(n[r])) && (t && (t += " "), t += e);
  return t;
};
function g6(n, ...e) {
  let t, r, s, i = o;
  function o(l) {
    const c = e.reduce((d, f) => f(d), n());
    return t = f6(c), r = t.cache.get, s = t.cache.set, i = a, a(l);
  }
  function a(l) {
    const c = r(l);
    if (c)
      return c;
    const d = p6(l, t);
    return s(l, d), d;
  }
  return function() {
    return i(m6.apply(null, arguments));
  };
}
const Ae = (n) => {
  const e = (t) => t[n] || [];
  return e.isThemeGetter = !0, e;
}, vf = /^\[(?:([a-z-]+):)?(.+)\]$/i, y6 = /^\d+\/\d+$/, b6 = /* @__PURE__ */ new Set(["px", "full", "screen"]), v6 = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/, x6 = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/, k6 = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/, w6 = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/, E6 = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/, Kt = (n) => xr(n) || b6.has(n) || y6.test(n), rn = (n) => Pr(n, "length", _6), xr = (n) => !!n && !Number.isNaN(Number(n)), So = (n) => Pr(n, "number", xr), Zr = (n) => !!n && Number.isInteger(Number(n)), M6 = (n) => n.endsWith("%") && xr(n.slice(0, -1)), de = (n) => vf.test(n), sn = (n) => v6.test(n), S6 = /* @__PURE__ */ new Set(["length", "size", "percentage"]), A6 = (n) => Pr(n, S6, xf), C6 = (n) => Pr(n, "position", xf), O6 = /* @__PURE__ */ new Set(["image", "url"]), T6 = (n) => Pr(n, O6, I6), N6 = (n) => Pr(n, "", H6), Vr = () => !0, Pr = (n, e, t) => {
  const r = vf.exec(n);
  return r ? r[1] ? typeof e == "string" ? r[1] === e : e.has(r[1]) : t(r[2]) : !1;
}, _6 = (n) => (
  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
  x6.test(n) && !k6.test(n)
), xf = () => !1, H6 = (n) => w6.test(n), I6 = (n) => E6.test(n), R6 = () => {
  const n = Ae("colors"), e = Ae("spacing"), t = Ae("blur"), r = Ae("brightness"), s = Ae("borderColor"), i = Ae("borderRadius"), o = Ae("borderSpacing"), a = Ae("borderWidth"), l = Ae("contrast"), c = Ae("grayscale"), d = Ae("hueRotate"), f = Ae("invert"), h = Ae("gap"), p = Ae("gradientColorStops"), m = Ae("gradientColorStopPositions"), b = Ae("inset"), v = Ae("margin"), w = Ae("opacity"), H = Ae("padding"), z = Ae("saturate"), F = Ae("scale"), q = Ae("sepia"), A = Ae("skew"), $ = Ae("space"), x = Ae("translate"), y = () => ["auto", "contain", "none"], E = () => ["auto", "hidden", "clip", "visible", "scroll"], O = () => ["auto", de, e], _ = () => [de, e], Q = () => ["", Kt, rn], R = () => ["auto", xr, de], D = () => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"], C = () => ["solid", "dashed", "dotted", "double", "none"], M = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"], N = () => ["start", "end", "center", "between", "around", "evenly", "stretch"], I = () => ["", "0", de], X = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"], te = () => [xr, de];
  return {
    cacheSize: 500,
    separator: ":",
    theme: {
      colors: [Vr],
      spacing: [Kt, rn],
      blur: ["none", "", sn, de],
      brightness: te(),
      borderColor: [n],
      borderRadius: ["none", "", "full", sn, de],
      borderSpacing: _(),
      borderWidth: Q(),
      contrast: te(),
      grayscale: I(),
      hueRotate: te(),
      invert: I(),
      gap: _(),
      gradientColorStops: [n],
      gradientColorStopPositions: [M6, rn],
      inset: O(),
      margin: O(),
      opacity: te(),
      padding: _(),
      saturate: te(),
      scale: te(),
      sepia: I(),
      skew: te(),
      space: _(),
      translate: _()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", de]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [sn]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": X()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": X()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ["right", "left", "none", "start", "end"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none", "start", "end"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [...D(), de]
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: E()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": E()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": E()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: y()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": y()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": y()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [b]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [b]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [b]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [b]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [b]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [b]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [b]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [b]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [b]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", Zr, de]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: O()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", de]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: I()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: I()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", Zr, de]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [Vr]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", Zr, de]
        }, de]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": R()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": R()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [Vr]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [Zr, de]
        }, de]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": R()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": R()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", de]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", de]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [h]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [h]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [h]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal", ...N()]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal", ...N(), "baseline"]
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [...N(), "baseline"]
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [H]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [H]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [H]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [H]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [H]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [H]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [H]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [H]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [H]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [v]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [v]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [v]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [v]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [v]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [v]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [v]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [v]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [v]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [$]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [$]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", de, e]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": [de, e, "min", "max", "fit"]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": [de, e, "none", "full", "min", "max", "fit", "prose", {
          screen: [sn]
        }, sn]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [de, e, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": [de, e, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [de, e, "min", "max", "fit", "svh", "lvh", "dvh"]
      }],
      /**
       * Size
       * @see https://tailwindcss.com/docs/size
       */
      size: [{
        size: [de, e, "auto", "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", sn, rn]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", So]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [Vr]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", de]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", xr, So]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", Kt, de]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", de]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", de]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [n]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [w]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [n]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [w]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [...C(), "wavy"]
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", Kt, rn]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", Kt, de]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [n]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [{
        text: ["wrap", "nowrap", "balance", "pretty"]
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: _()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", de]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", de]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [w]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [...D(), C6]
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", A6]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, T6]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [n]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [m]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [m]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [m]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [p]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [p]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [p]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [i]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [i]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [i]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [i]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [i]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [i]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [i]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [i]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [i]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [i]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [i]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [i]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [i]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [i]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [i]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [a]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [a]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [a]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [a]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [a]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [a]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [a]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [a]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [a]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [w]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [...C(), "hidden"]
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [a]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [a]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [w]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: C()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [s]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [s]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [s]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [s]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [s]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [s]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [s]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [s]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: ["", ...C()]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [Kt, de]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [Kt, rn]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [n]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: Q()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [n]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [w]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [Kt, rn]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [n]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", sn, N6]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [Vr]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [w]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": [...M(), "plus-lighter", "plus-darker"]
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": M()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [t]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [r]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [l]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", sn, de]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [c]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [d]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [f]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [z]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [q]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [t]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [r]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [l]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [c]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [d]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [f]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [w]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [z]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [q]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [o]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [o]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [o]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", de]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: te()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", de]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: te()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", de]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [F]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [F]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [F]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [Zr, de]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [x]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [x]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [A]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [A]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", de]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", n]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ["none", "auto"]
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", de]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [n]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": _()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": _()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": _()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": _()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": _()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": _()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": _()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": _()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": _()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": _()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": _()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": _()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": _()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": _()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": _()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": _()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": _()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": _()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "manipulation"]
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [{
        "touch-pan": ["x", "left", "right"]
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [{
        "touch-pan": ["y", "up", "down"]
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", de]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [n, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [Kt, rn, So]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [n, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [{
        "forced-color-adjust": ["auto", "none"]
      }]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
}, D6 = /* @__PURE__ */ g6(R6), T = (...n) => D6(r6(n)), GE = qn.Root, L6 = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(qn.Item, { ref: t, className: T("border-b", n), ...e }));
L6.displayName = "AccordionItem";
const P6 = S(({ className: n, children: e, ...t }, r) => /* @__PURE__ */ g(qn.Header, { className: "flex", children: /* @__PURE__ */ ge(
  qn.Trigger,
  {
    ref: r,
    className: T(
      "flex flex-1 items-center justify-between py-4 font-medium leading-none outline-none transition-all hover:underline focus-visible:bg-secondary-accent [&[data-state=open]>svg]:rotate-180",
      n
    ),
    ...t,
    children: [
      e,
      /* @__PURE__ */ g(Ja, { className: "size-4 shrink-0 transition-transform duration-200" })
    ]
  }
) }));
P6.displayName = qn.Trigger.displayName;
const $6 = S(({ className: n, children: e, ...t }, r) => /* @__PURE__ */ g(
  qn.Content,
  {
    ref: r,
    className: T(
      "overflow-hidden text-sm leading-relaxed transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down",
      n
    ),
    ...t,
    children: /* @__PURE__ */ g("div", { className: "pb-4 pt-0", children: e })
  }
));
$6.displayName = qn.Content.displayName;
function kf(n) {
  var e, t, r = "";
  if (typeof n == "string" || typeof n == "number") r += n;
  else if (typeof n == "object") if (Array.isArray(n)) for (e = 0; e < n.length; e++) n[e] && (t = kf(n[e])) && (r && (r += " "), r += t);
  else for (e in n) n[e] && (r && (r += " "), r += e);
  return r;
}
function Z6() {
  for (var n, e, t = 0, r = ""; t < arguments.length; ) (n = arguments[t++]) && (e = kf(n)) && (r && (r += " "), r += e);
  return r;
}
const qc = (n) => typeof n == "boolean" ? "".concat(n) : n === 0 ? "0" : n, Jc = Z6, ir = (n, e) => (t) => {
  var r;
  if ((e == null ? void 0 : e.variants) == null) return Jc(n, t == null ? void 0 : t.class, t == null ? void 0 : t.className);
  const { variants: s, defaultVariants: i } = e, o = Object.keys(s).map((c) => {
    const d = t == null ? void 0 : t[c], f = i == null ? void 0 : i[c];
    if (d === null) return null;
    const h = qc(d) || qc(f);
    return s[c][h];
  }), a = t && Object.entries(t).reduce((c, d) => {
    let [f, h] = d;
    return h === void 0 || (c[f] = h), c;
  }, {}), l = e == null || (r = e.compoundVariants) === null || r === void 0 ? void 0 : r.reduce((c, d) => {
    let { class: f, className: h, ...p } = d;
    return Object.entries(p).every((m) => {
      let [b, v] = m;
      return Array.isArray(v) ? v.includes({
        ...i,
        ...a
      }[b]) : {
        ...i,
        ...a
      }[b] === v;
    }) ? [
      ...c,
      f,
      h
    ] : c;
  }, []);
  return Jc(n, o, l, t == null ? void 0 : t.class, t == null ? void 0 : t.className);
}, V6 = ir(
  "relative w-full rounded p-4 transition-colors [&>svg+div]:translate-y-[-4px] [&>svg]:absolute [&>svg]:left-3.5 [&>svg]:top-[18px] [&>svg~*]:pl-6",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground [&>svg]:text-foreground",
        primary: "bg-primary text-primary-foreground [&>svg]:text-primary-foreground",
        secondary: "bg-secondary text-secondary-foreground [&>svg]:text-secondary-foreground",
        error: "bg-error text-error-foreground [&>svg]:text-error-foreground",
        warning: "bg-warning text-warning-foreground [&>svg]:text-warning-foreground",
        info: "bg-info text-info-foreground [&>svg]:text-info-foreground",
        success: "bg-success text-success-foreground [&>svg]:text-success-foreground"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
), z6 = S(
  ({ className: n, variant: e, ...t }, r) => /* @__PURE__ */ g("div", { ref: r, role: "alert", className: T(V6({ variant: e }), n), ...t })
);
z6.displayName = "Alert";
const j6 = S(({ className: n, children: e, ...t }, r) => /* @__PURE__ */ g("h5", { ref: r, className: T("font-medium tracking-tight", n), ...t, children: e }));
j6.displayName = "AlertTitle";
const F6 = S(({ className: n, ...e }, t) => /* @__PURE__ */ g("div", { ref: t, className: T("pt-0.5 leading-normal", n), ...e }));
F6.displayName = "AlertDescription";
const Qa = ir(
  "inline-flex scale-100 items-center justify-center rounded-sm text-sm font-medium ring-offset-background transition-[transform,background-color] focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-primary focus-visible:ring-offset-2 active:scale-95 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        primary: "bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        error: "bg-error text-error-foreground hover:bg-error/80",
        warning: "bg-warning text-warning-foreground hover:bg-warning/80",
        info: "bg-info text-info-foreground hover:bg-info/80",
        success: "bg-success text-success-foreground hover:bg-success/80",
        outline: "border border-secondary bg-transparent hover:bg-secondary hover:text-secondary-foreground",
        ghost: "hover:bg-secondary hover:text-secondary-foreground",
        link: "text-primary underline-offset-4 hover:underline"
      },
      size: {
        sm: "h-8 px-4 text-xs",
        md: "h-9 px-5",
        lg: "h-10 px-6",
        icon: "size-9"
      }
    },
    compoundVariants: [
      { variant: "link", size: "sm", className: "h-auto px-0" },
      { variant: "link", size: "md", className: "h-auto px-0" },
      { variant: "link", size: "lg", className: "h-auto px-0" }
    ],
    defaultVariants: {
      variant: "primary",
      size: "md"
    }
  }
), YE = Xe.Root, QE = Xe.Trigger, wf = (n) => /* @__PURE__ */ g(Xe.Portal, { ...n });
wf.displayName = Xe.Portal.displayName;
const Ef = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  Xe.Overlay,
  {
    className: T(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      n
    ),
    ...e,
    ref: t
  }
));
Ef.displayName = Xe.Overlay.displayName;
const B6 = S(({ className: n, ...e }, t) => /* @__PURE__ */ ge(wf, { children: [
  /* @__PURE__ */ g(Ef, {}),
  /* @__PURE__ */ g(
    Xe.Content,
    {
      ref: t,
      className: T(
        "fixed left-1/2 top-1/2 z-50 grid w-full max-w-lg -translate-x-1/2 -translate-y-1/2 gap-4 rounded border bg-background p-6 duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] md:w-full",
        n
      ),
      ...e
    }
  )
] }));
B6.displayName = Xe.Content.displayName;
const W6 = ({
  className: n,
  ...e
}) => /* @__PURE__ */ g("div", { className: T("flex flex-col space-y-2 text-center sm:text-left", n), ...e });
W6.displayName = "AlertDialogHeader";
const U6 = ({
  className: n,
  ...e
}) => /* @__PURE__ */ g(
  "div",
  {
    className: T("mt-4 flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-4", n),
    ...e
  }
);
U6.displayName = "AlertDialogFooter";
const K6 = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  Xe.Title,
  {
    ref: t,
    className: T("text-base font-medium", n),
    ...e
  }
));
K6.displayName = Xe.Title.displayName;
const q6 = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  Xe.Description,
  {
    ref: t,
    className: T("text-sm leading-relaxed", n),
    ...e
  }
));
q6.displayName = Xe.Description.displayName;
const J6 = S(({ className: n, variant: e, ...t }, r) => /* @__PURE__ */ g(
  Xe.Action,
  {
    ref: r,
    className: T(Qa({ variant: e }), n),
    ...t
  }
));
J6.displayName = Xe.Action.displayName;
const G6 = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  Xe.Cancel,
  {
    ref: t,
    className: T(Qa({ variant: "outline" }), "mt-2 sm:mt-0", n),
    ...e
  }
));
G6.displayName = Xe.Cancel.displayName;
const XE = Gh.Root, Y6 = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  Lr.Root,
  {
    ref: t,
    className: T("relative flex size-10 shrink-0 overflow-hidden rounded-full", n),
    ...e
  }
));
Y6.displayName = Lr.Root.displayName;
const Q6 = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  Lr.Image,
  {
    ref: t,
    className: T("aspect-square size-full object-cover", n),
    ...e
  }
));
Q6.displayName = Lr.Image.displayName;
const X6 = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  Lr.Fallback,
  {
    ref: t,
    className: T(
      "flex size-full items-center justify-center rounded-full bg-secondary",
      n
    ),
    ...e
  }
));
X6.displayName = Lr.Fallback.displayName;
const ey = ir(
  "inline-flex items-center rounded-full border px-3 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
  {
    variants: {
      variant: {
        primary: "border-primary bg-primary text-primary-foreground",
        secondary: "border-secondary bg-secondary text-secondary-foreground",
        error: "border-error bg-error text-error-foreground",
        warning: "border-warning bg-warning text-warning-foreground",
        info: "border-info bg-info text-info-foreground",
        success: "border-success bg-success text-success-foreground"
      },
      outline: {
        true: "bg-transparent"
      }
    },
    compoundVariants: [
      { outline: !0, variant: "primary", className: "text-primary" },
      { outline: !0, variant: "secondary", className: "text-secondary" },
      { outline: !0, variant: "error", className: "text-error" },
      { outline: !0, variant: "warning", className: "text-warning" },
      { outline: !0, variant: "info", className: "text-info" },
      { outline: !0, variant: "success", className: "text-success" }
    ],
    defaultVariants: {
      variant: "primary",
      outline: !1
    }
  }
), eM = ({ className: n, variant: e, outline: t, ...r }) => /* @__PURE__ */ g("div", { className: T(ey({ variant: e, outline: t }), n), ...r }), si = S(
  ({ className: n, type: e, hasError: t = !1, ...r }, s) => /* @__PURE__ */ g(
    "input",
    {
      ref: s,
      type: e,
      autoComplete: "off",
      className: T(
        "flex h-9 w-full rounded border border-border bg-transparent px-3 py-0.5 !text-sm ring-0 ring-offset-transparent transition-colors [appearance:textfield] placeholder:opacity-80 hover:bg-secondary/20 focus:border-primary focus:bg-secondary/20 focus-visible:outline-none focus-visible:ring-0 disabled:cursor-not-allowed disabled:opacity-50 [&::-webkit-inner-spin-button]:appearance-none [&::-webkit-outer-spin-button]:appearance-none",
        "file:border-0 file:bg-transparent file:pt-1 file:text-sm file:font-medium file:text-primary",
        t ? "border-error" : "border-border",
        n
      ),
      ...r
    }
  )
);
si.displayName = "Input";
const tM = S(
  ({ value: n, onChange: e, setPendingKeyword: t, ...r }, s) => {
    const [i, o] = Hs(""), a = Jr(() => {
      const c = i.split(",").map((d) => d.trim()).filter(Boolean).filter((d) => !n.includes(d));
      e([.../* @__PURE__ */ new Set([...n, ...c])]), o("");
    }, [i, n, e]);
    return rs(() => {
      i.includes(",") && a();
    }, [i, a]), rs(() => {
      t && t(i);
    }, [i, t]), /* @__PURE__ */ g(
      si,
      {
        ...r,
        ref: s,
        value: i,
        onKeyDown: (c) => {
          c.key === "Enter" && (c.preventDefault(), c.stopPropagation(), a());
        },
        onChange: (c) => {
          o(c.target.value);
        }
      }
    );
  }
), Mt = S(
  ({ className: n, variant: e, size: t, asChild: r = !1, ...s }, i) => /* @__PURE__ */ g(
    r ? _u : "button",
    {
      ref: i,
      className: T(Qa({ variant: e, size: t, className: n })),
      ...s
    }
  )
);
Mt.displayName = "Button";
const ty = S(
  ({ className: n, ...e }, t) => /* @__PURE__ */ g(
    "div",
    {
      ref: t,
      className: T("flex flex-col space-y-3 rounded border bg-background p-6", n),
      ...e
    }
  )
);
ty.displayName = "Card";
const ny = S(
  ({ className: n, ...e }, t) => /* @__PURE__ */ g("div", { ref: t, className: T("flex flex-col space-y-1", n), ...e })
);
ny.displayName = "CardHeader";
const ry = S(
  ({ className: n, ...e }, t) => /* @__PURE__ */ g(
    "h3",
    {
      ref: t,
      className: T("font-semibold leading-normal tracking-tight", n),
      ...e,
      children: e.children
    }
  )
);
ry.displayName = "CardTitle";
const sy = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  "div",
  {
    ref: t,
    className: T("text-xs font-medium leading-relaxed opacity-80", n),
    ...e
  }
));
sy.displayName = "CardDescription";
const iy = S(
  ({ className: n, ...e }, t) => /* @__PURE__ */ g("div", { ref: t, className: n, ...e })
);
iy.displayName = "CardContent";
const oy = S(
  ({ className: n, ...e }, t) => /* @__PURE__ */ g("div", { ref: t, className: T("flex items-center", n), ...e })
);
oy.displayName = "CardFooter";
const ay = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  sa.Root,
  {
    ref: t,
    className: T(
      "peer size-4 shrink-0 rounded border border-primary focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-primary disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      n
    ),
    ...e,
    children: /* @__PURE__ */ g(sa.Indicator, { className: T("flex items-center justify-center text-current"), children: /* @__PURE__ */ g(sr, { size: 12, weight: "bold" }) })
  }
));
ay.displayName = sa.Root.displayName;
var Gc = 1, ly = 0.9, cy = 0.8, dy = 0.17, Ao = 0.1, Co = 0.999, uy = 0.9999, fy = 0.99, hy = /[\\\/_+.#"@\[\(\{&]/, py = /[\\\/_+.#"@\[\(\{&]/g, my = /[\s-]/, Mf = /[\s-]/g;
function la(n, e, t, r, s, i, o) {
  if (i === e.length) return s === n.length ? Gc : fy;
  var a = `${s},${i}`;
  if (o[a] !== void 0) return o[a];
  for (var l = r.charAt(i), c = t.indexOf(l, s), d = 0, f, h, p, m; c >= 0; ) f = la(n, e, t, r, c + 1, i + 1, o), f > d && (c === s ? f *= Gc : hy.test(n.charAt(c - 1)) ? (f *= cy, p = n.slice(s, c - 1).match(py), p && s > 0 && (f *= Math.pow(Co, p.length))) : my.test(n.charAt(c - 1)) ? (f *= ly, m = n.slice(s, c - 1).match(Mf), m && s > 0 && (f *= Math.pow(Co, m.length))) : (f *= dy, s > 0 && (f *= Math.pow(Co, c - s))), n.charAt(c) !== e.charAt(i) && (f *= uy)), (f < Ao && t.charAt(c - 1) === r.charAt(i + 1) || r.charAt(i + 1) === r.charAt(i) && t.charAt(c - 1) !== r.charAt(i)) && (h = la(n, e, t, r, c + 1, i + 2, o), h * Ao > f && (f = h * Ao)), f > d && (d = f), c = t.indexOf(l, c + 1);
  return o[a] = d, d;
}
function Yc(n) {
  return n.toLowerCase().replace(Mf, " ");
}
function gy(n, e, t) {
  return n = t && t.length > 0 ? `${n + " " + t.join(" ")}` : n, la(n, e, Yc(n), Yc(e), 0, 0, {});
}
var zr = '[cmdk-group=""]', Oo = '[cmdk-group-items=""]', yy = '[cmdk-group-heading=""]', Xa = '[cmdk-item=""]', Qc = `${Xa}:not([aria-disabled="true"])`, ca = "cmdk-item-select", In = "data-value", by = (n, e, t) => gy(n, e, t), Sf = G.createContext(void 0), Is = () => G.useContext(Sf), Af = G.createContext(void 0), el = () => G.useContext(Af), Cf = G.createContext(void 0), Of = G.forwardRef((n, e) => {
  let t = ur(() => {
    var k, Z;
    return { search: "", value: (Z = (k = n.value) != null ? k : n.defaultValue) != null ? Z : "", filtered: { count: 0, items: /* @__PURE__ */ new Map(), groups: /* @__PURE__ */ new Set() } };
  }), r = ur(() => /* @__PURE__ */ new Set()), s = ur(() => /* @__PURE__ */ new Map()), i = ur(() => /* @__PURE__ */ new Map()), o = ur(() => /* @__PURE__ */ new Set()), a = Tf(n), { label: l, children: c, value: d, onValueChange: f, filter: h, shouldFilter: p, loop: m, disablePointerSelection: b = !1, vimBindings: v = !0, ...w } = n, H = G.useId(), z = G.useId(), F = G.useId(), q = G.useRef(null), A = Ty();
  Jn(() => {
    if (d !== void 0) {
      let k = d.trim();
      t.current.value = k, $.emit();
    }
  }, [d]), Jn(() => {
    A(6, Q);
  }, []);
  let $ = G.useMemo(() => ({ subscribe: (k) => (o.current.add(k), () => o.current.delete(k)), snapshot: () => t.current, setState: (k, Z, K) => {
    var V, re, ae;
    if (!Object.is(t.current[k], Z)) {
      if (t.current[k] = Z, k === "search") _(), E(), A(1, O);
      else if (k === "value" && (K || A(5, Q), ((V = a.current) == null ? void 0 : V.value) !== void 0)) {
        let me = Z ?? "";
        (ae = (re = a.current).onValueChange) == null || ae.call(re, me);
        return;
      }
      $.emit();
    }
  }, emit: () => {
    o.current.forEach((k) => k());
  } }), []), x = G.useMemo(() => ({ value: (k, Z, K) => {
    var V;
    Z !== ((V = i.current.get(k)) == null ? void 0 : V.value) && (i.current.set(k, { value: Z, keywords: K }), t.current.filtered.items.set(k, y(Z, K)), A(2, () => {
      E(), $.emit();
    }));
  }, item: (k, Z) => (r.current.add(k), Z && (s.current.has(Z) ? s.current.get(Z).add(k) : s.current.set(Z, /* @__PURE__ */ new Set([k]))), A(3, () => {
    _(), E(), t.current.value || O(), $.emit();
  }), () => {
    i.current.delete(k), r.current.delete(k), t.current.filtered.items.delete(k);
    let K = R();
    A(4, () => {
      _(), (K == null ? void 0 : K.getAttribute("id")) === k && O(), $.emit();
    });
  }), group: (k) => (s.current.has(k) || s.current.set(k, /* @__PURE__ */ new Set()), () => {
    i.current.delete(k), s.current.delete(k);
  }), filter: () => a.current.shouldFilter, label: l || n["aria-label"], disablePointerSelection: b, listId: H, inputId: F, labelId: z, listInnerRef: q }), []);
  function y(k, Z) {
    var K, V;
    let re = (V = (K = a.current) == null ? void 0 : K.filter) != null ? V : by;
    return k ? re(k, t.current.search, Z) : 0;
  }
  function E() {
    if (!t.current.search || a.current.shouldFilter === !1) return;
    let k = t.current.filtered.items, Z = [];
    t.current.filtered.groups.forEach((V) => {
      let re = s.current.get(V), ae = 0;
      re.forEach((me) => {
        let J = k.get(me);
        ae = Math.max(J, ae);
      }), Z.push([V, ae]);
    });
    let K = q.current;
    D().sort((V, re) => {
      var ae, me;
      let J = V.getAttribute("id"), se = re.getAttribute("id");
      return ((ae = k.get(se)) != null ? ae : 0) - ((me = k.get(J)) != null ? me : 0);
    }).forEach((V) => {
      let re = V.closest(Oo);
      re ? re.appendChild(V.parentElement === re ? V : V.closest(`${Oo} > *`)) : K.appendChild(V.parentElement === K ? V : V.closest(`${Oo} > *`));
    }), Z.sort((V, re) => re[1] - V[1]).forEach((V) => {
      let re = q.current.querySelector(`${zr}[${In}="${encodeURIComponent(V[0])}"]`);
      re == null || re.parentElement.appendChild(re);
    });
  }
  function O() {
    let k = D().find((K) => K.getAttribute("aria-disabled") !== "true"), Z = k == null ? void 0 : k.getAttribute(In);
    $.setState("value", Z || void 0);
  }
  function _() {
    var k, Z, K, V;
    if (!t.current.search || a.current.shouldFilter === !1) {
      t.current.filtered.count = r.current.size;
      return;
    }
    t.current.filtered.groups = /* @__PURE__ */ new Set();
    let re = 0;
    for (let ae of r.current) {
      let me = (Z = (k = i.current.get(ae)) == null ? void 0 : k.value) != null ? Z : "", J = (V = (K = i.current.get(ae)) == null ? void 0 : K.keywords) != null ? V : [], se = y(me, J);
      t.current.filtered.items.set(ae, se), se > 0 && re++;
    }
    for (let [ae, me] of s.current) for (let J of me) if (t.current.filtered.items.get(J) > 0) {
      t.current.filtered.groups.add(ae);
      break;
    }
    t.current.filtered.count = re;
  }
  function Q() {
    var k, Z, K;
    let V = R();
    V && (((k = V.parentElement) == null ? void 0 : k.firstChild) === V && ((K = (Z = V.closest(zr)) == null ? void 0 : Z.querySelector(yy)) == null || K.scrollIntoView({ block: "nearest" })), V.scrollIntoView({ block: "nearest" }));
  }
  function R() {
    var k;
    return (k = q.current) == null ? void 0 : k.querySelector(`${Xa}[aria-selected="true"]`);
  }
  function D() {
    var k;
    return Array.from((k = q.current) == null ? void 0 : k.querySelectorAll(Qc));
  }
  function C(k) {
    let Z = D()[k];
    Z && $.setState("value", Z.getAttribute(In));
  }
  function M(k) {
    var Z;
    let K = R(), V = D(), re = V.findIndex((me) => me === K), ae = V[re + k];
    (Z = a.current) != null && Z.loop && (ae = re + k < 0 ? V[V.length - 1] : re + k === V.length ? V[0] : V[re + k]), ae && $.setState("value", ae.getAttribute(In));
  }
  function N(k) {
    let Z = R(), K = Z == null ? void 0 : Z.closest(zr), V;
    for (; K && !V; ) K = k > 0 ? Cy(K, zr) : Oy(K, zr), V = K == null ? void 0 : K.querySelector(Qc);
    V ? $.setState("value", V.getAttribute(In)) : M(k);
  }
  let I = () => C(D().length - 1), X = (k) => {
    k.preventDefault(), k.metaKey ? I() : k.altKey ? N(1) : M(1);
  }, te = (k) => {
    k.preventDefault(), k.metaKey ? C(0) : k.altKey ? N(-1) : M(-1);
  };
  return G.createElement(Cn.div, { ref: e, tabIndex: -1, ...w, "cmdk-root": "", onKeyDown: (k) => {
    var Z;
    if ((Z = w.onKeyDown) == null || Z.call(w, k), !k.defaultPrevented) switch (k.key) {
      case "n":
      case "j": {
        v && k.ctrlKey && X(k);
        break;
      }
      case "ArrowDown": {
        X(k);
        break;
      }
      case "p":
      case "k": {
        v && k.ctrlKey && te(k);
        break;
      }
      case "ArrowUp": {
        te(k);
        break;
      }
      case "Home": {
        k.preventDefault(), C(0);
        break;
      }
      case "End": {
        k.preventDefault(), I();
        break;
      }
      case "Enter":
        if (!k.nativeEvent.isComposing && k.keyCode !== 229) {
          k.preventDefault();
          let K = R();
          if (K) {
            let V = new Event(ca);
            K.dispatchEvent(V);
          }
        }
    }
  } }, G.createElement("label", { "cmdk-label": "", htmlFor: x.inputId, id: x.labelId, style: _y }, l), ro(n, (k) => G.createElement(Af.Provider, { value: $ }, G.createElement(Sf.Provider, { value: x }, k))));
}), vy = G.forwardRef((n, e) => {
  var t, r;
  let s = G.useId(), i = G.useRef(null), o = G.useContext(Cf), a = Is(), l = Tf(n), c = (r = (t = l.current) == null ? void 0 : t.forceMount) != null ? r : o == null ? void 0 : o.forceMount;
  Jn(() => {
    if (!c) return a.item(s, o == null ? void 0 : o.id);
  }, [c]);
  let d = Nf(s, i, [n.value, n.children, i], n.keywords), f = el(), h = Gn((A) => A.value && A.value === d.current), p = Gn((A) => c || a.filter() === !1 ? !0 : A.search ? A.filtered.items.get(s) > 0 : !0);
  G.useEffect(() => {
    let A = i.current;
    if (!(!A || n.disabled)) return A.addEventListener(ca, m), () => A.removeEventListener(ca, m);
  }, [p, n.onSelect, n.disabled]);
  function m() {
    var A, $;
    b(), ($ = (A = l.current).onSelect) == null || $.call(A, d.current);
  }
  function b() {
    f.setState("value", d.current, !0);
  }
  if (!p) return null;
  let { disabled: v, value: w, onSelect: H, forceMount: z, keywords: F, ...q } = n;
  return G.createElement(Cn.div, { ref: is([i, e]), ...q, id: s, "cmdk-item": "", role: "option", "aria-disabled": !!v, "aria-selected": !!h, "data-disabled": !!v, "data-selected": !!h, onPointerMove: v || a.disablePointerSelection ? void 0 : b, onClick: v ? void 0 : m }, n.children);
}), xy = G.forwardRef((n, e) => {
  let { heading: t, children: r, forceMount: s, ...i } = n, o = G.useId(), a = G.useRef(null), l = G.useRef(null), c = G.useId(), d = Is(), f = Gn((p) => s || d.filter() === !1 ? !0 : p.search ? p.filtered.groups.has(o) : !0);
  Jn(() => d.group(o), []), Nf(o, a, [n.value, n.heading, l]);
  let h = G.useMemo(() => ({ id: o, forceMount: s }), [s]);
  return G.createElement(Cn.div, { ref: is([a, e]), ...i, "cmdk-group": "", role: "presentation", hidden: f ? void 0 : !0 }, t && G.createElement("div", { ref: l, "cmdk-group-heading": "", "aria-hidden": !0, id: c }, t), ro(n, (p) => G.createElement("div", { "cmdk-group-items": "", role: "group", "aria-labelledby": t ? c : void 0 }, G.createElement(Cf.Provider, { value: h }, p))));
}), ky = G.forwardRef((n, e) => {
  let { alwaysRender: t, ...r } = n, s = G.useRef(null), i = Gn((o) => !o.search);
  return !t && !i ? null : G.createElement(Cn.div, { ref: is([s, e]), ...r, "cmdk-separator": "", role: "separator" });
}), wy = G.forwardRef((n, e) => {
  let { onValueChange: t, ...r } = n, s = n.value != null, i = el(), o = Gn((d) => d.search), a = Gn((d) => d.value), l = Is(), c = G.useMemo(() => {
    var d;
    let f = (d = l.listInnerRef.current) == null ? void 0 : d.querySelector(`${Xa}[${In}="${encodeURIComponent(a)}"]`);
    return f == null ? void 0 : f.getAttribute("id");
  }, []);
  return G.useEffect(() => {
    n.value != null && i.setState("search", n.value);
  }, [n.value]), G.createElement(Cn.input, { ref: e, ...r, "cmdk-input": "", autoComplete: "off", autoCorrect: "off", spellCheck: !1, "aria-autocomplete": "list", role: "combobox", "aria-expanded": !0, "aria-controls": l.listId, "aria-labelledby": l.labelId, "aria-activedescendant": c, id: l.inputId, type: "text", value: s ? n.value : o, onChange: (d) => {
    s || i.setState("search", d.target.value), t == null || t(d.target.value);
  } });
}), Ey = G.forwardRef((n, e) => {
  let { children: t, label: r = "Suggestions", ...s } = n, i = G.useRef(null), o = G.useRef(null), a = Is();
  return G.useEffect(() => {
    if (o.current && i.current) {
      let l = o.current, c = i.current, d, f = new ResizeObserver(() => {
        d = requestAnimationFrame(() => {
          let h = l.offsetHeight;
          c.style.setProperty("--cmdk-list-height", h.toFixed(1) + "px");
        });
      });
      return f.observe(l), () => {
        cancelAnimationFrame(d), f.unobserve(l);
      };
    }
  }, []), G.createElement(Cn.div, { ref: is([i, e]), ...s, "cmdk-list": "", role: "listbox", "aria-label": r, id: a.listId }, ro(n, (l) => G.createElement("div", { ref: is([o, a.listInnerRef]), "cmdk-list-sizer": "" }, l)));
}), My = G.forwardRef((n, e) => {
  let { open: t, onOpenChange: r, overlayClassName: s, contentClassName: i, container: o, ...a } = n;
  return G.createElement(ke.Root, { open: t, onOpenChange: r }, G.createElement(ke.Portal, { container: o }, G.createElement(ke.Overlay, { "cmdk-overlay": "", className: s }), G.createElement(ke.Content, { "aria-label": n.label, "cmdk-dialog": "", className: i }, G.createElement(Of, { ref: e, ...a }))));
}), Sy = G.forwardRef((n, e) => Gn((t) => t.filtered.count === 0) ? G.createElement(Cn.div, { ref: e, ...n, "cmdk-empty": "", role: "presentation" }) : null), Ay = G.forwardRef((n, e) => {
  let { progress: t, children: r, label: s = "Loading...", ...i } = n;
  return G.createElement(Cn.div, { ref: e, ...i, "cmdk-loading": "", role: "progressbar", "aria-valuenow": t, "aria-valuemin": 0, "aria-valuemax": 100, "aria-label": s }, ro(n, (o) => G.createElement("div", { "aria-hidden": !0 }, o)));
}), ct = Object.assign(Of, { List: Ey, Item: vy, Input: wy, Group: xy, Separator: ky, Dialog: My, Empty: Sy, Loading: Ay });
function Cy(n, e) {
  let t = n.nextElementSibling;
  for (; t; ) {
    if (t.matches(e)) return t;
    t = t.nextElementSibling;
  }
}
function Oy(n, e) {
  let t = n.previousElementSibling;
  for (; t; ) {
    if (t.matches(e)) return t;
    t = t.previousElementSibling;
  }
}
function Tf(n) {
  let e = G.useRef(n);
  return Jn(() => {
    e.current = n;
  }), e;
}
var Jn = typeof window > "u" ? G.useEffect : G.useLayoutEffect;
function ur(n) {
  let e = G.useRef();
  return e.current === void 0 && (e.current = n()), e;
}
function is(n) {
  return (e) => {
    n.forEach((t) => {
      typeof t == "function" ? t(e) : t != null && (t.current = e);
    });
  };
}
function Gn(n) {
  let e = el(), t = () => n(e.snapshot());
  return G.useSyncExternalStore(e.subscribe, t, t);
}
function Nf(n, e, t, r = []) {
  let s = G.useRef(), i = Is();
  return Jn(() => {
    var o;
    let a = (() => {
      var c;
      for (let d of t) {
        if (typeof d == "string") return d.trim();
        if (typeof d == "object" && "current" in d) return d.current ? (c = d.current.textContent) == null ? void 0 : c.trim() : s.current;
      }
    })(), l = r.map((c) => c.trim());
    i.value(n, a, l), (o = e.current) == null || o.setAttribute(In, a), s.current = a;
  }), s;
}
var Ty = () => {
  let [n, e] = G.useState(), t = ur(() => /* @__PURE__ */ new Map());
  return Jn(() => {
    t.current.forEach((r) => r()), t.current = /* @__PURE__ */ new Map();
  }, [n]), (r, s) => {
    t.current.set(r, s), e({});
  };
};
function Ny(n) {
  let e = n.type;
  return typeof e == "function" ? e(n.props) : "render" in e ? e.render(n.props) : n;
}
function ro({ asChild: n, children: e }, t) {
  return n && G.isValidElement(e) ? G.cloneElement(Ny(e), { ref: e.ref }, t(e.props.children)) : t(e);
}
var _y = { position: "absolute", width: "1px", height: "1px", padding: "0", margin: "-1px", overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0" };
const Hy = ke.Root, nM = ke.Trigger, _f = (n) => /* @__PURE__ */ g(ke.Portal, { ...n });
_f.displayName = ke.Portal.displayName;
const Hf = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ke.Overlay,
  {
    ref: t,
    className: T(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      n
    ),
    ...e
  }
));
Hf.displayName = ke.Overlay.displayName;
const If = S(({ className: n, children: e, ...t }, r) => /* @__PURE__ */ ge(_f, { children: [
  /* @__PURE__ */ g(Hf, {}),
  /* @__PURE__ */ ge(
    ke.Content,
    {
      ref: r,
      className: T(
        "fixed left-1/2 top-1/2 z-50 grid w-full max-w-sm -translate-x-1/2 -translate-y-1/2 gap-4 border bg-background p-6 duration-200 focus:outline-none focus:ring-1 focus:ring-secondary focus:ring-offset-1 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:max-w-xl sm:rounded-sm md:w-full",
        n
      ),
      ...t,
      children: [
        e,
        /* @__PURE__ */ ge(ke.Close, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary data-[state=open]:text-secondary-foreground", children: [
          /* @__PURE__ */ g(no, { className: "size-4" }),
          /* @__PURE__ */ g("span", { className: "sr-only", children: "Close" })
        ] })
      ]
    }
  )
] }));
If.displayName = ke.Content.displayName;
const Iy = ({ className: n, ...e }) => /* @__PURE__ */ g("div", { className: T("flex flex-col space-y-3 text-left", n), ...e });
Iy.displayName = "DialogHeader";
const Ry = ({ className: n, ...e }) => /* @__PURE__ */ g(
  "div",
  {
    className: T("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-3", n),
    ...e
  }
);
Ry.displayName = "DialogFooter";
const Dy = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ke.Title,
  {
    ref: t,
    className: T("text-base font-semibold leading-none tracking-tight", n),
    ...e
  }
));
Dy.displayName = ke.Title.displayName;
const Ly = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ke.Description,
  {
    ref: t,
    className: T("text-sm leading-relaxed text-primary-accent", n),
    ...e
  }
));
Ly.displayName = ke.Description.displayName;
const tl = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ct,
  {
    ref: t,
    className: T("flex size-full flex-col overflow-hidden rounded border", n),
    ...e
  }
));
tl.displayName = ct.displayName;
const rM = ({ children: n, ...e }) => /* @__PURE__ */ g(Hy, { ...e, children: /* @__PURE__ */ g(If, { className: "overflow-hidden p-0", children: /* @__PURE__ */ g(tl, { className: "[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-secondary [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:size-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:size-5", children: n }) }) }), Rf = S(({ className: n, ...e }, t) => /* @__PURE__ */ ge("div", { className: "flex items-center border-b px-3", "cmdk-input-wrapper": "", children: [
  /* @__PURE__ */ g(Qu, { size: 16, className: "mr-1 shrink-0 opacity-50" }),
  /* @__PURE__ */ g(
    ct.Input,
    {
      ref: t,
      className: T(
        "flex h-9 w-full rounded border-none bg-transparent py-3 text-sm outline-none focus:ring-transparent disabled:cursor-not-allowed disabled:opacity-50",
        n
      ),
      ...e
    }
  )
] }));
Rf.displayName = ct.Input.displayName;
const Df = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ct.List,
  {
    ref: t,
    className: T("max-h-[300px] overflow-y-auto overflow-x-hidden", n),
    ...e
  }
));
Df.displayName = ct.List.displayName;
const Lf = S((n, e) => /* @__PURE__ */ g(ct.Empty, { ref: e, className: "py-6 text-center text-sm", ...n }));
Lf.displayName = ct.Empty.displayName;
const Pf = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ct.Group,
  {
    ref: t,
    className: T(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:opacity-60",
      n
    ),
    ...e
  }
));
Pf.displayName = ct.Group.displayName;
const Py = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ct.Separator,
  {
    ref: t,
    className: T("-mx-1 h-px bg-border", n),
    ...e
  }
));
Py.displayName = ct.Separator.displayName;
const $f = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ct.Item,
  {
    ref: t,
    className: T(
      "relative flex cursor-default select-none items-center rounded px-2 py-1.5 text-sm outline-none aria-selected:bg-secondary/40 aria-selected:text-secondary-foreground data-[disabled=true]:pointer-events-none data-[disabled=true]:opacity-50",
      n
    ),
    ...e
  }
));
$f.displayName = ct.Item.displayName;
const Zf = Ar.Root, sM = Ar.Arrow, $y = Ar.Trigger, nl = S(({ className: n, align: e = "center", sideOffset: t = 6, ...r }, s) => /* @__PURE__ */ g(Ar.PopoverPortal, { children: /* @__PURE__ */ g(
  Ar.Content,
  {
    ref: s,
    align: e,
    sideOffset: t,
    className: T(
      "z-50 rounded border bg-background p-4 shadow-sm outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      n
    ),
    ...r
  }
) }));
nl.displayName = Ar.Content.displayName;
const Zy = (n, e) => {
  var t, r;
  n.clearable ? (t = n.onValueChange) == null || t.call(n, e.value === n.value ? "" : e.value) : (r = n.onValueChange) == null || r.call(n, e.value);
}, Vy = (n, e) => {
  var t, r, s;
  if ((t = n.value) != null && t.includes(e.value)) {
    if (!n.clearable && n.value.length === 1) return !1;
    (r = n.onValueChange) == null || r.call(n, n.value.filter((i) => i !== e.value));
  } else
    (s = n.onValueChange) == null || s.call(n, [...n.value ?? [], e.value]);
}, iM = S(
  (n, e) => {
    var s;
    const [t, r] = Hs(!1);
    return /* @__PURE__ */ ge(Zf, { open: t, onOpenChange: r, children: [
      /* @__PURE__ */ g($y, { asChild: !0, children: /* @__PURE__ */ ge(
        Mt,
        {
          role: "combobox",
          variant: "outline",
          "aria-expanded": t,
          className: "w-full justify-between hover:bg-secondary/20 active:scale-100",
          children: [
            /* @__PURE__ */ ge("span", { className: "line-clamp-1 text-left font-normal", children: [
              n.multiple && n.value && n.value.length > 0 && /* @__PURE__ */ g("span", { className: "mr-2", children: n.value.join(", ") }),
              !n.multiple && n.value && n.value !== "" && ((s = n.options.find((i) => i.value === n.value)) == null ? void 0 : s.label),
              !n.value || n.value.length === 0 && (n.selectPlaceholder ?? "Select an option")
            ] }),
            /* @__PURE__ */ g(
              Ja,
              {
                className: T(
                  "ml-2 size-4 shrink-0 rotate-0 opacity-50 transition-transform",
                  t && "rotate-180"
                )
              }
            )
          ]
        }
      ) }),
      /* @__PURE__ */ g(nl, { align: "start", className: "p-0", children: /* @__PURE__ */ ge(tl, { children: [
        /* @__PURE__ */ g(
          Rf,
          {
            ref: e,
            placeholder: n.searchPlaceholder ?? "Search for an option"
          }
        ),
        /* @__PURE__ */ ge(Df, { children: [
          /* @__PURE__ */ g(Lf, { children: n.emptyText ?? "No results found" }),
          /* @__PURE__ */ g(Pf, { children: n.options.map((i) => {
            var o;
            return /* @__PURE__ */ ge(
              $f,
              {
                value: i.value.toLowerCase().trim(),
                onSelect: (a) => {
                  const l = n.options.find(
                    (c) => c.value.toLowerCase().trim() === a
                  );
                  if (!l) return null;
                  n.multiple ? Vy(n, l) : (Zy(n, l), r(!1));
                },
                children: [
                  /* @__PURE__ */ g(
                    sr,
                    {
                      className: T(
                        "mr-2 size-4 opacity-0",
                        !n.multiple && n.value === i.value && "opacity-100",
                        n.multiple && ((o = n.value) == null ? void 0 : o.includes(i.value)) && "opacity-100"
                      )
                    }
                  ),
                  i.label
                ]
              },
              i.value
            );
          }) })
        ] })
      ] }) })
    ] });
  }
), oM = Oe.Root, aM = Oe.Trigger, lM = Oe.Group, cM = Oe.Portal, dM = Oe.Sub, uM = Oe.RadioGroup, zy = S(({ className: n, inset: e, children: t, ...r }, s) => /* @__PURE__ */ ge(
  Oe.SubTrigger,
  {
    ref: s,
    className: T(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-secondary focus:text-secondary-foreground data-[state=open]:bg-secondary data-[state=open]:text-secondary-foreground",
      e && "pl-8",
      n
    ),
    ...r,
    children: [
      t,
      /* @__PURE__ */ g(Ga, { className: "ml-auto size-4" })
    ]
  }
));
zy.displayName = Oe.SubTrigger.displayName;
const jy = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  Oe.SubContent,
  {
    ref: t,
    className: T(
      "z-50 max-h-[var(--radix-context-menu-content-available-height)] w-[var(--radix-context-menu-trigger-width)] min-w-32 origin-[var(--radix-context-menu-content-transform-origin)] overflow-hidden rounded-md border bg-background p-1 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      n
    ),
    ...e
  }
));
jy.displayName = Oe.SubContent.displayName;
const Fy = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(Oe.Portal, { children: /* @__PURE__ */ g(
  Oe.Content,
  {
    ref: t,
    className: T(
      "z-50 max-h-[var(--radix-context-menu-content-available-height)] w-[var(--radix-context-menu-trigger-width)] min-w-32 origin-[var(--radix-context-menu-content-transform-origin)] overflow-hidden rounded-md border bg-background p-1 shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      n
    ),
    ...e
  }
) }));
Fy.displayName = Oe.Content.displayName;
const By = S(({ className: n, inset: e, ...t }, r) => /* @__PURE__ */ g(
  Oe.Item,
  {
    ref: r,
    className: T(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-secondary focus:text-secondary-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      e && "pl-8",
      n
    ),
    ...t
  }
));
By.displayName = Oe.Item.displayName;
const Wy = S(({ className: n, children: e, checked: t, ...r }, s) => /* @__PURE__ */ ge(
  Oe.CheckboxItem,
  {
    ref: s,
    className: T(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-secondary focus:text-secondary-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      n
    ),
    checked: t,
    ...r,
    children: [
      /* @__PURE__ */ g("span", { className: "absolute left-2 flex size-4 items-center justify-center", children: /* @__PURE__ */ g(Oe.ItemIndicator, { children: /* @__PURE__ */ g(sr, { size: 14 }) }) }),
      e
    ]
  }
));
Wy.displayName = Oe.CheckboxItem.displayName;
const Uy = S(({ className: n, children: e, ...t }, r) => /* @__PURE__ */ ge(
  Oe.RadioItem,
  {
    ref: r,
    className: T(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-secondary focus:text-secondary-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      n
    ),
    ...t,
    children: [
      /* @__PURE__ */ g("span", { className: "absolute left-2 flex size-4 items-center justify-center", children: /* @__PURE__ */ g(Oe.ItemIndicator, { children: /* @__PURE__ */ g(sr, { size: 14, className: "fill-current" }) }) }),
      e
    ]
  }
));
Uy.displayName = Oe.RadioItem.displayName;
const Ky = S(({ className: n, inset: e, ...t }, r) => /* @__PURE__ */ g(
  Oe.Label,
  {
    ref: r,
    className: T("px-2 py-1.5 text-sm font-semibold text-foreground", e && "pl-8", n),
    ...t
  }
));
Ky.displayName = Oe.Label.displayName;
const qy = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  Oe.Separator,
  {
    ref: t,
    className: T("-mx-1 my-1 h-px bg-border", n),
    ...e
  }
));
qy.displayName = Oe.Separator.displayName;
const fM = Te.Root, hM = Te.Trigger, pM = Te.Group, Jy = Te.Portal, mM = Te.Sub, gM = Te.RadioGroup, Gy = S(({ className: n, inset: e, children: t, ...r }, s) => /* @__PURE__ */ ge(
  Te.SubTrigger,
  {
    ref: s,
    className: T(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-secondary data-[state=open]:bg-secondary",
      e && "pl-8",
      n
    ),
    ...r,
    children: [
      t,
      /* @__PURE__ */ g(Ga, { className: "ml-auto size-4" })
    ]
  }
));
Gy.displayName = Te.SubTrigger.displayName;
const Yy = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(Jy, { children: /* @__PURE__ */ g(
  Te.SubContent,
  {
    ref: t,
    className: T(
      "z-50 min-w-32 overflow-hidden rounded-md border bg-background p-1 text-foreground shadow-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      n
    ),
    ...e
  }
) }));
Yy.displayName = Te.SubContent.displayName;
const Qy = S(({ className: n, children: e, sideOffset: t = 6, ...r }, s) => /* @__PURE__ */ g(Te.Portal, { children: /* @__PURE__ */ g(
  Te.Content,
  {
    ref: s,
    sideOffset: t,
    className: T(
      "z-50 min-w-32 overflow-hidden rounded-md border bg-background p-1 text-foreground shadow-sm",
      "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      n
    ),
    ...r,
    children: e
  }
) }));
Qy.displayName = Te.Content.displayName;
const Xy = S(({ className: n, inset: e, ...t }, r) => /* @__PURE__ */ g(
  Te.Item,
  {
    ref: r,
    className: T(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors ease-in-out focus:bg-secondary focus:text-secondary-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      e && "pl-8",
      n
    ),
    ...t
  }
));
Xy.displayName = Te.Item.displayName;
const e8 = S(({ className: n, children: e, checked: t, ...r }, s) => /* @__PURE__ */ ge(
  Te.CheckboxItem,
  {
    ref: s,
    className: T(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors ease-in-out focus:bg-secondary focus:text-secondary-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      n
    ),
    checked: t,
    ...r,
    children: [
      /* @__PURE__ */ g("span", { className: "absolute left-2 flex size-3.5 items-center justify-center", children: /* @__PURE__ */ g(Te.ItemIndicator, { children: /* @__PURE__ */ g(sr, { className: "size-4" }) }) }),
      e
    ]
  }
));
e8.displayName = Te.CheckboxItem.displayName;
const t8 = S(({ className: n, children: e, ...t }, r) => /* @__PURE__ */ ge(
  Te.RadioItem,
  {
    ref: r,
    className: T(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors ease-in-out focus:bg-secondary focus:text-secondary-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      n
    ),
    ...t,
    children: [
      /* @__PURE__ */ g("span", { className: "absolute left-2 flex size-3.5 items-center justify-center", children: /* @__PURE__ */ g(Te.ItemIndicator, { children: /* @__PURE__ */ g(Bu, { size: 18, weight: "fill", className: "fill-current" }) }) }),
      e
    ]
  }
));
t8.displayName = Te.RadioItem.displayName;
const n8 = S(({ className: n, inset: e, ...t }, r) => /* @__PURE__ */ g(
  Te.Label,
  {
    ref: r,
    className: T("px-2 py-1.5 text-sm font-semibold", e && "pl-8", n),
    ...t
  }
));
n8.displayName = Te.Label.displayName;
const r8 = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  Te.Separator,
  {
    ref: t,
    className: T("-mx-1 my-1 h-px bg-secondary", n),
    ...e
  }
));
r8.displayName = Te.Separator.displayName;
const Vf = _s({}), zf = _s({}), so = () => {
  const n = ni(Vf), e = ni(zf), { getFieldState: t, formState: r } = Qh();
  if (!n || !e)
    throw new Error("useFormField should be used within <FormField>");
  const s = t(n.name, r), { id: i } = e;
  return {
    id: i,
    name: n.name,
    formItemId: `${i}-form-item`,
    formDescriptionId: `${i}-form-item-description`,
    formMessageId: `${i}-form-item-message`,
    ...s
  };
};
var s8 = typeof gr == "object" && gr && gr.Object === Object && gr, i8 = typeof self == "object" && self && self.Object === Object && self;
s8 || i8 || Function("return this")();
function o8(n = !1) {
  if (typeof n != "boolean")
    throw new Error("defaultValue must be `true` or `false`");
  const [e, t] = Hs(n), r = Jr(() => {
    t(!0);
  }, []), s = Jr(() => {
    t(!1);
  }, []), i = Jr(() => {
    t((o) => !o);
  }, []);
  return { value: e, setValue: t, setTrue: r, setFalse: s, toggle: i };
}
const a8 = ir(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-60"
), jf = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(Hu.Root, { ref: t, className: T(a8(), n), ...e }));
jf.displayName = Hu.Root.displayName;
const Xc = ({
  ...n
}) => /* @__PURE__ */ g(Vf.Provider, { value: { name: n.name }, children: /* @__PURE__ */ g(Xh, { ...n }) }), da = S(
  ({ className: n, ...e }, t) => {
    const r = qh();
    return /* @__PURE__ */ g(zf.Provider, { value: { id: r }, children: /* @__PURE__ */ g("div", { ref: t, className: T("w-full space-y-1", n), ...e }) });
  }
);
da.displayName = "FormItem";
const ua = S(({ className: n, ...e }, t) => {
  const { error: r, formItemId: s } = so();
  return /* @__PURE__ */ g(
    jf,
    {
      ref: t,
      htmlFor: s,
      className: T(r && "text-error", n),
      ...e
    }
  );
});
ua.displayName = "FormLabel";
const fa = S(({ ...n }, e) => {
  const { error: t, formItemId: r, formDescriptionId: s, formMessageId: i } = so();
  return /* @__PURE__ */ g(
    _u,
    {
      ref: e,
      id: r,
      "aria-invalid": !!t,
      "aria-describedby": t ? `${s} ${i}` : s,
      ...n
    }
  );
});
fa.displayName = "FormControl";
const l8 = S(({ className: n, ...e }, t) => {
  const { formDescriptionId: r } = so();
  return /* @__PURE__ */ g(
    "p",
    {
      ref: t,
      id: r,
      className: T("text-xs leading-relaxed opacity-60", n),
      ...e
    }
  );
});
l8.displayName = "FormDescription";
const Ff = S(({ className: n, children: e, ...t }, r) => {
  const { error: s, formMessageId: i } = so(), o = s ? String(s.message) : e;
  return o ? /* @__PURE__ */ g(
    "p",
    {
      ref: r,
      id: i,
      className: T("text-xs font-medium leading-relaxed text-error", n),
      ...t,
      children: o
    }
  ) : null;
});
Ff.displayName = "FormMessage";
const yM = ss.Root, bM = ss.Trigger, c8 = S(({ className: n, align: e = "center", sideOffset: t = 6, ...r }, s) => /* @__PURE__ */ g(ss.Portal, { children: /* @__PURE__ */ g(
  ss.Content,
  {
    ref: s,
    align: e,
    sideOffset: t,
    className: T(
      "z-50 rounded-sm border bg-background p-4 text-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      n
    ),
    ...r
  }
) }));
c8.displayName = ss.Content.displayName;
const vM = rp.Root, xM = qa.PanelGroup, kM = qa.Panel, wM = ({
  className: n,
  isDragging: e,
  onDragging: t,
  ...r
}) => /* @__PURE__ */ ge(
  qa.PanelResizeHandle,
  {
    className: T("relative h-screen", n),
    onDragging: t,
    ...r,
    children: [
      /* @__PURE__ */ g("div", { className: "flex h-full items-center justify-center", children: /* @__PURE__ */ g(
        "div",
        {
          className: T(
            "absolute inset-y-0 left-0 z-50 w-1 rounded-lg pl-1 transition-all hover:bg-info hover:opacity-100",
            e && "bg-info opacity-100"
          )
        }
      ) }),
      /* @__PURE__ */ g("div", { className: "pointer-events-none absolute inset-y-0 left-[-5px] z-50 flex items-center justify-center", children: /* @__PURE__ */ g(Wu, { size: 14, opacity: 0.75 }) })
    ]
  }
), ed = (n, e, t) => {
  if (n && "reportValidity" in n) {
    const r = ia(t, e);
    n.setCustomValidity(r && r.message || ""), n.reportValidity();
  }
}, Bf = (n, e) => {
  for (const t in e.fields) {
    const r = e.fields[t];
    r && r.ref && "reportValidity" in r.ref ? ed(r.ref, t, n) : r.refs && r.refs.forEach((s) => ed(s, t, n));
  }
}, d8 = (n, e) => {
  e.shouldUseNativeValidation && Bf(n, e);
  const t = {};
  for (const r in n) {
    const s = ia(e.fields, r), i = Object.assign(n[r] || {}, { ref: s && s.ref });
    if (u8(e.names || Object.keys(n), r)) {
      const o = Object.assign({}, ia(t, r));
      Mo(o, "root", i), Mo(t, r, o);
    } else Mo(t, r, i);
  }
  return t;
}, u8 = (n, e) => n.some((t) => t.startsWith(e + "."));
var f8 = function(n, e) {
  for (var t = {}; n.length; ) {
    var r = n[0], s = r.code, i = r.message, o = r.path.join(".");
    if (!t[o]) if ("unionErrors" in r) {
      var a = r.unionErrors[0].errors[0];
      t[o] = { message: a.message, type: a.code };
    } else t[o] = { message: i, type: s };
    if ("unionErrors" in r && r.unionErrors.forEach(function(d) {
      return d.errors.forEach(function(f) {
        return n.push(f);
      });
    }), e) {
      var l = t[o].types, c = l && l[r.code];
      t[o] = ep(o, e, t, s, c ? [].concat(c, r.message) : r.message);
    }
    n.shift();
  }
  return t;
}, h8 = function(n, e, t) {
  return t === void 0 && (t = {}), function(r, s, i) {
    try {
      return Promise.resolve(function(o, a) {
        try {
          var l = Promise.resolve(n[t.mode === "sync" ? "parse" : "parseAsync"](r, e)).then(function(c) {
            return i.shouldUseNativeValidation && Bf({}, i), { errors: {}, values: t.raw ? r : c };
          });
        } catch (c) {
          return a(c);
        }
        return l && l.then ? l.then(void 0, a) : l;
      }(0, function(o) {
        if (function(a) {
          return Array.isArray(a == null ? void 0 : a.errors);
        }(o)) return { values: {}, errors: d8(f8(o.errors, !i.shouldUseNativeValidation && i.criteriaMode === "all"), i) };
        throw o;
      }));
    } catch (o) {
      return Promise.reject(o);
    }
  };
};
function We(n) {
  this.content = n;
}
We.prototype = {
  constructor: We,
  find: function(n) {
    for (var e = 0; e < this.content.length; e += 2)
      if (this.content[e] === n) return e;
    return -1;
  },
  // :: (string) → ?any
  // Retrieve the value stored under `key`, or return undefined when
  // no such key exists.
  get: function(n) {
    var e = this.find(n);
    return e == -1 ? void 0 : this.content[e + 1];
  },
  // :: (string, any, ?string) → OrderedMap
  // Create a new map by replacing the value of `key` with a new
  // value, or adding a binding to the end of the map. If `newKey` is
  // given, the key of the binding will be replaced with that key.
  update: function(n, e, t) {
    var r = t && t != n ? this.remove(t) : this, s = r.find(n), i = r.content.slice();
    return s == -1 ? i.push(t || n, e) : (i[s + 1] = e, t && (i[s] = t)), new We(i);
  },
  // :: (string) → OrderedMap
  // Return a map with the given key removed, if it existed.
  remove: function(n) {
    var e = this.find(n);
    if (e == -1) return this;
    var t = this.content.slice();
    return t.splice(e, 2), new We(t);
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the start of the map.
  addToStart: function(n, e) {
    return new We([n, e].concat(this.remove(n).content));
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the end of the map.
  addToEnd: function(n, e) {
    var t = this.remove(n).content.slice();
    return t.push(n, e), new We(t);
  },
  // :: (string, string, any) → OrderedMap
  // Add a key after the given key. If `place` is not found, the new
  // key is added to the end.
  addBefore: function(n, e, t) {
    var r = this.remove(e), s = r.content.slice(), i = r.find(n);
    return s.splice(i == -1 ? s.length : i, 0, e, t), new We(s);
  },
  // :: ((key: string, value: any))
  // Call the given function for each key/value pair in the map, in
  // order.
  forEach: function(n) {
    for (var e = 0; e < this.content.length; e += 2)
      n(this.content[e], this.content[e + 1]);
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by prepending the keys in this map that don't
  // appear in `map` before the keys in `map`.
  prepend: function(n) {
    return n = We.from(n), n.size ? new We(n.content.concat(this.subtract(n).content)) : this;
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by appending the keys in this map that don't
  // appear in `map` after the keys in `map`.
  append: function(n) {
    return n = We.from(n), n.size ? new We(this.subtract(n).content.concat(n.content)) : this;
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a map containing all the keys in this map that don't
  // appear in `map`.
  subtract: function(n) {
    var e = this;
    n = We.from(n);
    for (var t = 0; t < n.content.length; t += 2)
      e = e.remove(n.content[t]);
    return e;
  },
  // :: () → Object
  // Turn ordered map into a plain object.
  toObject: function() {
    var n = {};
    return this.forEach(function(e, t) {
      n[e] = t;
    }), n;
  },
  // :: number
  // The amount of keys in this map.
  get size() {
    return this.content.length >> 1;
  }
};
We.from = function(n) {
  if (n instanceof We) return n;
  var e = [];
  if (n) for (var t in n) e.push(t, n[t]);
  return new We(e);
};
function Wf(n, e, t) {
  for (let r = 0; ; r++) {
    if (r == n.childCount || r == e.childCount)
      return n.childCount == e.childCount ? null : t;
    let s = n.child(r), i = e.child(r);
    if (s == i) {
      t += s.nodeSize;
      continue;
    }
    if (!s.sameMarkup(i))
      return t;
    if (s.isText && s.text != i.text) {
      for (let o = 0; s.text[o] == i.text[o]; o++)
        t++;
      return t;
    }
    if (s.content.size || i.content.size) {
      let o = Wf(s.content, i.content, t + 1);
      if (o != null)
        return o;
    }
    t += s.nodeSize;
  }
}
function Uf(n, e, t, r) {
  for (let s = n.childCount, i = e.childCount; ; ) {
    if (s == 0 || i == 0)
      return s == i ? null : { a: t, b: r };
    let o = n.child(--s), a = e.child(--i), l = o.nodeSize;
    if (o == a) {
      t -= l, r -= l;
      continue;
    }
    if (!o.sameMarkup(a))
      return { a: t, b: r };
    if (o.isText && o.text != a.text) {
      let c = 0, d = Math.min(o.text.length, a.text.length);
      for (; c < d && o.text[o.text.length - c - 1] == a.text[a.text.length - c - 1]; )
        c++, t--, r--;
      return { a: t, b: r };
    }
    if (o.content.size || a.content.size) {
      let c = Uf(o.content, a.content, t - 1, r - 1);
      if (c)
        return c;
    }
    t -= l, r -= l;
  }
}
class L {
  /**
  @internal
  */
  constructor(e, t) {
    if (this.content = e, this.size = t || 0, t == null)
      for (let r = 0; r < e.length; r++)
        this.size += e[r].nodeSize;
  }
  /**
  Invoke a callback for all descendant nodes between the given two
  positions (relative to start of this fragment). Doesn't descend
  into a node when the callback returns `false`.
  */
  nodesBetween(e, t, r, s = 0, i) {
    for (let o = 0, a = 0; a < t; o++) {
      let l = this.content[o], c = a + l.nodeSize;
      if (c > e && r(l, s + a, i || null, o) !== !1 && l.content.size) {
        let d = a + 1;
        l.nodesBetween(Math.max(0, e - d), Math.min(l.content.size, t - d), r, s + d);
      }
      a = c;
    }
  }
  /**
  Call the given callback for every descendant node. `pos` will be
  relative to the start of the fragment. The callback may return
  `false` to prevent traversal of a given node's children.
  */
  descendants(e) {
    this.nodesBetween(0, this.size, e);
  }
  /**
  Extract the text between `from` and `to`. See the same method on
  [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
  */
  textBetween(e, t, r, s) {
    let i = "", o = !0;
    return this.nodesBetween(e, t, (a, l) => {
      let c = a.isText ? a.text.slice(Math.max(e, l) - l, t - l) : a.isLeaf ? s ? typeof s == "function" ? s(a) : s : a.type.spec.leafText ? a.type.spec.leafText(a) : "" : "";
      a.isBlock && (a.isLeaf && c || a.isTextblock) && r && (o ? o = !1 : i += r), i += c;
    }, 0), i;
  }
  /**
  Create a new fragment containing the combined content of this
  fragment and the other.
  */
  append(e) {
    if (!e.size)
      return this;
    if (!this.size)
      return e;
    let t = this.lastChild, r = e.firstChild, s = this.content.slice(), i = 0;
    for (t.isText && t.sameMarkup(r) && (s[s.length - 1] = t.withText(t.text + r.text), i = 1); i < e.content.length; i++)
      s.push(e.content[i]);
    return new L(s, this.size + e.size);
  }
  /**
  Cut out the sub-fragment between the two given positions.
  */
  cut(e, t = this.size) {
    if (e == 0 && t == this.size)
      return this;
    let r = [], s = 0;
    if (t > e)
      for (let i = 0, o = 0; o < t; i++) {
        let a = this.content[i], l = o + a.nodeSize;
        l > e && ((o < e || l > t) && (a.isText ? a = a.cut(Math.max(0, e - o), Math.min(a.text.length, t - o)) : a = a.cut(Math.max(0, e - o - 1), Math.min(a.content.size, t - o - 1))), r.push(a), s += a.nodeSize), o = l;
      }
    return new L(r, s);
  }
  /**
  @internal
  */
  cutByIndex(e, t) {
    return e == t ? L.empty : e == 0 && t == this.content.length ? this : new L(this.content.slice(e, t));
  }
  /**
  Create a new fragment in which the node at the given index is
  replaced by the given node.
  */
  replaceChild(e, t) {
    let r = this.content[e];
    if (r == t)
      return this;
    let s = this.content.slice(), i = this.size + t.nodeSize - r.nodeSize;
    return s[e] = t, new L(s, i);
  }
  /**
  Create a new fragment by prepending the given node to this
  fragment.
  */
  addToStart(e) {
    return new L([e].concat(this.content), this.size + e.nodeSize);
  }
  /**
  Create a new fragment by appending the given node to this
  fragment.
  */
  addToEnd(e) {
    return new L(this.content.concat(e), this.size + e.nodeSize);
  }
  /**
  Compare this fragment to another one.
  */
  eq(e) {
    if (this.content.length != e.content.length)
      return !1;
    for (let t = 0; t < this.content.length; t++)
      if (!this.content[t].eq(e.content[t]))
        return !1;
    return !0;
  }
  /**
  The first child of the fragment, or `null` if it is empty.
  */
  get firstChild() {
    return this.content.length ? this.content[0] : null;
  }
  /**
  The last child of the fragment, or `null` if it is empty.
  */
  get lastChild() {
    return this.content.length ? this.content[this.content.length - 1] : null;
  }
  /**
  The number of child nodes in this fragment.
  */
  get childCount() {
    return this.content.length;
  }
  /**
  Get the child node at the given index. Raise an error when the
  index is out of range.
  */
  child(e) {
    let t = this.content[e];
    if (!t)
      throw new RangeError("Index " + e + " out of range for " + this);
    return t;
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(e) {
    return this.content[e] || null;
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(e) {
    for (let t = 0, r = 0; t < this.content.length; t++) {
      let s = this.content[t];
      e(s, r, t), r += s.nodeSize;
    }
  }
  /**
  Find the first position at which this fragment and another
  fragment differ, or `null` if they are the same.
  */
  findDiffStart(e, t = 0) {
    return Wf(this, e, t);
  }
  /**
  Find the first position, searching from the end, at which this
  fragment and the given fragment differ, or `null` if they are
  the same. Since this position will not be the same in both
  nodes, an object with two separate positions is returned.
  */
  findDiffEnd(e, t = this.size, r = e.size) {
    return Uf(this, e, t, r);
  }
  /**
  Find the index and inner offset corresponding to a given relative
  position in this fragment. The result object will be reused
  (overwritten) the next time the function is called. @internal
  */
  findIndex(e, t = -1) {
    if (e == 0)
      return Zs(0, e);
    if (e == this.size)
      return Zs(this.content.length, e);
    if (e > this.size || e < 0)
      throw new RangeError(`Position ${e} outside of fragment (${this})`);
    for (let r = 0, s = 0; ; r++) {
      let i = this.child(r), o = s + i.nodeSize;
      if (o >= e)
        return o == e || t > 0 ? Zs(r + 1, o) : Zs(r, s);
      s = o;
    }
  }
  /**
  Return a debugging string that describes this fragment.
  */
  toString() {
    return "<" + this.toStringInner() + ">";
  }
  /**
  @internal
  */
  toStringInner() {
    return this.content.join(", ");
  }
  /**
  Create a JSON-serializeable representation of this fragment.
  */
  toJSON() {
    return this.content.length ? this.content.map((e) => e.toJSON()) : null;
  }
  /**
  Deserialize a fragment from its JSON representation.
  */
  static fromJSON(e, t) {
    if (!t)
      return L.empty;
    if (!Array.isArray(t))
      throw new RangeError("Invalid input for Fragment.fromJSON");
    return new L(t.map(e.nodeFromJSON));
  }
  /**
  Build a fragment from an array of nodes. Ensures that adjacent
  text nodes with the same marks are joined together.
  */
  static fromArray(e) {
    if (!e.length)
      return L.empty;
    let t, r = 0;
    for (let s = 0; s < e.length; s++) {
      let i = e[s];
      r += i.nodeSize, s && i.isText && e[s - 1].sameMarkup(i) ? (t || (t = e.slice(0, s)), t[t.length - 1] = i.withText(t[t.length - 1].text + i.text)) : t && t.push(i);
    }
    return new L(t || e, r);
  }
  /**
  Create a fragment from something that can be interpreted as a
  set of nodes. For `null`, it returns the empty fragment. For a
  fragment, the fragment itself. For a node or array of nodes, a
  fragment containing those nodes.
  */
  static from(e) {
    if (!e)
      return L.empty;
    if (e instanceof L)
      return e;
    if (Array.isArray(e))
      return this.fromArray(e);
    if (e.attrs)
      return new L([e], e.nodeSize);
    throw new RangeError("Can not convert " + e + " to a Fragment" + (e.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
  }
}
L.empty = new L([], 0);
const To = { index: 0, offset: 0 };
function Zs(n, e) {
  return To.index = n, To.offset = e, To;
}
function ii(n, e) {
  if (n === e)
    return !0;
  if (!(n && typeof n == "object") || !(e && typeof e == "object"))
    return !1;
  let t = Array.isArray(n);
  if (Array.isArray(e) != t)
    return !1;
  if (t) {
    if (n.length != e.length)
      return !1;
    for (let r = 0; r < n.length; r++)
      if (!ii(n[r], e[r]))
        return !1;
  } else {
    for (let r in n)
      if (!(r in e) || !ii(n[r], e[r]))
        return !1;
    for (let r in e)
      if (!(r in n))
        return !1;
  }
  return !0;
}
let Ee = class ha {
  /**
  @internal
  */
  constructor(e, t) {
    this.type = e, this.attrs = t;
  }
  /**
  Given a set of marks, create a new set which contains this one as
  well, in the right position. If this mark is already in the set,
  the set itself is returned. If any marks that are set to be
  [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
  those are replaced by this one.
  */
  addToSet(e) {
    let t, r = !1;
    for (let s = 0; s < e.length; s++) {
      let i = e[s];
      if (this.eq(i))
        return e;
      if (this.type.excludes(i.type))
        t || (t = e.slice(0, s));
      else {
        if (i.type.excludes(this.type))
          return e;
        !r && i.type.rank > this.type.rank && (t || (t = e.slice(0, s)), t.push(this), r = !0), t && t.push(i);
      }
    }
    return t || (t = e.slice()), r || t.push(this), t;
  }
  /**
  Remove this mark from the given set, returning a new set. If this
  mark is not in the set, the set itself is returned.
  */
  removeFromSet(e) {
    for (let t = 0; t < e.length; t++)
      if (this.eq(e[t]))
        return e.slice(0, t).concat(e.slice(t + 1));
    return e;
  }
  /**
  Test whether this mark is in the given set of marks.
  */
  isInSet(e) {
    for (let t = 0; t < e.length; t++)
      if (this.eq(e[t]))
        return !0;
    return !1;
  }
  /**
  Test whether this mark has the same type and attributes as
  another mark.
  */
  eq(e) {
    return this == e || this.type == e.type && ii(this.attrs, e.attrs);
  }
  /**
  Convert this mark to a JSON-serializeable representation.
  */
  toJSON() {
    let e = { type: this.type.name };
    for (let t in this.attrs) {
      e.attrs = this.attrs;
      break;
    }
    return e;
  }
  /**
  Deserialize a mark from JSON.
  */
  static fromJSON(e, t) {
    if (!t)
      throw new RangeError("Invalid input for Mark.fromJSON");
    let r = e.marks[t.type];
    if (!r)
      throw new RangeError(`There is no mark type ${t.type} in this schema`);
    let s = r.create(t.attrs);
    return r.checkAttrs(s.attrs), s;
  }
  /**
  Test whether two sets of marks are identical.
  */
  static sameSet(e, t) {
    if (e == t)
      return !0;
    if (e.length != t.length)
      return !1;
    for (let r = 0; r < e.length; r++)
      if (!e[r].eq(t[r]))
        return !1;
    return !0;
  }
  /**
  Create a properly sorted mark set from null, a single mark, or an
  unsorted array of marks.
  */
  static setFrom(e) {
    if (!e || Array.isArray(e) && e.length == 0)
      return ha.none;
    if (e instanceof ha)
      return [e];
    let t = e.slice();
    return t.sort((r, s) => r.type.rank - s.type.rank), t;
  }
};
Ee.none = [];
class oi extends Error {
}
class W {
  /**
  Create a slice. When specifying a non-zero open depth, you must
  make sure that there are nodes of at least that depth at the
  appropriate side of the fragment—i.e. if the fragment is an
  empty paragraph node, `openStart` and `openEnd` can't be greater
  than 1.
  
  It is not necessary for the content of open nodes to conform to
  the schema's content constraints, though it should be a valid
  start/end/middle for such a node, depending on which sides are
  open.
  */
  constructor(e, t, r) {
    this.content = e, this.openStart = t, this.openEnd = r;
  }
  /**
  The size this slice would add when inserted into a document.
  */
  get size() {
    return this.content.size - this.openStart - this.openEnd;
  }
  /**
  @internal
  */
  insertAt(e, t) {
    let r = qf(this.content, e + this.openStart, t);
    return r && new W(r, this.openStart, this.openEnd);
  }
  /**
  @internal
  */
  removeBetween(e, t) {
    return new W(Kf(this.content, e + this.openStart, t + this.openStart), this.openStart, this.openEnd);
  }
  /**
  Tests whether this slice is equal to another slice.
  */
  eq(e) {
    return this.content.eq(e.content) && this.openStart == e.openStart && this.openEnd == e.openEnd;
  }
  /**
  @internal
  */
  toString() {
    return this.content + "(" + this.openStart + "," + this.openEnd + ")";
  }
  /**
  Convert a slice to a JSON-serializable representation.
  */
  toJSON() {
    if (!this.content.size)
      return null;
    let e = { content: this.content.toJSON() };
    return this.openStart > 0 && (e.openStart = this.openStart), this.openEnd > 0 && (e.openEnd = this.openEnd), e;
  }
  /**
  Deserialize a slice from its JSON representation.
  */
  static fromJSON(e, t) {
    if (!t)
      return W.empty;
    let r = t.openStart || 0, s = t.openEnd || 0;
    if (typeof r != "number" || typeof s != "number")
      throw new RangeError("Invalid input for Slice.fromJSON");
    return new W(L.fromJSON(e, t.content), r, s);
  }
  /**
  Create a slice from a fragment by taking the maximum possible
  open value on both side of the fragment.
  */
  static maxOpen(e, t = !0) {
    let r = 0, s = 0;
    for (let i = e.firstChild; i && !i.isLeaf && (t || !i.type.spec.isolating); i = i.firstChild)
      r++;
    for (let i = e.lastChild; i && !i.isLeaf && (t || !i.type.spec.isolating); i = i.lastChild)
      s++;
    return new W(e, r, s);
  }
}
W.empty = new W(L.empty, 0, 0);
function Kf(n, e, t) {
  let { index: r, offset: s } = n.findIndex(e), i = n.maybeChild(r), { index: o, offset: a } = n.findIndex(t);
  if (s == e || i.isText) {
    if (a != t && !n.child(o).isText)
      throw new RangeError("Removing non-flat range");
    return n.cut(0, e).append(n.cut(t));
  }
  if (r != o)
    throw new RangeError("Removing non-flat range");
  return n.replaceChild(r, i.copy(Kf(i.content, e - s - 1, t - s - 1)));
}
function qf(n, e, t, r) {
  let { index: s, offset: i } = n.findIndex(e), o = n.maybeChild(s);
  if (i == e || o.isText)
    return n.cut(0, e).append(t).append(n.cut(e));
  let a = qf(o.content, e - i - 1, t);
  return a && n.replaceChild(s, o.copy(a));
}
function p8(n, e, t) {
  if (t.openStart > n.depth)
    throw new oi("Inserted content deeper than insertion position");
  if (n.depth - t.openStart != e.depth - t.openEnd)
    throw new oi("Inconsistent open depths");
  return Jf(n, e, t, 0);
}
function Jf(n, e, t, r) {
  let s = n.index(r), i = n.node(r);
  if (s == e.index(r) && r < n.depth - t.openStart) {
    let o = Jf(n, e, t, r + 1);
    return i.copy(i.content.replaceChild(s, o));
  } else if (t.content.size)
    if (!t.openStart && !t.openEnd && n.depth == r && e.depth == r) {
      let o = n.parent, a = o.content;
      return jn(o, a.cut(0, n.parentOffset).append(t.content).append(a.cut(e.parentOffset)));
    } else {
      let { start: o, end: a } = m8(t, n);
      return jn(i, Yf(n, o, a, e, r));
    }
  else return jn(i, ai(n, e, r));
}
function Gf(n, e) {
  if (!e.type.compatibleContent(n.type))
    throw new oi("Cannot join " + e.type.name + " onto " + n.type.name);
}
function pa(n, e, t) {
  let r = n.node(t);
  return Gf(r, e.node(t)), r;
}
function zn(n, e) {
  let t = e.length - 1;
  t >= 0 && n.isText && n.sameMarkup(e[t]) ? e[t] = n.withText(e[t].text + n.text) : e.push(n);
}
function Gr(n, e, t, r) {
  let s = (e || n).node(t), i = 0, o = e ? e.index(t) : s.childCount;
  n && (i = n.index(t), n.depth > t ? i++ : n.textOffset && (zn(n.nodeAfter, r), i++));
  for (let a = i; a < o; a++)
    zn(s.child(a), r);
  e && e.depth == t && e.textOffset && zn(e.nodeBefore, r);
}
function jn(n, e) {
  return n.type.checkContent(e), n.copy(e);
}
function Yf(n, e, t, r, s) {
  let i = n.depth > s && pa(n, e, s + 1), o = r.depth > s && pa(t, r, s + 1), a = [];
  return Gr(null, n, s, a), i && o && e.index(s) == t.index(s) ? (Gf(i, o), zn(jn(i, Yf(n, e, t, r, s + 1)), a)) : (i && zn(jn(i, ai(n, e, s + 1)), a), Gr(e, t, s, a), o && zn(jn(o, ai(t, r, s + 1)), a)), Gr(r, null, s, a), new L(a);
}
function ai(n, e, t) {
  let r = [];
  if (Gr(null, n, t, r), n.depth > t) {
    let s = pa(n, e, t + 1);
    zn(jn(s, ai(n, e, t + 1)), r);
  }
  return Gr(e, null, t, r), new L(r);
}
function m8(n, e) {
  let t = e.depth - n.openStart, s = e.node(t).copy(n.content);
  for (let i = t - 1; i >= 0; i--)
    s = e.node(i).copy(L.from(s));
  return {
    start: s.resolveNoCache(n.openStart + t),
    end: s.resolveNoCache(s.content.size - n.openEnd - t)
  };
}
class as {
  /**
  @internal
  */
  constructor(e, t, r) {
    this.pos = e, this.path = t, this.parentOffset = r, this.depth = t.length / 3 - 1;
  }
  /**
  @internal
  */
  resolveDepth(e) {
    return e == null ? this.depth : e < 0 ? this.depth + e : e;
  }
  /**
  The parent node that the position points into. Note that even if
  a position points into a text node, that node is not considered
  the parent—text nodes are ‘flat’ in this model, and have no content.
  */
  get parent() {
    return this.node(this.depth);
  }
  /**
  The root node in which the position was resolved.
  */
  get doc() {
    return this.node(0);
  }
  /**
  The ancestor node at the given level. `p.node(p.depth)` is the
  same as `p.parent`.
  */
  node(e) {
    return this.path[this.resolveDepth(e) * 3];
  }
  /**
  The index into the ancestor at the given level. If this points
  at the 3rd node in the 2nd paragraph on the top level, for
  example, `p.index(0)` is 1 and `p.index(1)` is 2.
  */
  index(e) {
    return this.path[this.resolveDepth(e) * 3 + 1];
  }
  /**
  The index pointing after this position into the ancestor at the
  given level.
  */
  indexAfter(e) {
    return e = this.resolveDepth(e), this.index(e) + (e == this.depth && !this.textOffset ? 0 : 1);
  }
  /**
  The (absolute) position at the start of the node at the given
  level.
  */
  start(e) {
    return e = this.resolveDepth(e), e == 0 ? 0 : this.path[e * 3 - 1] + 1;
  }
  /**
  The (absolute) position at the end of the node at the given
  level.
  */
  end(e) {
    return e = this.resolveDepth(e), this.start(e) + this.node(e).content.size;
  }
  /**
  The (absolute) position directly before the wrapping node at the
  given level, or, when `depth` is `this.depth + 1`, the original
  position.
  */
  before(e) {
    if (e = this.resolveDepth(e), !e)
      throw new RangeError("There is no position before the top-level node");
    return e == this.depth + 1 ? this.pos : this.path[e * 3 - 1];
  }
  /**
  The (absolute) position directly after the wrapping node at the
  given level, or the original position when `depth` is `this.depth + 1`.
  */
  after(e) {
    if (e = this.resolveDepth(e), !e)
      throw new RangeError("There is no position after the top-level node");
    return e == this.depth + 1 ? this.pos : this.path[e * 3 - 1] + this.path[e * 3].nodeSize;
  }
  /**
  When this position points into a text node, this returns the
  distance between the position and the start of the text node.
  Will be zero for positions that point between nodes.
  */
  get textOffset() {
    return this.pos - this.path[this.path.length - 1];
  }
  /**
  Get the node directly after the position, if any. If the position
  points into a text node, only the part of that node after the
  position is returned.
  */
  get nodeAfter() {
    let e = this.parent, t = this.index(this.depth);
    if (t == e.childCount)
      return null;
    let r = this.pos - this.path[this.path.length - 1], s = e.child(t);
    return r ? e.child(t).cut(r) : s;
  }
  /**
  Get the node directly before the position, if any. If the
  position points into a text node, only the part of that node
  before the position is returned.
  */
  get nodeBefore() {
    let e = this.index(this.depth), t = this.pos - this.path[this.path.length - 1];
    return t ? this.parent.child(e).cut(0, t) : e == 0 ? null : this.parent.child(e - 1);
  }
  /**
  Get the position at the given index in the parent node at the
  given depth (which defaults to `this.depth`).
  */
  posAtIndex(e, t) {
    t = this.resolveDepth(t);
    let r = this.path[t * 3], s = t == 0 ? 0 : this.path[t * 3 - 1] + 1;
    for (let i = 0; i < e; i++)
      s += r.child(i).nodeSize;
    return s;
  }
  /**
  Get the marks at this position, factoring in the surrounding
  marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
  position is at the start of a non-empty node, the marks of the
  node after it (if any) are returned.
  */
  marks() {
    let e = this.parent, t = this.index();
    if (e.content.size == 0)
      return Ee.none;
    if (this.textOffset)
      return e.child(t).marks;
    let r = e.maybeChild(t - 1), s = e.maybeChild(t);
    if (!r) {
      let a = r;
      r = s, s = a;
    }
    let i = r.marks;
    for (var o = 0; o < i.length; o++)
      i[o].type.spec.inclusive === !1 && (!s || !i[o].isInSet(s.marks)) && (i = i[o--].removeFromSet(i));
    return i;
  }
  /**
  Get the marks after the current position, if any, except those
  that are non-inclusive and not present at position `$end`. This
  is mostly useful for getting the set of marks to preserve after a
  deletion. Will return `null` if this position is at the end of
  its parent node or its parent node isn't a textblock (in which
  case no marks should be preserved).
  */
  marksAcross(e) {
    let t = this.parent.maybeChild(this.index());
    if (!t || !t.isInline)
      return null;
    let r = t.marks, s = e.parent.maybeChild(e.index());
    for (var i = 0; i < r.length; i++)
      r[i].type.spec.inclusive === !1 && (!s || !r[i].isInSet(s.marks)) && (r = r[i--].removeFromSet(r));
    return r;
  }
  /**
  The depth up to which this position and the given (non-resolved)
  position share the same parent nodes.
  */
  sharedDepth(e) {
    for (let t = this.depth; t > 0; t--)
      if (this.start(t) <= e && this.end(t) >= e)
        return t;
    return 0;
  }
  /**
  Returns a range based on the place where this position and the
  given position diverge around block content. If both point into
  the same textblock, for example, a range around that textblock
  will be returned. If they point into different blocks, the range
  around those blocks in their shared ancestor is returned. You can
  pass in an optional predicate that will be called with a parent
  node to see if a range into that parent is acceptable.
  */
  blockRange(e = this, t) {
    if (e.pos < this.pos)
      return e.blockRange(this);
    for (let r = this.depth - (this.parent.inlineContent || this.pos == e.pos ? 1 : 0); r >= 0; r--)
      if (e.pos <= this.end(r) && (!t || t(this.node(r))))
        return new li(this, e, r);
    return null;
  }
  /**
  Query whether the given position shares the same parent node.
  */
  sameParent(e) {
    return this.pos - this.parentOffset == e.pos - e.parentOffset;
  }
  /**
  Return the greater of this and the given position.
  */
  max(e) {
    return e.pos > this.pos ? e : this;
  }
  /**
  Return the smaller of this and the given position.
  */
  min(e) {
    return e.pos < this.pos ? e : this;
  }
  /**
  @internal
  */
  toString() {
    let e = "";
    for (let t = 1; t <= this.depth; t++)
      e += (e ? "/" : "") + this.node(t).type.name + "_" + this.index(t - 1);
    return e + ":" + this.parentOffset;
  }
  /**
  @internal
  */
  static resolve(e, t) {
    if (!(t >= 0 && t <= e.content.size))
      throw new RangeError("Position " + t + " out of range");
    let r = [], s = 0, i = t;
    for (let o = e; ; ) {
      let { index: a, offset: l } = o.content.findIndex(i), c = i - l;
      if (r.push(o, a, s + l), !c || (o = o.child(a), o.isText))
        break;
      i = c - 1, s += l + 1;
    }
    return new as(t, r, i);
  }
  /**
  @internal
  */
  static resolveCached(e, t) {
    let r = td.get(e);
    if (r)
      for (let i = 0; i < r.elts.length; i++) {
        let o = r.elts[i];
        if (o.pos == t)
          return o;
      }
    else
      td.set(e, r = new g8());
    let s = r.elts[r.i] = as.resolve(e, t);
    return r.i = (r.i + 1) % y8, s;
  }
}
class g8 {
  constructor() {
    this.elts = [], this.i = 0;
  }
}
const y8 = 12, td = /* @__PURE__ */ new WeakMap();
class li {
  /**
  Construct a node range. `$from` and `$to` should point into the
  same node until at least the given `depth`, since a node range
  denotes an adjacent set of nodes in a single parent node.
  */
  constructor(e, t, r) {
    this.$from = e, this.$to = t, this.depth = r;
  }
  /**
  The position at the start of the range.
  */
  get start() {
    return this.$from.before(this.depth + 1);
  }
  /**
  The position at the end of the range.
  */
  get end() {
    return this.$to.after(this.depth + 1);
  }
  /**
  The parent node that the range points into.
  */
  get parent() {
    return this.$from.node(this.depth);
  }
  /**
  The start index of the range in the parent node.
  */
  get startIndex() {
    return this.$from.index(this.depth);
  }
  /**
  The end index of the range in the parent node.
  */
  get endIndex() {
    return this.$to.indexAfter(this.depth);
  }
}
const b8 = /* @__PURE__ */ Object.create(null);
let Fn = class ma {
  /**
  @internal
  */
  constructor(e, t, r, s = Ee.none) {
    this.type = e, this.attrs = t, this.marks = s, this.content = r || L.empty;
  }
  /**
  The size of this node, as defined by the integer-based [indexing
  scheme](/docs/guide/#doc.indexing). For text nodes, this is the
  amount of characters. For other leaf nodes, it is one. For
  non-leaf nodes, it is the size of the content plus two (the
  start and end token).
  */
  get nodeSize() {
    return this.isLeaf ? 1 : 2 + this.content.size;
  }
  /**
  The number of children that the node has.
  */
  get childCount() {
    return this.content.childCount;
  }
  /**
  Get the child node at the given index. Raises an error when the
  index is out of range.
  */
  child(e) {
    return this.content.child(e);
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(e) {
    return this.content.maybeChild(e);
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(e) {
    this.content.forEach(e);
  }
  /**
  Invoke a callback for all descendant nodes recursively between
  the given two positions that are relative to start of this
  node's content. The callback is invoked with the node, its
  position relative to the original node (method receiver),
  its parent node, and its child index. When the callback returns
  false for a given node, that node's children will not be
  recursed over. The last parameter can be used to specify a
  starting position to count from.
  */
  nodesBetween(e, t, r, s = 0) {
    this.content.nodesBetween(e, t, r, s, this);
  }
  /**
  Call the given callback for every descendant node. Doesn't
  descend into a node when the callback returns `false`.
  */
  descendants(e) {
    this.nodesBetween(0, this.content.size, e);
  }
  /**
  Concatenates all the text nodes found in this fragment and its
  children.
  */
  get textContent() {
    return this.isLeaf && this.type.spec.leafText ? this.type.spec.leafText(this) : this.textBetween(0, this.content.size, "");
  }
  /**
  Get all text between positions `from` and `to`. When
  `blockSeparator` is given, it will be inserted to separate text
  from different block nodes. If `leafText` is given, it'll be
  inserted for every non-text leaf node encountered, otherwise
  [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
  */
  textBetween(e, t, r, s) {
    return this.content.textBetween(e, t, r, s);
  }
  /**
  Returns this node's first child, or `null` if there are no
  children.
  */
  get firstChild() {
    return this.content.firstChild;
  }
  /**
  Returns this node's last child, or `null` if there are no
  children.
  */
  get lastChild() {
    return this.content.lastChild;
  }
  /**
  Test whether two nodes represent the same piece of document.
  */
  eq(e) {
    return this == e || this.sameMarkup(e) && this.content.eq(e.content);
  }
  /**
  Compare the markup (type, attributes, and marks) of this node to
  those of another. Returns `true` if both have the same markup.
  */
  sameMarkup(e) {
    return this.hasMarkup(e.type, e.attrs, e.marks);
  }
  /**
  Check whether this node's markup correspond to the given type,
  attributes, and marks.
  */
  hasMarkup(e, t, r) {
    return this.type == e && ii(this.attrs, t || e.defaultAttrs || b8) && Ee.sameSet(this.marks, r || Ee.none);
  }
  /**
  Create a new node with the same markup as this node, containing
  the given content (or empty, if no content is given).
  */
  copy(e = null) {
    return e == this.content ? this : new ma(this.type, this.attrs, e, this.marks);
  }
  /**
  Create a copy of this node, with the given set of marks instead
  of the node's own marks.
  */
  mark(e) {
    return e == this.marks ? this : new ma(this.type, this.attrs, this.content, e);
  }
  /**
  Create a copy of this node with only the content between the
  given positions. If `to` is not given, it defaults to the end of
  the node.
  */
  cut(e, t = this.content.size) {
    return e == 0 && t == this.content.size ? this : this.copy(this.content.cut(e, t));
  }
  /**
  Cut out the part of the document between the given positions, and
  return it as a `Slice` object.
  */
  slice(e, t = this.content.size, r = !1) {
    if (e == t)
      return W.empty;
    let s = this.resolve(e), i = this.resolve(t), o = r ? 0 : s.sharedDepth(t), a = s.start(o), c = s.node(o).content.cut(s.pos - a, i.pos - a);
    return new W(c, s.depth - o, i.depth - o);
  }
  /**
  Replace the part of the document between the given positions with
  the given slice. The slice must 'fit', meaning its open sides
  must be able to connect to the surrounding content, and its
  content nodes must be valid children for the node they are placed
  into. If any of this is violated, an error of type
  [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
  */
  replace(e, t, r) {
    return p8(this.resolve(e), this.resolve(t), r);
  }
  /**
  Find the node directly after the given position.
  */
  nodeAt(e) {
    for (let t = this; ; ) {
      let { index: r, offset: s } = t.content.findIndex(e);
      if (t = t.maybeChild(r), !t)
        return null;
      if (s == e || t.isText)
        return t;
      e -= s + 1;
    }
  }
  /**
  Find the (direct) child node after the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childAfter(e) {
    let { index: t, offset: r } = this.content.findIndex(e);
    return { node: this.content.maybeChild(t), index: t, offset: r };
  }
  /**
  Find the (direct) child node before the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childBefore(e) {
    if (e == 0)
      return { node: null, index: 0, offset: 0 };
    let { index: t, offset: r } = this.content.findIndex(e);
    if (r < e)
      return { node: this.content.child(t), index: t, offset: r };
    let s = this.content.child(t - 1);
    return { node: s, index: t - 1, offset: r - s.nodeSize };
  }
  /**
  Resolve the given position in the document, returning an
  [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
  */
  resolve(e) {
    return as.resolveCached(this, e);
  }
  /**
  @internal
  */
  resolveNoCache(e) {
    return as.resolve(this, e);
  }
  /**
  Test whether a given mark or mark type occurs in this document
  between the two given positions.
  */
  rangeHasMark(e, t, r) {
    let s = !1;
    return t > e && this.nodesBetween(e, t, (i) => (r.isInSet(i.marks) && (s = !0), !s)), s;
  }
  /**
  True when this is a block (non-inline node)
  */
  get isBlock() {
    return this.type.isBlock;
  }
  /**
  True when this is a textblock node, a block node with inline
  content.
  */
  get isTextblock() {
    return this.type.isTextblock;
  }
  /**
  True when this node allows inline content.
  */
  get inlineContent() {
    return this.type.inlineContent;
  }
  /**
  True when this is an inline node (a text node or a node that can
  appear among text).
  */
  get isInline() {
    return this.type.isInline;
  }
  /**
  True when this is a text node.
  */
  get isText() {
    return this.type.isText;
  }
  /**
  True when this is a leaf node.
  */
  get isLeaf() {
    return this.type.isLeaf;
  }
  /**
  True when this is an atom, i.e. when it does not have directly
  editable content. This is usually the same as `isLeaf`, but can
  be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
  on a node's spec (typically used when the node is displayed as
  an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
  */
  get isAtom() {
    return this.type.isAtom;
  }
  /**
  Return a string representation of this node for debugging
  purposes.
  */
  toString() {
    if (this.type.spec.toDebugString)
      return this.type.spec.toDebugString(this);
    let e = this.type.name;
    return this.content.size && (e += "(" + this.content.toStringInner() + ")"), Qf(this.marks, e);
  }
  /**
  Get the content match in this node at the given index.
  */
  contentMatchAt(e) {
    let t = this.type.contentMatch.matchFragment(this.content, 0, e);
    if (!t)
      throw new Error("Called contentMatchAt on a node with invalid content");
    return t;
  }
  /**
  Test whether replacing the range between `from` and `to` (by
  child index) with the given replacement fragment (which defaults
  to the empty fragment) would leave the node's content valid. You
  can optionally pass `start` and `end` indices into the
  replacement fragment.
  */
  canReplace(e, t, r = L.empty, s = 0, i = r.childCount) {
    let o = this.contentMatchAt(e).matchFragment(r, s, i), a = o && o.matchFragment(this.content, t);
    if (!a || !a.validEnd)
      return !1;
    for (let l = s; l < i; l++)
      if (!this.type.allowsMarks(r.child(l).marks))
        return !1;
    return !0;
  }
  /**
  Test whether replacing the range `from` to `to` (by index) with
  a node of the given type would leave the node's content valid.
  */
  canReplaceWith(e, t, r, s) {
    if (s && !this.type.allowsMarks(s))
      return !1;
    let i = this.contentMatchAt(e).matchType(r), o = i && i.matchFragment(this.content, t);
    return o ? o.validEnd : !1;
  }
  /**
  Test whether the given node's content could be appended to this
  node. If that node is empty, this will only return true if there
  is at least one node type that can appear in both nodes (to avoid
  merging completely incompatible nodes).
  */
  canAppend(e) {
    return e.content.size ? this.canReplace(this.childCount, this.childCount, e.content) : this.type.compatibleContent(e.type);
  }
  /**
  Check whether this node and its descendants conform to the
  schema, and raise an exception when they do not.
  */
  check() {
    this.type.checkContent(this.content), this.type.checkAttrs(this.attrs);
    let e = Ee.none;
    for (let t = 0; t < this.marks.length; t++) {
      let r = this.marks[t];
      r.type.checkAttrs(r.attrs), e = r.addToSet(e);
    }
    if (!Ee.sameSet(e, this.marks))
      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((t) => t.type.name)}`);
    this.content.forEach((t) => t.check());
  }
  /**
  Return a JSON-serializeable representation of this node.
  */
  toJSON() {
    let e = { type: this.type.name };
    for (let t in this.attrs) {
      e.attrs = this.attrs;
      break;
    }
    return this.content.size && (e.content = this.content.toJSON()), this.marks.length && (e.marks = this.marks.map((t) => t.toJSON())), e;
  }
  /**
  Deserialize a node from its JSON representation.
  */
  static fromJSON(e, t) {
    if (!t)
      throw new RangeError("Invalid input for Node.fromJSON");
    let r;
    if (t.marks) {
      if (!Array.isArray(t.marks))
        throw new RangeError("Invalid mark data for Node.fromJSON");
      r = t.marks.map(e.markFromJSON);
    }
    if (t.type == "text") {
      if (typeof t.text != "string")
        throw new RangeError("Invalid text node in JSON");
      return e.text(t.text, r);
    }
    let s = L.fromJSON(e, t.content), i = e.nodeType(t.type).create(t.attrs, s, r);
    return i.type.checkAttrs(i.attrs), i;
  }
};
Fn.prototype.text = void 0;
class ci extends Fn {
  /**
  @internal
  */
  constructor(e, t, r, s) {
    if (super(e, t, null, s), !r)
      throw new RangeError("Empty text nodes are not allowed");
    this.text = r;
  }
  toString() {
    return this.type.spec.toDebugString ? this.type.spec.toDebugString(this) : Qf(this.marks, JSON.stringify(this.text));
  }
  get textContent() {
    return this.text;
  }
  textBetween(e, t) {
    return this.text.slice(e, t);
  }
  get nodeSize() {
    return this.text.length;
  }
  mark(e) {
    return e == this.marks ? this : new ci(this.type, this.attrs, this.text, e);
  }
  withText(e) {
    return e == this.text ? this : new ci(this.type, this.attrs, e, this.marks);
  }
  cut(e = 0, t = this.text.length) {
    return e == 0 && t == this.text.length ? this : this.withText(this.text.slice(e, t));
  }
  eq(e) {
    return this.sameMarkup(e) && this.text == e.text;
  }
  toJSON() {
    let e = super.toJSON();
    return e.text = this.text, e;
  }
}
function Qf(n, e) {
  for (let t = n.length - 1; t >= 0; t--)
    e = n[t].type.name + "(" + e + ")";
  return e;
}
class Yn {
  /**
  @internal
  */
  constructor(e) {
    this.validEnd = e, this.next = [], this.wrapCache = [];
  }
  /**
  @internal
  */
  static parse(e, t) {
    let r = new v8(e, t);
    if (r.next == null)
      return Yn.empty;
    let s = Xf(r);
    r.next && r.err("Unexpected trailing text");
    let i = A8(S8(s));
    return C8(i, r), i;
  }
  /**
  Match a node type, returning a match after that node if
  successful.
  */
  matchType(e) {
    for (let t = 0; t < this.next.length; t++)
      if (this.next[t].type == e)
        return this.next[t].next;
    return null;
  }
  /**
  Try to match a fragment. Returns the resulting match when
  successful.
  */
  matchFragment(e, t = 0, r = e.childCount) {
    let s = this;
    for (let i = t; s && i < r; i++)
      s = s.matchType(e.child(i).type);
    return s;
  }
  /**
  @internal
  */
  get inlineContent() {
    return this.next.length != 0 && this.next[0].type.isInline;
  }
  /**
  Get the first matching node type at this match position that can
  be generated.
  */
  get defaultType() {
    for (let e = 0; e < this.next.length; e++) {
      let { type: t } = this.next[e];
      if (!(t.isText || t.hasRequiredAttrs()))
        return t;
    }
    return null;
  }
  /**
  @internal
  */
  compatible(e) {
    for (let t = 0; t < this.next.length; t++)
      for (let r = 0; r < e.next.length; r++)
        if (this.next[t].type == e.next[r].type)
          return !0;
    return !1;
  }
  /**
  Try to match the given fragment, and if that fails, see if it can
  be made to match by inserting nodes in front of it. When
  successful, return a fragment of inserted nodes (which may be
  empty if nothing had to be inserted). When `toEnd` is true, only
  return a fragment if the resulting match goes to the end of the
  content expression.
  */
  fillBefore(e, t = !1, r = 0) {
    let s = [this];
    function i(o, a) {
      let l = o.matchFragment(e, r);
      if (l && (!t || l.validEnd))
        return L.from(a.map((c) => c.createAndFill()));
      for (let c = 0; c < o.next.length; c++) {
        let { type: d, next: f } = o.next[c];
        if (!(d.isText || d.hasRequiredAttrs()) && s.indexOf(f) == -1) {
          s.push(f);
          let h = i(f, a.concat(d));
          if (h)
            return h;
        }
      }
      return null;
    }
    return i(this, []);
  }
  /**
  Find a set of wrapping node types that would allow a node of the
  given type to appear at this position. The result may be empty
  (when it fits directly) and will be null when no such wrapping
  exists.
  */
  findWrapping(e) {
    for (let r = 0; r < this.wrapCache.length; r += 2)
      if (this.wrapCache[r] == e)
        return this.wrapCache[r + 1];
    let t = this.computeWrapping(e);
    return this.wrapCache.push(e, t), t;
  }
  /**
  @internal
  */
  computeWrapping(e) {
    let t = /* @__PURE__ */ Object.create(null), r = [{ match: this, type: null, via: null }];
    for (; r.length; ) {
      let s = r.shift(), i = s.match;
      if (i.matchType(e)) {
        let o = [];
        for (let a = s; a.type; a = a.via)
          o.push(a.type);
        return o.reverse();
      }
      for (let o = 0; o < i.next.length; o++) {
        let { type: a, next: l } = i.next[o];
        !a.isLeaf && !a.hasRequiredAttrs() && !(a.name in t) && (!s.type || l.validEnd) && (r.push({ match: a.contentMatch, type: a, via: s }), t[a.name] = !0);
      }
    }
    return null;
  }
  /**
  The number of outgoing edges this node has in the finite
  automaton that describes the content expression.
  */
  get edgeCount() {
    return this.next.length;
  }
  /**
  Get the _n_​th outgoing edge from this node in the finite
  automaton that describes the content expression.
  */
  edge(e) {
    if (e >= this.next.length)
      throw new RangeError(`There's no ${e}th edge in this content match`);
    return this.next[e];
  }
  /**
  @internal
  */
  toString() {
    let e = [];
    function t(r) {
      e.push(r);
      for (let s = 0; s < r.next.length; s++)
        e.indexOf(r.next[s].next) == -1 && t(r.next[s].next);
    }
    return t(this), e.map((r, s) => {
      let i = s + (r.validEnd ? "*" : " ") + " ";
      for (let o = 0; o < r.next.length; o++)
        i += (o ? ", " : "") + r.next[o].type.name + "->" + e.indexOf(r.next[o].next);
      return i;
    }).join(`
`);
  }
}
Yn.empty = new Yn(!0);
class v8 {
  constructor(e, t) {
    this.string = e, this.nodeTypes = t, this.inline = null, this.pos = 0, this.tokens = e.split(/\s*(?=\b|\W|$)/), this.tokens[this.tokens.length - 1] == "" && this.tokens.pop(), this.tokens[0] == "" && this.tokens.shift();
  }
  get next() {
    return this.tokens[this.pos];
  }
  eat(e) {
    return this.next == e && (this.pos++ || !0);
  }
  err(e) {
    throw new SyntaxError(e + " (in content expression '" + this.string + "')");
  }
}
function Xf(n) {
  let e = [];
  do
    e.push(x8(n));
  while (n.eat("|"));
  return e.length == 1 ? e[0] : { type: "choice", exprs: e };
}
function x8(n) {
  let e = [];
  do
    e.push(k8(n));
  while (n.next && n.next != ")" && n.next != "|");
  return e.length == 1 ? e[0] : { type: "seq", exprs: e };
}
function k8(n) {
  let e = M8(n);
  for (; ; )
    if (n.eat("+"))
      e = { type: "plus", expr: e };
    else if (n.eat("*"))
      e = { type: "star", expr: e };
    else if (n.eat("?"))
      e = { type: "opt", expr: e };
    else if (n.eat("{"))
      e = w8(n, e);
    else
      break;
  return e;
}
function nd(n) {
  /\D/.test(n.next) && n.err("Expected number, got '" + n.next + "'");
  let e = Number(n.next);
  return n.pos++, e;
}
function w8(n, e) {
  let t = nd(n), r = t;
  return n.eat(",") && (n.next != "}" ? r = nd(n) : r = -1), n.eat("}") || n.err("Unclosed braced range"), { type: "range", min: t, max: r, expr: e };
}
function E8(n, e) {
  let t = n.nodeTypes, r = t[e];
  if (r)
    return [r];
  let s = [];
  for (let i in t) {
    let o = t[i];
    o.groups.indexOf(e) > -1 && s.push(o);
  }
  return s.length == 0 && n.err("No node type or group '" + e + "' found"), s;
}
function M8(n) {
  if (n.eat("(")) {
    let e = Xf(n);
    return n.eat(")") || n.err("Missing closing paren"), e;
  } else if (/\W/.test(n.next))
    n.err("Unexpected token '" + n.next + "'");
  else {
    let e = E8(n, n.next).map((t) => (n.inline == null ? n.inline = t.isInline : n.inline != t.isInline && n.err("Mixing inline and block content"), { type: "name", value: t }));
    return n.pos++, e.length == 1 ? e[0] : { type: "choice", exprs: e };
  }
}
function S8(n) {
  let e = [[]];
  return s(i(n, 0), t()), e;
  function t() {
    return e.push([]) - 1;
  }
  function r(o, a, l) {
    let c = { term: l, to: a };
    return e[o].push(c), c;
  }
  function s(o, a) {
    o.forEach((l) => l.to = a);
  }
  function i(o, a) {
    if (o.type == "choice")
      return o.exprs.reduce((l, c) => l.concat(i(c, a)), []);
    if (o.type == "seq")
      for (let l = 0; ; l++) {
        let c = i(o.exprs[l], a);
        if (l == o.exprs.length - 1)
          return c;
        s(c, a = t());
      }
    else if (o.type == "star") {
      let l = t();
      return r(a, l), s(i(o.expr, l), l), [r(l)];
    } else if (o.type == "plus") {
      let l = t();
      return s(i(o.expr, a), l), s(i(o.expr, l), l), [r(l)];
    } else {
      if (o.type == "opt")
        return [r(a)].concat(i(o.expr, a));
      if (o.type == "range") {
        let l = a;
        for (let c = 0; c < o.min; c++) {
          let d = t();
          s(i(o.expr, l), d), l = d;
        }
        if (o.max == -1)
          s(i(o.expr, l), l);
        else
          for (let c = o.min; c < o.max; c++) {
            let d = t();
            r(l, d), s(i(o.expr, l), d), l = d;
          }
        return [r(l)];
      } else {
        if (o.type == "name")
          return [r(a, void 0, o.value)];
        throw new Error("Unknown expr type");
      }
    }
  }
}
function e0(n, e) {
  return e - n;
}
function rd(n, e) {
  let t = [];
  return r(e), t.sort(e0);
  function r(s) {
    let i = n[s];
    if (i.length == 1 && !i[0].term)
      return r(i[0].to);
    t.push(s);
    for (let o = 0; o < i.length; o++) {
      let { term: a, to: l } = i[o];
      !a && t.indexOf(l) == -1 && r(l);
    }
  }
}
function A8(n) {
  let e = /* @__PURE__ */ Object.create(null);
  return t(rd(n, 0));
  function t(r) {
    let s = [];
    r.forEach((o) => {
      n[o].forEach(({ term: a, to: l }) => {
        if (!a)
          return;
        let c;
        for (let d = 0; d < s.length; d++)
          s[d][0] == a && (c = s[d][1]);
        rd(n, l).forEach((d) => {
          c || s.push([a, c = []]), c.indexOf(d) == -1 && c.push(d);
        });
      });
    });
    let i = e[r.join(",")] = new Yn(r.indexOf(n.length - 1) > -1);
    for (let o = 0; o < s.length; o++) {
      let a = s[o][1].sort(e0);
      i.next.push({ type: s[o][0], next: e[a.join(",")] || t(a) });
    }
    return i;
  }
}
function C8(n, e) {
  for (let t = 0, r = [n]; t < r.length; t++) {
    let s = r[t], i = !s.validEnd, o = [];
    for (let a = 0; a < s.next.length; a++) {
      let { type: l, next: c } = s.next[a];
      o.push(l.name), i && !(l.isText || l.hasRequiredAttrs()) && (i = !1), r.indexOf(c) == -1 && r.push(c);
    }
    i && e.err("Only non-generatable nodes (" + o.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
  }
}
function t0(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t in n) {
    let r = n[t];
    if (!r.hasDefault)
      return null;
    e[t] = r.default;
  }
  return e;
}
function n0(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  for (let r in n) {
    let s = e && e[r];
    if (s === void 0) {
      let i = n[r];
      if (i.hasDefault)
        s = i.default;
      else
        throw new RangeError("No value supplied for attribute " + r);
    }
    t[r] = s;
  }
  return t;
}
function r0(n, e, t, r) {
  for (let s in e)
    if (!(s in n))
      throw new RangeError(`Unsupported attribute ${s} for ${t} of type ${s}`);
  for (let s in n) {
    let i = n[s];
    i.validate && i.validate(e[s]);
  }
}
function s0(n, e) {
  let t = /* @__PURE__ */ Object.create(null);
  if (e)
    for (let r in e)
      t[r] = new T8(n, r, e[r]);
  return t;
}
let sd = class i0 {
  /**
  @internal
  */
  constructor(e, t, r) {
    this.name = e, this.schema = t, this.spec = r, this.markSet = null, this.groups = r.group ? r.group.split(" ") : [], this.attrs = s0(e, r.attrs), this.defaultAttrs = t0(this.attrs), this.contentMatch = null, this.inlineContent = null, this.isBlock = !(r.inline || e == "text"), this.isText = e == "text";
  }
  /**
  True if this is an inline type.
  */
  get isInline() {
    return !this.isBlock;
  }
  /**
  True if this is a textblock type, a block that contains inline
  content.
  */
  get isTextblock() {
    return this.isBlock && this.inlineContent;
  }
  /**
  True for node types that allow no content.
  */
  get isLeaf() {
    return this.contentMatch == Yn.empty;
  }
  /**
  True when this node is an atom, i.e. when it does not have
  directly editable content.
  */
  get isAtom() {
    return this.isLeaf || !!this.spec.atom;
  }
  /**
  The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
  */
  get whitespace() {
    return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
  }
  /**
  Tells you whether this node type has any required attributes.
  */
  hasRequiredAttrs() {
    for (let e in this.attrs)
      if (this.attrs[e].isRequired)
        return !0;
    return !1;
  }
  /**
  Indicates whether this node allows some of the same content as
  the given node type.
  */
  compatibleContent(e) {
    return this == e || this.contentMatch.compatible(e.contentMatch);
  }
  /**
  @internal
  */
  computeAttrs(e) {
    return !e && this.defaultAttrs ? this.defaultAttrs : n0(this.attrs, e);
  }
  /**
  Create a `Node` of this type. The given attributes are
  checked and defaulted (you can pass `null` to use the type's
  defaults entirely, if no required attributes exist). `content`
  may be a `Fragment`, a node, an array of nodes, or
  `null`. Similarly `marks` may be `null` to default to the empty
  set of marks.
  */
  create(e = null, t, r) {
    if (this.isText)
      throw new Error("NodeType.create can't construct text nodes");
    return new Fn(this, this.computeAttrs(e), L.from(t), Ee.setFrom(r));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
  against the node type's content restrictions, and throw an error
  if it doesn't match.
  */
  createChecked(e = null, t, r) {
    return t = L.from(t), this.checkContent(t), new Fn(this, this.computeAttrs(e), t, Ee.setFrom(r));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
  necessary to add nodes to the start or end of the given fragment
  to make it fit the node. If no fitting wrapping can be found,
  return null. Note that, due to the fact that required nodes can
  always be created, this will always succeed if you pass null or
  `Fragment.empty` as content.
  */
  createAndFill(e = null, t, r) {
    if (e = this.computeAttrs(e), t = L.from(t), t.size) {
      let o = this.contentMatch.fillBefore(t);
      if (!o)
        return null;
      t = o.append(t);
    }
    let s = this.contentMatch.matchFragment(t), i = s && s.fillBefore(L.empty, !0);
    return i ? new Fn(this, e, t.append(i), Ee.setFrom(r)) : null;
  }
  /**
  Returns true if the given fragment is valid content for this node
  type.
  */
  validContent(e) {
    let t = this.contentMatch.matchFragment(e);
    if (!t || !t.validEnd)
      return !1;
    for (let r = 0; r < e.childCount; r++)
      if (!this.allowsMarks(e.child(r).marks))
        return !1;
    return !0;
  }
  /**
  Throws a RangeError if the given fragment is not valid content for this
  node type.
  @internal
  */
  checkContent(e) {
    if (!this.validContent(e))
      throw new RangeError(`Invalid content for node ${this.name}: ${e.toString().slice(0, 50)}`);
  }
  /**
  @internal
  */
  checkAttrs(e) {
    r0(this.attrs, e, "node", this.name);
  }
  /**
  Check whether the given mark type is allowed in this node.
  */
  allowsMarkType(e) {
    return this.markSet == null || this.markSet.indexOf(e) > -1;
  }
  /**
  Test whether the given set of marks are allowed in this node.
  */
  allowsMarks(e) {
    if (this.markSet == null)
      return !0;
    for (let t = 0; t < e.length; t++)
      if (!this.allowsMarkType(e[t].type))
        return !1;
    return !0;
  }
  /**
  Removes the marks that are not allowed in this node from the given set.
  */
  allowedMarks(e) {
    if (this.markSet == null)
      return e;
    let t;
    for (let r = 0; r < e.length; r++)
      this.allowsMarkType(e[r].type) ? t && t.push(e[r]) : t || (t = e.slice(0, r));
    return t ? t.length ? t : Ee.none : e;
  }
  /**
  @internal
  */
  static compile(e, t) {
    let r = /* @__PURE__ */ Object.create(null);
    e.forEach((i, o) => r[i] = new i0(i, t, o));
    let s = t.spec.topNode || "doc";
    if (!r[s])
      throw new RangeError("Schema is missing its top node type ('" + s + "')");
    if (!r.text)
      throw new RangeError("Every schema needs a 'text' type");
    for (let i in r.text.attrs)
      throw new RangeError("The text node type should not have attributes");
    return r;
  }
};
function O8(n, e, t) {
  let r = t.split("|");
  return (s) => {
    let i = s === null ? "null" : typeof s;
    if (r.indexOf(i) < 0)
      throw new RangeError(`Expected value of type ${r} for attribute ${e} on type ${n}, got ${i}`);
  };
}
class T8 {
  constructor(e, t, r) {
    this.hasDefault = Object.prototype.hasOwnProperty.call(r, "default"), this.default = r.default, this.validate = typeof r.validate == "string" ? O8(e, t, r.validate) : r.validate;
  }
  get isRequired() {
    return !this.hasDefault;
  }
}
class io {
  /**
  @internal
  */
  constructor(e, t, r, s) {
    this.name = e, this.rank = t, this.schema = r, this.spec = s, this.attrs = s0(e, s.attrs), this.excluded = null;
    let i = t0(this.attrs);
    this.instance = i ? new Ee(this, i) : null;
  }
  /**
  Create a mark of this type. `attrs` may be `null` or an object
  containing only some of the mark's attributes. The others, if
  they have defaults, will be added.
  */
  create(e = null) {
    return !e && this.instance ? this.instance : new Ee(this, n0(this.attrs, e));
  }
  /**
  @internal
  */
  static compile(e, t) {
    let r = /* @__PURE__ */ Object.create(null), s = 0;
    return e.forEach((i, o) => r[i] = new io(i, s++, t, o)), r;
  }
  /**
  When there is a mark of this type in the given set, a new set
  without it is returned. Otherwise, the input set is returned.
  */
  removeFromSet(e) {
    for (var t = 0; t < e.length; t++)
      e[t].type == this && (e = e.slice(0, t).concat(e.slice(t + 1)), t--);
    return e;
  }
  /**
  Tests whether there is a mark of this type in the given set.
  */
  isInSet(e) {
    for (let t = 0; t < e.length; t++)
      if (e[t].type == this)
        return e[t];
  }
  /**
  @internal
  */
  checkAttrs(e) {
    r0(this.attrs, e, "mark", this.name);
  }
  /**
  Queries whether a given mark type is
  [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
  */
  excludes(e) {
    return this.excluded.indexOf(e) > -1;
  }
}
class o0 {
  /**
  Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
  */
  constructor(e) {
    this.linebreakReplacement = null, this.cached = /* @__PURE__ */ Object.create(null);
    let t = this.spec = {};
    for (let s in e)
      t[s] = e[s];
    t.nodes = We.from(e.nodes), t.marks = We.from(e.marks || {}), this.nodes = sd.compile(this.spec.nodes, this), this.marks = io.compile(this.spec.marks, this);
    let r = /* @__PURE__ */ Object.create(null);
    for (let s in this.nodes) {
      if (s in this.marks)
        throw new RangeError(s + " can not be both a node and a mark");
      let i = this.nodes[s], o = i.spec.content || "", a = i.spec.marks;
      if (i.contentMatch = r[o] || (r[o] = Yn.parse(o, this.nodes)), i.inlineContent = i.contentMatch.inlineContent, i.spec.linebreakReplacement) {
        if (this.linebreakReplacement)
          throw new RangeError("Multiple linebreak nodes defined");
        if (!i.isInline || !i.isLeaf)
          throw new RangeError("Linebreak replacement nodes must be inline leaf nodes");
        this.linebreakReplacement = i;
      }
      i.markSet = a == "_" ? null : a ? id(this, a.split(" ")) : a == "" || !i.inlineContent ? [] : null;
    }
    for (let s in this.marks) {
      let i = this.marks[s], o = i.spec.excludes;
      i.excluded = o == null ? [i] : o == "" ? [] : id(this, o.split(" "));
    }
    this.nodeFromJSON = this.nodeFromJSON.bind(this), this.markFromJSON = this.markFromJSON.bind(this), this.topNodeType = this.nodes[this.spec.topNode || "doc"], this.cached.wrappings = /* @__PURE__ */ Object.create(null);
  }
  /**
  Create a node in this schema. The `type` may be a string or a
  `NodeType` instance. Attributes will be extended with defaults,
  `content` may be a `Fragment`, `null`, a `Node`, or an array of
  nodes.
  */
  node(e, t = null, r, s) {
    if (typeof e == "string")
      e = this.nodeType(e);
    else if (e instanceof sd) {
      if (e.schema != this)
        throw new RangeError("Node type from different schema used (" + e.name + ")");
    } else throw new RangeError("Invalid node type: " + e);
    return e.createChecked(t, r, s);
  }
  /**
  Create a text node in the schema. Empty text nodes are not
  allowed.
  */
  text(e, t) {
    let r = this.nodes.text;
    return new ci(r, r.defaultAttrs, e, Ee.setFrom(t));
  }
  /**
  Create a mark with the given type and attributes.
  */
  mark(e, t) {
    return typeof e == "string" && (e = this.marks[e]), e.create(t);
  }
  /**
  Deserialize a node from its JSON representation. This method is
  bound.
  */
  nodeFromJSON(e) {
    return Fn.fromJSON(this, e);
  }
  /**
  Deserialize a mark from its JSON representation. This method is
  bound.
  */
  markFromJSON(e) {
    return Ee.fromJSON(this, e);
  }
  /**
  @internal
  */
  nodeType(e) {
    let t = this.nodes[e];
    if (!t)
      throw new RangeError("Unknown node type: " + e);
    return t;
  }
}
function id(n, e) {
  let t = [];
  for (let r = 0; r < e.length; r++) {
    let s = e[r], i = n.marks[s], o = i;
    if (i)
      t.push(i);
    else
      for (let a in n.marks) {
        let l = n.marks[a];
        (s == "_" || l.spec.group && l.spec.group.split(" ").indexOf(s) > -1) && t.push(o = l);
      }
    if (!o)
      throw new SyntaxError("Unknown mark type: '" + e[r] + "'");
  }
  return t;
}
function N8(n) {
  return n.tag != null;
}
function _8(n) {
  return n.style != null;
}
class yn {
  /**
  Create a parser that targets the given schema, using the given
  parsing rules.
  */
  constructor(e, t) {
    this.schema = e, this.rules = t, this.tags = [], this.styles = [];
    let r = this.matchedStyles = [];
    t.forEach((s) => {
      if (N8(s))
        this.tags.push(s);
      else if (_8(s)) {
        let i = /[^=]*/.exec(s.style)[0];
        r.indexOf(i) < 0 && r.push(i), this.styles.push(s);
      }
    }), this.normalizeLists = !this.tags.some((s) => {
      if (!/^(ul|ol)\b/.test(s.tag) || !s.node)
        return !1;
      let i = e.nodes[s.node];
      return i.contentMatch.matchType(i);
    });
  }
  /**
  Parse a document from the content of a DOM node.
  */
  parse(e, t = {}) {
    let r = new ad(this, t, !1);
    return r.addAll(e, Ee.none, t.from, t.to), r.finish();
  }
  /**
  Parses the content of the given DOM node, like
  [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
  options. But unlike that method, which produces a whole node,
  this one returns a slice that is open at the sides, meaning that
  the schema constraints aren't applied to the start of nodes to
  the left of the input and the end of nodes at the end.
  */
  parseSlice(e, t = {}) {
    let r = new ad(this, t, !0);
    return r.addAll(e, Ee.none, t.from, t.to), W.maxOpen(r.finish());
  }
  /**
  @internal
  */
  matchTag(e, t, r) {
    for (let s = r ? this.tags.indexOf(r) + 1 : 0; s < this.tags.length; s++) {
      let i = this.tags[s];
      if (R8(e, i.tag) && (i.namespace === void 0 || e.namespaceURI == i.namespace) && (!i.context || t.matchesContext(i.context))) {
        if (i.getAttrs) {
          let o = i.getAttrs(e);
          if (o === !1)
            continue;
          i.attrs = o || void 0;
        }
        return i;
      }
    }
  }
  /**
  @internal
  */
  matchStyle(e, t, r, s) {
    for (let i = s ? this.styles.indexOf(s) + 1 : 0; i < this.styles.length; i++) {
      let o = this.styles[i], a = o.style;
      if (!(a.indexOf(e) != 0 || o.context && !r.matchesContext(o.context) || // Test that the style string either precisely matches the prop,
      // or has an '=' sign after the prop, followed by the given
      // value.
      a.length > e.length && (a.charCodeAt(e.length) != 61 || a.slice(e.length + 1) != t))) {
        if (o.getAttrs) {
          let l = o.getAttrs(t);
          if (l === !1)
            continue;
          o.attrs = l || void 0;
        }
        return o;
      }
    }
  }
  /**
  @internal
  */
  static schemaRules(e) {
    let t = [];
    function r(s) {
      let i = s.priority == null ? 50 : s.priority, o = 0;
      for (; o < t.length; o++) {
        let a = t[o];
        if ((a.priority == null ? 50 : a.priority) < i)
          break;
      }
      t.splice(o, 0, s);
    }
    for (let s in e.marks) {
      let i = e.marks[s].spec.parseDOM;
      i && i.forEach((o) => {
        r(o = ld(o)), o.mark || o.ignore || o.clearMark || (o.mark = s);
      });
    }
    for (let s in e.nodes) {
      let i = e.nodes[s].spec.parseDOM;
      i && i.forEach((o) => {
        r(o = ld(o)), o.node || o.ignore || o.mark || (o.node = s);
      });
    }
    return t;
  }
  /**
  Construct a DOM parser using the parsing rules listed in a
  schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
  [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
  */
  static fromSchema(e) {
    return e.cached.domParser || (e.cached.domParser = new yn(e, yn.schemaRules(e)));
  }
}
const a0 = {
  address: !0,
  article: !0,
  aside: !0,
  blockquote: !0,
  canvas: !0,
  dd: !0,
  div: !0,
  dl: !0,
  fieldset: !0,
  figcaption: !0,
  figure: !0,
  footer: !0,
  form: !0,
  h1: !0,
  h2: !0,
  h3: !0,
  h4: !0,
  h5: !0,
  h6: !0,
  header: !0,
  hgroup: !0,
  hr: !0,
  li: !0,
  noscript: !0,
  ol: !0,
  output: !0,
  p: !0,
  pre: !0,
  section: !0,
  table: !0,
  tfoot: !0,
  ul: !0
}, H8 = {
  head: !0,
  noscript: !0,
  object: !0,
  script: !0,
  style: !0,
  title: !0
}, l0 = { ol: !0, ul: !0 }, di = 1, ui = 2, Yr = 4;
function od(n, e, t) {
  return e != null ? (e ? di : 0) | (e === "full" ? ui : 0) : n && n.whitespace == "pre" ? di | ui : t & ~Yr;
}
class Vs {
  constructor(e, t, r, s, i, o) {
    this.type = e, this.attrs = t, this.marks = r, this.solid = s, this.options = o, this.content = [], this.activeMarks = Ee.none, this.match = i || (o & Yr ? null : e.contentMatch);
  }
  findWrapping(e) {
    if (!this.match) {
      if (!this.type)
        return [];
      let t = this.type.contentMatch.fillBefore(L.from(e));
      if (t)
        this.match = this.type.contentMatch.matchFragment(t);
      else {
        let r = this.type.contentMatch, s;
        return (s = r.findWrapping(e.type)) ? (this.match = r, s) : null;
      }
    }
    return this.match.findWrapping(e.type);
  }
  finish(e) {
    if (!(this.options & di)) {
      let r = this.content[this.content.length - 1], s;
      if (r && r.isText && (s = /[ \t\r\n\u000c]+$/.exec(r.text))) {
        let i = r;
        r.text.length == s[0].length ? this.content.pop() : this.content[this.content.length - 1] = i.withText(i.text.slice(0, i.text.length - s[0].length));
      }
    }
    let t = L.from(this.content);
    return !e && this.match && (t = t.append(this.match.fillBefore(L.empty, !0))), this.type ? this.type.create(this.attrs, t, this.marks) : t;
  }
  inlineContext(e) {
    return this.type ? this.type.inlineContent : this.content.length ? this.content[0].isInline : e.parentNode && !a0.hasOwnProperty(e.parentNode.nodeName.toLowerCase());
  }
}
class ad {
  constructor(e, t, r) {
    this.parser = e, this.options = t, this.isOpen = r, this.open = 0;
    let s = t.topNode, i, o = od(null, t.preserveWhitespace, 0) | (r ? Yr : 0);
    s ? i = new Vs(s.type, s.attrs, Ee.none, !0, t.topMatch || s.type.contentMatch, o) : r ? i = new Vs(null, null, Ee.none, !0, null, o) : i = new Vs(e.schema.topNodeType, null, Ee.none, !0, null, o), this.nodes = [i], this.find = t.findPositions, this.needsBlock = !1;
  }
  get top() {
    return this.nodes[this.open];
  }
  // Add a DOM node to the content. Text is inserted as text node,
  // otherwise, the node is passed to `addElement` or, if it has a
  // `style` attribute, `addElementWithStyles`.
  addDOM(e, t) {
    e.nodeType == 3 ? this.addTextNode(e, t) : e.nodeType == 1 && this.addElement(e, t);
  }
  addTextNode(e, t) {
    let r = e.nodeValue, s = this.top;
    if (s.options & ui || s.inlineContext(e) || /[^ \t\r\n\u000c]/.test(r)) {
      if (s.options & di)
        s.options & ui ? r = r.replace(/\r\n?/g, `
`) : r = r.replace(/\r?\n|\r/g, " ");
      else if (r = r.replace(/[ \t\r\n\u000c]+/g, " "), /^[ \t\r\n\u000c]/.test(r) && this.open == this.nodes.length - 1) {
        let i = s.content[s.content.length - 1], o = e.previousSibling;
        (!i || o && o.nodeName == "BR" || i.isText && /[ \t\r\n\u000c]$/.test(i.text)) && (r = r.slice(1));
      }
      r && this.insertNode(this.parser.schema.text(r), t), this.findInText(e);
    } else
      this.findInside(e);
  }
  // Try to find a handler for the given tag and use that to parse. If
  // none is found, the element's content nodes are added directly.
  addElement(e, t, r) {
    let s = e.nodeName.toLowerCase(), i;
    l0.hasOwnProperty(s) && this.parser.normalizeLists && I8(e);
    let o = this.options.ruleFromNode && this.options.ruleFromNode(e) || (i = this.parser.matchTag(e, this, r));
    if (o ? o.ignore : H8.hasOwnProperty(s))
      this.findInside(e), this.ignoreFallback(e, t);
    else if (!o || o.skip || o.closeParent) {
      o && o.closeParent ? this.open = Math.max(0, this.open - 1) : o && o.skip.nodeType && (e = o.skip);
      let a, l = this.top, c = this.needsBlock;
      if (a0.hasOwnProperty(s))
        l.content.length && l.content[0].isInline && this.open && (this.open--, l = this.top), a = !0, l.type || (this.needsBlock = !0);
      else if (!e.firstChild) {
        this.leafFallback(e, t);
        return;
      }
      let d = o && o.skip ? t : this.readStyles(e, t);
      d && this.addAll(e, d), a && this.sync(l), this.needsBlock = c;
    } else {
      let a = this.readStyles(e, t);
      a && this.addElementByRule(e, o, a, o.consuming === !1 ? i : void 0);
    }
  }
  // Called for leaf DOM nodes that would otherwise be ignored
  leafFallback(e, t) {
    e.nodeName == "BR" && this.top.type && this.top.type.inlineContent && this.addTextNode(e.ownerDocument.createTextNode(`
`), t);
  }
  // Called for ignored nodes
  ignoreFallback(e, t) {
    e.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent) && this.findPlace(this.parser.schema.text("-"), t);
  }
  // Run any style parser associated with the node's styles. Either
  // return an updated array of marks, or null to indicate some of the
  // styles had a rule with `ignore` set.
  readStyles(e, t) {
    let r = e.style;
    if (r && r.length)
      for (let s = 0; s < this.parser.matchedStyles.length; s++) {
        let i = this.parser.matchedStyles[s], o = r.getPropertyValue(i);
        if (o)
          for (let a = void 0; ; ) {
            let l = this.parser.matchStyle(i, o, this, a);
            if (!l)
              break;
            if (l.ignore)
              return null;
            if (l.clearMark ? t = t.filter((c) => !l.clearMark(c)) : t = t.concat(this.parser.schema.marks[l.mark].create(l.attrs)), l.consuming === !1)
              a = l;
            else
              break;
          }
      }
    return t;
  }
  // Look up a handler for the given node. If none are found, return
  // false. Otherwise, apply it, use its return value to drive the way
  // the node's content is wrapped, and return true.
  addElementByRule(e, t, r, s) {
    let i, o;
    if (t.node)
      if (o = this.parser.schema.nodes[t.node], o.isLeaf)
        this.insertNode(o.create(t.attrs), r) || this.leafFallback(e, r);
      else {
        let l = this.enter(o, t.attrs || null, r, t.preserveWhitespace);
        l && (i = !0, r = l);
      }
    else {
      let l = this.parser.schema.marks[t.mark];
      r = r.concat(l.create(t.attrs));
    }
    let a = this.top;
    if (o && o.isLeaf)
      this.findInside(e);
    else if (s)
      this.addElement(e, r, s);
    else if (t.getContent)
      this.findInside(e), t.getContent(e, this.parser.schema).forEach((l) => this.insertNode(l, r));
    else {
      let l = e;
      typeof t.contentElement == "string" ? l = e.querySelector(t.contentElement) : typeof t.contentElement == "function" ? l = t.contentElement(e) : t.contentElement && (l = t.contentElement), this.findAround(e, l, !0), this.addAll(l, r);
    }
    i && this.sync(a) && this.open--;
  }
  // Add all child nodes between `startIndex` and `endIndex` (or the
  // whole node, if not given). If `sync` is passed, use it to
  // synchronize after every block element.
  addAll(e, t, r, s) {
    let i = r || 0;
    for (let o = r ? e.childNodes[r] : e.firstChild, a = s == null ? null : e.childNodes[s]; o != a; o = o.nextSibling, ++i)
      this.findAtPoint(e, i), this.addDOM(o, t);
    this.findAtPoint(e, i);
  }
  // Try to find a way to fit the given node type into the current
  // context. May add intermediate wrappers and/or leave non-solid
  // nodes that we're in.
  findPlace(e, t) {
    let r, s;
    for (let i = this.open; i >= 0; i--) {
      let o = this.nodes[i], a = o.findWrapping(e);
      if (a && (!r || r.length > a.length) && (r = a, s = o, !a.length) || o.solid)
        break;
    }
    if (!r)
      return null;
    this.sync(s);
    for (let i = 0; i < r.length; i++)
      t = this.enterInner(r[i], null, t, !1);
    return t;
  }
  // Try to insert the given node, adjusting the context when needed.
  insertNode(e, t) {
    if (e.isInline && this.needsBlock && !this.top.type) {
      let s = this.textblockFromContext();
      s && (t = this.enterInner(s, null, t));
    }
    let r = this.findPlace(e, t);
    if (r) {
      this.closeExtra();
      let s = this.top;
      s.match && (s.match = s.match.matchType(e.type));
      let i = Ee.none;
      for (let o of r.concat(e.marks))
        (s.type ? s.type.allowsMarkType(o.type) : cd(o.type, e.type)) && (i = o.addToSet(i));
      return s.content.push(e.mark(i)), !0;
    }
    return !1;
  }
  // Try to start a node of the given type, adjusting the context when
  // necessary.
  enter(e, t, r, s) {
    let i = this.findPlace(e.create(t), r);
    return i && (i = this.enterInner(e, t, r, !0, s)), i;
  }
  // Open a node of the given type
  enterInner(e, t, r, s = !1, i) {
    this.closeExtra();
    let o = this.top;
    o.match = o.match && o.match.matchType(e);
    let a = od(e, i, o.options);
    o.options & Yr && o.content.length == 0 && (a |= Yr);
    let l = Ee.none;
    return r = r.filter((c) => (o.type ? o.type.allowsMarkType(c.type) : cd(c.type, e)) ? (l = c.addToSet(l), !1) : !0), this.nodes.push(new Vs(e, t, l, s, null, a)), this.open++, r;
  }
  // Make sure all nodes above this.open are finished and added to
  // their parents
  closeExtra(e = !1) {
    let t = this.nodes.length - 1;
    if (t > this.open) {
      for (; t > this.open; t--)
        this.nodes[t - 1].content.push(this.nodes[t].finish(e));
      this.nodes.length = this.open + 1;
    }
  }
  finish() {
    return this.open = 0, this.closeExtra(this.isOpen), this.nodes[0].finish(this.isOpen || this.options.topOpen);
  }
  sync(e) {
    for (let t = this.open; t >= 0; t--)
      if (this.nodes[t] == e)
        return this.open = t, !0;
    return !1;
  }
  get currentPos() {
    this.closeExtra();
    let e = 0;
    for (let t = this.open; t >= 0; t--) {
      let r = this.nodes[t].content;
      for (let s = r.length - 1; s >= 0; s--)
        e += r[s].nodeSize;
      t && e++;
    }
    return e;
  }
  findAtPoint(e, t) {
    if (this.find)
      for (let r = 0; r < this.find.length; r++)
        this.find[r].node == e && this.find[r].offset == t && (this.find[r].pos = this.currentPos);
  }
  findInside(e) {
    if (this.find)
      for (let t = 0; t < this.find.length; t++)
        this.find[t].pos == null && e.nodeType == 1 && e.contains(this.find[t].node) && (this.find[t].pos = this.currentPos);
  }
  findAround(e, t, r) {
    if (e != t && this.find)
      for (let s = 0; s < this.find.length; s++)
        this.find[s].pos == null && e.nodeType == 1 && e.contains(this.find[s].node) && t.compareDocumentPosition(this.find[s].node) & (r ? 2 : 4) && (this.find[s].pos = this.currentPos);
  }
  findInText(e) {
    if (this.find)
      for (let t = 0; t < this.find.length; t++)
        this.find[t].node == e && (this.find[t].pos = this.currentPos - (e.nodeValue.length - this.find[t].offset));
  }
  // Determines whether the given context string matches this context.
  matchesContext(e) {
    if (e.indexOf("|") > -1)
      return e.split(/\s*\|\s*/).some(this.matchesContext, this);
    let t = e.split("/"), r = this.options.context, s = !this.isOpen && (!r || r.parent.type == this.nodes[0].type), i = -(r ? r.depth + 1 : 0) + (s ? 0 : 1), o = (a, l) => {
      for (; a >= 0; a--) {
        let c = t[a];
        if (c == "") {
          if (a == t.length - 1 || a == 0)
            continue;
          for (; l >= i; l--)
            if (o(a - 1, l))
              return !0;
          return !1;
        } else {
          let d = l > 0 || l == 0 && s ? this.nodes[l].type : r && l >= i ? r.node(l - i).type : null;
          if (!d || d.name != c && d.groups.indexOf(c) == -1)
            return !1;
          l--;
        }
      }
      return !0;
    };
    return o(t.length - 1, this.open);
  }
  textblockFromContext() {
    let e = this.options.context;
    if (e)
      for (let t = e.depth; t >= 0; t--) {
        let r = e.node(t).contentMatchAt(e.indexAfter(t)).defaultType;
        if (r && r.isTextblock && r.defaultAttrs)
          return r;
      }
    for (let t in this.parser.schema.nodes) {
      let r = this.parser.schema.nodes[t];
      if (r.isTextblock && r.defaultAttrs)
        return r;
    }
  }
}
function I8(n) {
  for (let e = n.firstChild, t = null; e; e = e.nextSibling) {
    let r = e.nodeType == 1 ? e.nodeName.toLowerCase() : null;
    r && l0.hasOwnProperty(r) && t ? (t.appendChild(e), e = t) : r == "li" ? t = e : r && (t = null);
  }
}
function R8(n, e) {
  return (n.matches || n.msMatchesSelector || n.webkitMatchesSelector || n.mozMatchesSelector).call(n, e);
}
function ld(n) {
  let e = {};
  for (let t in n)
    e[t] = n[t];
  return e;
}
function cd(n, e) {
  let t = e.schema.nodes;
  for (let r in t) {
    let s = t[r];
    if (!s.allowsMarkType(n))
      continue;
    let i = [], o = (a) => {
      i.push(a);
      for (let l = 0; l < a.edgeCount; l++) {
        let { type: c, next: d } = a.edge(l);
        if (c == e || i.indexOf(d) < 0 && o(d))
          return !0;
      }
    };
    if (o(s.contentMatch))
      return !0;
  }
}
class or {
  /**
  Create a serializer. `nodes` should map node names to functions
  that take a node and return a description of the corresponding
  DOM. `marks` does the same for mark names, but also gets an
  argument that tells it whether the mark's content is block or
  inline content (for typical use, it'll always be inline). A mark
  serializer may be `null` to indicate that marks of that type
  should not be serialized.
  */
  constructor(e, t) {
    this.nodes = e, this.marks = t;
  }
  /**
  Serialize the content of this fragment to a DOM fragment. When
  not in the browser, the `document` option, containing a DOM
  document, should be passed so that the serializer can create
  nodes.
  */
  serializeFragment(e, t = {}, r) {
    r || (r = No(t).createDocumentFragment());
    let s = r, i = [];
    return e.forEach((o) => {
      if (i.length || o.marks.length) {
        let a = 0, l = 0;
        for (; a < i.length && l < o.marks.length; ) {
          let c = o.marks[l];
          if (!this.marks[c.type.name]) {
            l++;
            continue;
          }
          if (!c.eq(i[a][0]) || c.type.spec.spanning === !1)
            break;
          a++, l++;
        }
        for (; a < i.length; )
          s = i.pop()[1];
        for (; l < o.marks.length; ) {
          let c = o.marks[l++], d = this.serializeMark(c, o.isInline, t);
          d && (i.push([c, s]), s.appendChild(d.dom), s = d.contentDOM || d.dom);
        }
      }
      s.appendChild(this.serializeNodeInner(o, t));
    }), r;
  }
  /**
  @internal
  */
  serializeNodeInner(e, t) {
    let { dom: r, contentDOM: s } = Gs(No(t), this.nodes[e.type.name](e), null, e.attrs);
    if (s) {
      if (e.isLeaf)
        throw new RangeError("Content hole not allowed in a leaf node spec");
      this.serializeFragment(e.content, t, s);
    }
    return r;
  }
  /**
  Serialize this node to a DOM node. This can be useful when you
  need to serialize a part of a document, as opposed to the whole
  document. To serialize a whole document, use
  [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
  its [content](https://prosemirror.net/docs/ref/#model.Node.content).
  */
  serializeNode(e, t = {}) {
    let r = this.serializeNodeInner(e, t);
    for (let s = e.marks.length - 1; s >= 0; s--) {
      let i = this.serializeMark(e.marks[s], e.isInline, t);
      i && ((i.contentDOM || i.dom).appendChild(r), r = i.dom);
    }
    return r;
  }
  /**
  @internal
  */
  serializeMark(e, t, r = {}) {
    let s = this.marks[e.type.name];
    return s && Gs(No(r), s(e, t), null, e.attrs);
  }
  static renderSpec(e, t, r = null, s) {
    return Gs(e, t, r, s);
  }
  /**
  Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
  properties in a schema's node and mark specs.
  */
  static fromSchema(e) {
    return e.cached.domSerializer || (e.cached.domSerializer = new or(this.nodesFromSchema(e), this.marksFromSchema(e)));
  }
  /**
  Gather the serializers in a schema's node specs into an object.
  This can be useful as a base to build a custom serializer from.
  */
  static nodesFromSchema(e) {
    let t = dd(e.nodes);
    return t.text || (t.text = (r) => r.text), t;
  }
  /**
  Gather the serializers in a schema's mark specs into an object.
  */
  static marksFromSchema(e) {
    return dd(e.marks);
  }
}
function dd(n) {
  let e = {};
  for (let t in n) {
    let r = n[t].spec.toDOM;
    r && (e[t] = r);
  }
  return e;
}
function No(n) {
  return n.document || window.document;
}
const ud = /* @__PURE__ */ new WeakMap();
function D8(n) {
  let e = ud.get(n);
  return e === void 0 && ud.set(n, e = L8(n)), e;
}
function L8(n) {
  let e = null;
  function t(r) {
    if (r && typeof r == "object")
      if (Array.isArray(r))
        if (typeof r[0] == "string")
          e || (e = []), e.push(r);
        else
          for (let s = 0; s < r.length; s++)
            t(r[s]);
      else
        for (let s in r)
          t(r[s]);
  }
  return t(n), e;
}
function Gs(n, e, t, r) {
  if (typeof e == "string")
    return { dom: n.createTextNode(e) };
  if (e.nodeType != null)
    return { dom: e };
  if (e.dom && e.dom.nodeType != null)
    return e;
  let s = e[0], i;
  if (typeof s != "string")
    throw new RangeError("Invalid array passed to renderSpec");
  if (r && (i = D8(r)) && i.indexOf(e) > -1)
    throw new RangeError("Using an array from an attribute object as a DOM spec. This may be an attempted cross site scripting attack.");
  let o = s.indexOf(" ");
  o > 0 && (t = s.slice(0, o), s = s.slice(o + 1));
  let a, l = t ? n.createElementNS(t, s) : n.createElement(s), c = e[1], d = 1;
  if (c && typeof c == "object" && c.nodeType == null && !Array.isArray(c)) {
    d = 2;
    for (let f in c)
      if (c[f] != null) {
        let h = f.indexOf(" ");
        h > 0 ? l.setAttributeNS(f.slice(0, h), f.slice(h + 1), c[f]) : l.setAttribute(f, c[f]);
      }
  }
  for (let f = d; f < e.length; f++) {
    let h = e[f];
    if (h === 0) {
      if (f < e.length - 1 || f > d)
        throw new RangeError("Content hole must be the only child of its parent node");
      return { dom: l, contentDOM: l };
    } else {
      let { dom: p, contentDOM: m } = Gs(n, h, t, r);
      if (l.appendChild(p), m) {
        if (a)
          throw new RangeError("Multiple content holes");
        a = m;
      }
    }
  }
  return { dom: l, contentDOM: a };
}
const c0 = 65535, d0 = Math.pow(2, 16);
function P8(n, e) {
  return n + e * d0;
}
function fd(n) {
  return n & c0;
}
function $8(n) {
  return (n - (n & c0)) / d0;
}
const u0 = 1, f0 = 2, Ys = 4, h0 = 8;
class ga {
  /**
  @internal
  */
  constructor(e, t, r) {
    this.pos = e, this.delInfo = t, this.recover = r;
  }
  /**
  Tells you whether the position was deleted, that is, whether the
  step removed the token on the side queried (via the `assoc`)
  argument from the document.
  */
  get deleted() {
    return (this.delInfo & h0) > 0;
  }
  /**
  Tells you whether the token before the mapped position was deleted.
  */
  get deletedBefore() {
    return (this.delInfo & (u0 | Ys)) > 0;
  }
  /**
  True when the token after the mapped position was deleted.
  */
  get deletedAfter() {
    return (this.delInfo & (f0 | Ys)) > 0;
  }
  /**
  Tells whether any of the steps mapped through deletes across the
  position (including both the token before and after the
  position).
  */
  get deletedAcross() {
    return (this.delInfo & Ys) > 0;
  }
}
class dt {
  /**
  Create a position map. The modifications to the document are
  represented as an array of numbers, in which each group of three
  represents a modified chunk as `[start, oldSize, newSize]`.
  */
  constructor(e, t = !1) {
    if (this.ranges = e, this.inverted = t, !e.length && dt.empty)
      return dt.empty;
  }
  /**
  @internal
  */
  recover(e) {
    let t = 0, r = fd(e);
    if (!this.inverted)
      for (let s = 0; s < r; s++)
        t += this.ranges[s * 3 + 2] - this.ranges[s * 3 + 1];
    return this.ranges[r * 3] + t + $8(e);
  }
  mapResult(e, t = 1) {
    return this._map(e, t, !1);
  }
  map(e, t = 1) {
    return this._map(e, t, !0);
  }
  /**
  @internal
  */
  _map(e, t, r) {
    let s = 0, i = this.inverted ? 2 : 1, o = this.inverted ? 1 : 2;
    for (let a = 0; a < this.ranges.length; a += 3) {
      let l = this.ranges[a] - (this.inverted ? s : 0);
      if (l > e)
        break;
      let c = this.ranges[a + i], d = this.ranges[a + o], f = l + c;
      if (e <= f) {
        let h = c ? e == l ? -1 : e == f ? 1 : t : t, p = l + s + (h < 0 ? 0 : d);
        if (r)
          return p;
        let m = e == (t < 0 ? l : f) ? null : P8(a / 3, e - l), b = e == l ? f0 : e == f ? u0 : Ys;
        return (t < 0 ? e != l : e != f) && (b |= h0), new ga(p, b, m);
      }
      s += d - c;
    }
    return r ? e + s : new ga(e + s, 0, null);
  }
  /**
  @internal
  */
  touches(e, t) {
    let r = 0, s = fd(t), i = this.inverted ? 2 : 1, o = this.inverted ? 1 : 2;
    for (let a = 0; a < this.ranges.length; a += 3) {
      let l = this.ranges[a] - (this.inverted ? r : 0);
      if (l > e)
        break;
      let c = this.ranges[a + i], d = l + c;
      if (e <= d && a == s * 3)
        return !0;
      r += this.ranges[a + o] - c;
    }
    return !1;
  }
  /**
  Calls the given function on each of the changed ranges included in
  this map.
  */
  forEach(e) {
    let t = this.inverted ? 2 : 1, r = this.inverted ? 1 : 2;
    for (let s = 0, i = 0; s < this.ranges.length; s += 3) {
      let o = this.ranges[s], a = o - (this.inverted ? i : 0), l = o + (this.inverted ? 0 : i), c = this.ranges[s + t], d = this.ranges[s + r];
      e(a, a + c, l, l + d), i += d - c;
    }
  }
  /**
  Create an inverted version of this map. The result can be used to
  map positions in the post-step document to the pre-step document.
  */
  invert() {
    return new dt(this.ranges, !this.inverted);
  }
  /**
  @internal
  */
  toString() {
    return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
  }
  /**
  Create a map that moves all positions by offset `n` (which may be
  negative). This can be useful when applying steps meant for a
  sub-document to a larger document, or vice-versa.
  */
  static offset(e) {
    return e == 0 ? dt.empty : new dt(e < 0 ? [0, -e, 0] : [0, 0, e]);
  }
}
dt.empty = new dt([]);
class kr {
  /**
  Create a new mapping with the given position maps.
  */
  constructor(e = [], t, r = 0, s = e.length) {
    this.maps = e, this.mirror = t, this.from = r, this.to = s;
  }
  /**
  Create a mapping that maps only through a part of this one.
  */
  slice(e = 0, t = this.maps.length) {
    return new kr(this.maps, this.mirror, e, t);
  }
  /**
  @internal
  */
  copy() {
    return new kr(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
  }
  /**
  Add a step map to the end of this mapping. If `mirrors` is
  given, it should be the index of the step map that is the mirror
  image of this one.
  */
  appendMap(e, t) {
    this.to = this.maps.push(e), t != null && this.setMirror(this.maps.length - 1, t);
  }
  /**
  Add all the step maps in a given mapping to this one (preserving
  mirroring information).
  */
  appendMapping(e) {
    for (let t = 0, r = this.maps.length; t < e.maps.length; t++) {
      let s = e.getMirror(t);
      this.appendMap(e.maps[t], s != null && s < t ? r + s : void 0);
    }
  }
  /**
  Finds the offset of the step map that mirrors the map at the
  given offset, in this mapping (as per the second argument to
  `appendMap`).
  */
  getMirror(e) {
    if (this.mirror) {
      for (let t = 0; t < this.mirror.length; t++)
        if (this.mirror[t] == e)
          return this.mirror[t + (t % 2 ? -1 : 1)];
    }
  }
  /**
  @internal
  */
  setMirror(e, t) {
    this.mirror || (this.mirror = []), this.mirror.push(e, t);
  }
  /**
  Append the inverse of the given mapping to this one.
  */
  appendMappingInverted(e) {
    for (let t = e.maps.length - 1, r = this.maps.length + e.maps.length; t >= 0; t--) {
      let s = e.getMirror(t);
      this.appendMap(e.maps[t].invert(), s != null && s > t ? r - s - 1 : void 0);
    }
  }
  /**
  Create an inverted version of this mapping.
  */
  invert() {
    let e = new kr();
    return e.appendMappingInverted(this), e;
  }
  /**
  Map a position through this mapping.
  */
  map(e, t = 1) {
    if (this.mirror)
      return this._map(e, t, !0);
    for (let r = this.from; r < this.to; r++)
      e = this.maps[r].map(e, t);
    return e;
  }
  /**
  Map a position through this mapping, returning a mapping
  result.
  */
  mapResult(e, t = 1) {
    return this._map(e, t, !1);
  }
  /**
  @internal
  */
  _map(e, t, r) {
    let s = 0;
    for (let i = this.from; i < this.to; i++) {
      let o = this.maps[i], a = o.mapResult(e, t);
      if (a.recover != null) {
        let l = this.getMirror(i);
        if (l != null && l > i && l < this.to) {
          i = l, e = this.maps[l].recover(a.recover);
          continue;
        }
      }
      s |= a.delInfo, e = a.pos;
    }
    return r ? e : new ga(e, s, null);
  }
}
const _o = /* @__PURE__ */ Object.create(null);
class et {
  /**
  Get the step map that represents the changes made by this step,
  and which can be used to transform between positions in the old
  and the new document.
  */
  getMap() {
    return dt.empty;
  }
  /**
  Try to merge this step with another one, to be applied directly
  after it. Returns the merged step when possible, null if the
  steps can't be merged.
  */
  merge(e) {
    return null;
  }
  /**
  Deserialize a step from its JSON representation. Will call
  through to the step class' own implementation of this method.
  */
  static fromJSON(e, t) {
    if (!t || !t.stepType)
      throw new RangeError("Invalid input for Step.fromJSON");
    let r = _o[t.stepType];
    if (!r)
      throw new RangeError(`No step type ${t.stepType} defined`);
    return r.fromJSON(e, t);
  }
  /**
  To be able to serialize steps to JSON, each step needs a string
  ID to attach to its JSON representation. Use this method to
  register an ID for your step classes. Try to pick something
  that's unlikely to clash with steps from other modules.
  */
  static jsonID(e, t) {
    if (e in _o)
      throw new RangeError("Duplicate use of step JSON ID " + e);
    return _o[e] = t, t.prototype.jsonID = e, t;
  }
}
class Pe {
  /**
  @internal
  */
  constructor(e, t) {
    this.doc = e, this.failed = t;
  }
  /**
  Create a successful step result.
  */
  static ok(e) {
    return new Pe(e, null);
  }
  /**
  Create a failed step result.
  */
  static fail(e) {
    return new Pe(null, e);
  }
  /**
  Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
  arguments. Create a successful result if it succeeds, and a
  failed one if it throws a `ReplaceError`.
  */
  static fromReplace(e, t, r, s) {
    try {
      return Pe.ok(e.replace(t, r, s));
    } catch (i) {
      if (i instanceof oi)
        return Pe.fail(i.message);
      throw i;
    }
  }
}
function rl(n, e, t) {
  let r = [];
  for (let s = 0; s < n.childCount; s++) {
    let i = n.child(s);
    i.content.size && (i = i.copy(rl(i.content, e, i))), i.isInline && (i = e(i, t, s)), r.push(i);
  }
  return L.fromArray(r);
}
class pn extends et {
  /**
  Create a mark step.
  */
  constructor(e, t, r) {
    super(), this.from = e, this.to = t, this.mark = r;
  }
  apply(e) {
    let t = e.slice(this.from, this.to), r = e.resolve(this.from), s = r.node(r.sharedDepth(this.to)), i = new W(rl(t.content, (o, a) => !o.isAtom || !a.type.allowsMarkType(this.mark.type) ? o : o.mark(this.mark.addToSet(o.marks)), s), t.openStart, t.openEnd);
    return Pe.fromReplace(e, this.from, this.to, i);
  }
  invert() {
    return new Zt(this.from, this.to, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1);
    return t.deleted && r.deleted || t.pos >= r.pos ? null : new pn(t.pos, r.pos, this.mark);
  }
  merge(e) {
    return e instanceof pn && e.mark.eq(this.mark) && this.from <= e.to && this.to >= e.from ? new pn(Math.min(this.from, e.from), Math.max(this.to, e.to), this.mark) : null;
  }
  toJSON() {
    return {
      stepType: "addMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number")
      throw new RangeError("Invalid input for AddMarkStep.fromJSON");
    return new pn(t.from, t.to, e.markFromJSON(t.mark));
  }
}
et.jsonID("addMark", pn);
class Zt extends et {
  /**
  Create a mark-removing step.
  */
  constructor(e, t, r) {
    super(), this.from = e, this.to = t, this.mark = r;
  }
  apply(e) {
    let t = e.slice(this.from, this.to), r = new W(rl(t.content, (s) => s.mark(this.mark.removeFromSet(s.marks)), e), t.openStart, t.openEnd);
    return Pe.fromReplace(e, this.from, this.to, r);
  }
  invert() {
    return new pn(this.from, this.to, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1);
    return t.deleted && r.deleted || t.pos >= r.pos ? null : new Zt(t.pos, r.pos, this.mark);
  }
  merge(e) {
    return e instanceof Zt && e.mark.eq(this.mark) && this.from <= e.to && this.to >= e.from ? new Zt(Math.min(this.from, e.from), Math.max(this.to, e.to), this.mark) : null;
  }
  toJSON() {
    return {
      stepType: "removeMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number")
      throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
    return new Zt(t.from, t.to, e.markFromJSON(t.mark));
  }
}
et.jsonID("removeMark", Zt);
class mn extends et {
  /**
  Create a node mark step.
  */
  constructor(e, t) {
    super(), this.pos = e, this.mark = t;
  }
  apply(e) {
    let t = e.nodeAt(this.pos);
    if (!t)
      return Pe.fail("No node at mark step's position");
    let r = t.type.create(t.attrs, null, this.mark.addToSet(t.marks));
    return Pe.fromReplace(e, this.pos, this.pos + 1, new W(L.from(r), 0, t.isLeaf ? 0 : 1));
  }
  invert(e) {
    let t = e.nodeAt(this.pos);
    if (t) {
      let r = this.mark.addToSet(t.marks);
      if (r.length == t.marks.length) {
        for (let s = 0; s < t.marks.length; s++)
          if (!t.marks[s].isInSet(r))
            return new mn(this.pos, t.marks[s]);
        return new mn(this.pos, this.mark);
      }
    }
    return new Or(this.pos, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.pos, 1);
    return t.deletedAfter ? null : new mn(t.pos, this.mark);
  }
  toJSON() {
    return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.pos != "number")
      throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
    return new mn(t.pos, e.markFromJSON(t.mark));
  }
}
et.jsonID("addNodeMark", mn);
class Or extends et {
  /**
  Create a mark-removing step.
  */
  constructor(e, t) {
    super(), this.pos = e, this.mark = t;
  }
  apply(e) {
    let t = e.nodeAt(this.pos);
    if (!t)
      return Pe.fail("No node at mark step's position");
    let r = t.type.create(t.attrs, null, this.mark.removeFromSet(t.marks));
    return Pe.fromReplace(e, this.pos, this.pos + 1, new W(L.from(r), 0, t.isLeaf ? 0 : 1));
  }
  invert(e) {
    let t = e.nodeAt(this.pos);
    return !t || !this.mark.isInSet(t.marks) ? this : new mn(this.pos, this.mark);
  }
  map(e) {
    let t = e.mapResult(this.pos, 1);
    return t.deletedAfter ? null : new Or(t.pos, this.mark);
  }
  toJSON() {
    return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.pos != "number")
      throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
    return new Or(t.pos, e.markFromJSON(t.mark));
  }
}
et.jsonID("removeNodeMark", Or);
class Ve extends et {
  /**
  The given `slice` should fit the 'gap' between `from` and
  `to`—the depths must line up, and the surrounding nodes must be
  able to be joined with the open sides of the slice. When
  `structure` is true, the step will fail if the content between
  from and to is not just a sequence of closing and then opening
  tokens (this is to guard against rebased replace steps
  overwriting something they weren't supposed to).
  */
  constructor(e, t, r, s = !1) {
    super(), this.from = e, this.to = t, this.slice = r, this.structure = s;
  }
  apply(e) {
    return this.structure && ya(e, this.from, this.to) ? Pe.fail("Structure replace would overwrite content") : Pe.fromReplace(e, this.from, this.to, this.slice);
  }
  getMap() {
    return new dt([this.from, this.to - this.from, this.slice.size]);
  }
  invert(e) {
    return new Ve(this.from, this.from + this.slice.size, e.slice(this.from, this.to));
  }
  map(e) {
    let t = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1);
    return t.deletedAcross && r.deletedAcross ? null : new Ve(t.pos, Math.max(t.pos, r.pos), this.slice);
  }
  merge(e) {
    if (!(e instanceof Ve) || e.structure || this.structure)
      return null;
    if (this.from + this.slice.size == e.from && !this.slice.openEnd && !e.slice.openStart) {
      let t = this.slice.size + e.slice.size == 0 ? W.empty : new W(this.slice.content.append(e.slice.content), this.slice.openStart, e.slice.openEnd);
      return new Ve(this.from, this.to + (e.to - e.from), t, this.structure);
    } else if (e.to == this.from && !this.slice.openStart && !e.slice.openEnd) {
      let t = this.slice.size + e.slice.size == 0 ? W.empty : new W(e.slice.content.append(this.slice.content), e.slice.openStart, this.slice.openEnd);
      return new Ve(e.from, this.to, t, this.structure);
    } else
      return null;
  }
  toJSON() {
    let e = { stepType: "replace", from: this.from, to: this.to };
    return this.slice.size && (e.slice = this.slice.toJSON()), this.structure && (e.structure = !0), e;
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number")
      throw new RangeError("Invalid input for ReplaceStep.fromJSON");
    return new Ve(t.from, t.to, W.fromJSON(e, t.slice), !!t.structure);
  }
}
et.jsonID("replace", Ve);
class je extends et {
  /**
  Create a replace-around step with the given range and gap.
  `insert` should be the point in the slice into which the content
  of the gap should be moved. `structure` has the same meaning as
  it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
  */
  constructor(e, t, r, s, i, o, a = !1) {
    super(), this.from = e, this.to = t, this.gapFrom = r, this.gapTo = s, this.slice = i, this.insert = o, this.structure = a;
  }
  apply(e) {
    if (this.structure && (ya(e, this.from, this.gapFrom) || ya(e, this.gapTo, this.to)))
      return Pe.fail("Structure gap-replace would overwrite content");
    let t = e.slice(this.gapFrom, this.gapTo);
    if (t.openStart || t.openEnd)
      return Pe.fail("Gap is not a flat range");
    let r = this.slice.insertAt(this.insert, t.content);
    return r ? Pe.fromReplace(e, this.from, this.to, r) : Pe.fail("Content does not fit in gap");
  }
  getMap() {
    return new dt([
      this.from,
      this.gapFrom - this.from,
      this.insert,
      this.gapTo,
      this.to - this.gapTo,
      this.slice.size - this.insert
    ]);
  }
  invert(e) {
    let t = this.gapTo - this.gapFrom;
    return new je(this.from, this.from + this.slice.size + t, this.from + this.insert, this.from + this.insert + t, e.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
  }
  map(e) {
    let t = e.mapResult(this.from, 1), r = e.mapResult(this.to, -1), s = this.from == this.gapFrom ? t.pos : e.map(this.gapFrom, -1), i = this.to == this.gapTo ? r.pos : e.map(this.gapTo, 1);
    return t.deletedAcross && r.deletedAcross || s < t.pos || i > r.pos ? null : new je(t.pos, r.pos, s, i, this.slice, this.insert, this.structure);
  }
  toJSON() {
    let e = {
      stepType: "replaceAround",
      from: this.from,
      to: this.to,
      gapFrom: this.gapFrom,
      gapTo: this.gapTo,
      insert: this.insert
    };
    return this.slice.size && (e.slice = this.slice.toJSON()), this.structure && (e.structure = !0), e;
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.from != "number" || typeof t.to != "number" || typeof t.gapFrom != "number" || typeof t.gapTo != "number" || typeof t.insert != "number")
      throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
    return new je(t.from, t.to, t.gapFrom, t.gapTo, W.fromJSON(e, t.slice), t.insert, !!t.structure);
  }
}
et.jsonID("replaceAround", je);
function ya(n, e, t) {
  let r = n.resolve(e), s = t - e, i = r.depth;
  for (; s > 0 && i > 0 && r.indexAfter(i) == r.node(i).childCount; )
    i--, s--;
  if (s > 0) {
    let o = r.node(i).maybeChild(r.indexAfter(i));
    for (; s > 0; ) {
      if (!o || o.isLeaf)
        return !0;
      o = o.firstChild, s--;
    }
  }
  return !1;
}
function Z8(n, e, t, r) {
  let s = [], i = [], o, a;
  n.doc.nodesBetween(e, t, (l, c, d) => {
    if (!l.isInline)
      return;
    let f = l.marks;
    if (!r.isInSet(f) && d.type.allowsMarkType(r.type)) {
      let h = Math.max(c, e), p = Math.min(c + l.nodeSize, t), m = r.addToSet(f);
      for (let b = 0; b < f.length; b++)
        f[b].isInSet(m) || (o && o.to == h && o.mark.eq(f[b]) ? o.to = p : s.push(o = new Zt(h, p, f[b])));
      a && a.to == h ? a.to = p : i.push(a = new pn(h, p, r));
    }
  }), s.forEach((l) => n.step(l)), i.forEach((l) => n.step(l));
}
function V8(n, e, t, r) {
  let s = [], i = 0;
  n.doc.nodesBetween(e, t, (o, a) => {
    if (!o.isInline)
      return;
    i++;
    let l = null;
    if (r instanceof io) {
      let c = o.marks, d;
      for (; d = r.isInSet(c); )
        (l || (l = [])).push(d), c = d.removeFromSet(c);
    } else r ? r.isInSet(o.marks) && (l = [r]) : l = o.marks;
    if (l && l.length) {
      let c = Math.min(a + o.nodeSize, t);
      for (let d = 0; d < l.length; d++) {
        let f = l[d], h;
        for (let p = 0; p < s.length; p++) {
          let m = s[p];
          m.step == i - 1 && f.eq(s[p].style) && (h = m);
        }
        h ? (h.to = c, h.step = i) : s.push({ style: f, from: Math.max(a, e), to: c, step: i });
      }
    }
  }), s.forEach((o) => n.step(new Zt(o.from, o.to, o.style)));
}
function p0(n, e, t, r = t.contentMatch, s = !0) {
  let i = n.doc.nodeAt(e), o = [], a = e + 1;
  for (let l = 0; l < i.childCount; l++) {
    let c = i.child(l), d = a + c.nodeSize, f = r.matchType(c.type);
    if (!f)
      o.push(new Ve(a, d, W.empty));
    else {
      r = f;
      for (let h = 0; h < c.marks.length; h++)
        t.allowsMarkType(c.marks[h].type) || n.step(new Zt(a, d, c.marks[h]));
      if (s && c.isText && t.whitespace != "pre") {
        let h, p = /\r?\n|\r/g, m;
        for (; h = p.exec(c.text); )
          m || (m = new W(L.from(t.schema.text(" ", t.allowedMarks(c.marks))), 0, 0)), o.push(new Ve(a + h.index, a + h.index + h[0].length, m));
      }
    }
    a = d;
  }
  if (!r.validEnd) {
    let l = r.fillBefore(L.empty, !0);
    n.replace(a, a, new W(l, 0, 0));
  }
  for (let l = o.length - 1; l >= 0; l--)
    n.step(o[l]);
}
function z8(n, e, t) {
  return (e == 0 || n.canReplace(e, n.childCount)) && (t == n.childCount || n.canReplace(0, t));
}
function $r(n) {
  let t = n.parent.content.cutByIndex(n.startIndex, n.endIndex);
  for (let r = n.depth; ; --r) {
    let s = n.$from.node(r), i = n.$from.index(r), o = n.$to.indexAfter(r);
    if (r < n.depth && s.canReplace(i, o, t))
      return r;
    if (r == 0 || s.type.spec.isolating || !z8(s, i, o))
      break;
  }
  return null;
}
function j8(n, e, t) {
  let { $from: r, $to: s, depth: i } = e, o = r.before(i + 1), a = s.after(i + 1), l = o, c = a, d = L.empty, f = 0;
  for (let m = i, b = !1; m > t; m--)
    b || r.index(m) > 0 ? (b = !0, d = L.from(r.node(m).copy(d)), f++) : l--;
  let h = L.empty, p = 0;
  for (let m = i, b = !1; m > t; m--)
    b || s.after(m + 1) < s.end(m) ? (b = !0, h = L.from(s.node(m).copy(h)), p++) : c++;
  n.step(new je(l, c, o, a, new W(d.append(h), f, p), d.size - f, !0));
}
function sl(n, e, t = null, r = n) {
  let s = F8(n, e), i = s && B8(r, e);
  return i ? s.map(hd).concat({ type: e, attrs: t }).concat(i.map(hd)) : null;
}
function hd(n) {
  return { type: n, attrs: null };
}
function F8(n, e) {
  let { parent: t, startIndex: r, endIndex: s } = n, i = t.contentMatchAt(r).findWrapping(e);
  if (!i)
    return null;
  let o = i.length ? i[0] : e;
  return t.canReplaceWith(r, s, o) ? i : null;
}
function B8(n, e) {
  let { parent: t, startIndex: r, endIndex: s } = n, i = t.child(r), o = e.contentMatch.findWrapping(i.type);
  if (!o)
    return null;
  let l = (o.length ? o[o.length - 1] : e).contentMatch;
  for (let c = r; l && c < s; c++)
    l = l.matchType(t.child(c).type);
  return !l || !l.validEnd ? null : o;
}
function W8(n, e, t) {
  let r = L.empty;
  for (let o = t.length - 1; o >= 0; o--) {
    if (r.size) {
      let a = t[o].type.contentMatch.matchFragment(r);
      if (!a || !a.validEnd)
        throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
    }
    r = L.from(t[o].type.create(t[o].attrs, r));
  }
  let s = e.start, i = e.end;
  n.step(new je(s, i, s, i, new W(r, 0, 0), t.length, !0));
}
function U8(n, e, t, r, s) {
  if (!r.isTextblock)
    throw new RangeError("Type given to setBlockType should be a textblock");
  let i = n.steps.length;
  n.doc.nodesBetween(e, t, (o, a) => {
    let l = typeof s == "function" ? s(o) : s;
    if (o.isTextblock && !o.hasMarkup(r, l) && J8(n.doc, n.mapping.slice(i).map(a), r)) {
      let c = null;
      if (r.schema.linebreakReplacement) {
        let p = r.whitespace == "pre", m = !!r.contentMatch.matchType(r.schema.linebreakReplacement);
        p && !m ? c = !1 : !p && m && (c = !0);
      }
      c === !1 && q8(n, o, a, i), p0(n, n.mapping.slice(i).map(a, 1), r, void 0, c === null);
      let d = n.mapping.slice(i), f = d.map(a, 1), h = d.map(a + o.nodeSize, 1);
      return n.step(new je(f, h, f + 1, h - 1, new W(L.from(r.create(l, null, o.marks)), 0, 0), 1, !0)), c === !0 && K8(n, o, a, i), !1;
    }
  });
}
function K8(n, e, t, r) {
  e.forEach((s, i) => {
    if (s.isText) {
      let o, a = /\r?\n|\r/g;
      for (; o = a.exec(s.text); ) {
        let l = n.mapping.slice(r).map(t + 1 + i + o.index);
        n.replaceWith(l, l + 1, e.type.schema.linebreakReplacement.create());
      }
    }
  });
}
function q8(n, e, t, r) {
  e.forEach((s, i) => {
    if (s.type == s.type.schema.linebreakReplacement) {
      let o = n.mapping.slice(r).map(t + 1 + i);
      n.replaceWith(o, o + 1, e.type.schema.text(`
`));
    }
  });
}
function J8(n, e, t) {
  let r = n.resolve(e), s = r.index();
  return r.parent.canReplaceWith(s, s + 1, t);
}
function G8(n, e, t, r, s) {
  let i = n.doc.nodeAt(e);
  if (!i)
    throw new RangeError("No node at given position");
  t || (t = i.type);
  let o = t.create(r, null, s || i.marks);
  if (i.isLeaf)
    return n.replaceWith(e, e + i.nodeSize, o);
  if (!t.validContent(i.content))
    throw new RangeError("Invalid content for node type " + t.name);
  n.step(new je(e, e + i.nodeSize, e + 1, e + i.nodeSize - 1, new W(L.from(o), 0, 0), 1, !0));
}
function wr(n, e, t = 1, r) {
  let s = n.resolve(e), i = s.depth - t, o = r && r[r.length - 1] || s.parent;
  if (i < 0 || s.parent.type.spec.isolating || !s.parent.canReplace(s.index(), s.parent.childCount) || !o.type.validContent(s.parent.content.cutByIndex(s.index(), s.parent.childCount)))
    return !1;
  for (let c = s.depth - 1, d = t - 2; c > i; c--, d--) {
    let f = s.node(c), h = s.index(c);
    if (f.type.spec.isolating)
      return !1;
    let p = f.content.cutByIndex(h, f.childCount), m = r && r[d + 1];
    m && (p = p.replaceChild(0, m.type.create(m.attrs)));
    let b = r && r[d] || f;
    if (!f.canReplace(h + 1, f.childCount) || !b.type.validContent(p))
      return !1;
  }
  let a = s.indexAfter(i), l = r && r[0];
  return s.node(i).canReplaceWith(a, a, l ? l.type : s.node(i + 1).type);
}
function Y8(n, e, t = 1, r) {
  let s = n.doc.resolve(e), i = L.empty, o = L.empty;
  for (let a = s.depth, l = s.depth - t, c = t - 1; a > l; a--, c--) {
    i = L.from(s.node(a).copy(i));
    let d = r && r[c];
    o = L.from(d ? d.type.create(d.attrs, o) : s.node(a).copy(o));
  }
  n.step(new Ve(e, e, new W(i.append(o), t, t), !0));
}
function On(n, e) {
  let t = n.resolve(e), r = t.index();
  return m0(t.nodeBefore, t.nodeAfter) && t.parent.canReplace(r, r + 1);
}
function m0(n, e) {
  return !!(n && e && !n.isLeaf && n.canAppend(e));
}
function oo(n, e, t = -1) {
  let r = n.resolve(e);
  for (let s = r.depth; ; s--) {
    let i, o, a = r.index(s);
    if (s == r.depth ? (i = r.nodeBefore, o = r.nodeAfter) : t > 0 ? (i = r.node(s + 1), a++, o = r.node(s).maybeChild(a)) : (i = r.node(s).maybeChild(a - 1), o = r.node(s + 1)), i && !i.isTextblock && m0(i, o) && r.node(s).canReplace(a, a + 1))
      return e;
    if (s == 0)
      break;
    e = t < 0 ? r.before(s) : r.after(s);
  }
}
function Q8(n, e, t) {
  let r = new Ve(e - t, e + t, W.empty, !0);
  n.step(r);
}
function X8(n, e, t) {
  let r = n.resolve(e);
  if (r.parent.canReplaceWith(r.index(), r.index(), t))
    return e;
  if (r.parentOffset == 0)
    for (let s = r.depth - 1; s >= 0; s--) {
      let i = r.index(s);
      if (r.node(s).canReplaceWith(i, i, t))
        return r.before(s + 1);
      if (i > 0)
        return null;
    }
  if (r.parentOffset == r.parent.content.size)
    for (let s = r.depth - 1; s >= 0; s--) {
      let i = r.indexAfter(s);
      if (r.node(s).canReplaceWith(i, i, t))
        return r.after(s + 1);
      if (i < r.node(s).childCount)
        return null;
    }
  return null;
}
function g0(n, e, t) {
  let r = n.resolve(e);
  if (!t.content.size)
    return e;
  let s = t.content;
  for (let i = 0; i < t.openStart; i++)
    s = s.firstChild.content;
  for (let i = 1; i <= (t.openStart == 0 && t.size ? 2 : 1); i++)
    for (let o = r.depth; o >= 0; o--) {
      let a = o == r.depth ? 0 : r.pos <= (r.start(o + 1) + r.end(o + 1)) / 2 ? -1 : 1, l = r.index(o) + (a > 0 ? 1 : 0), c = r.node(o), d = !1;
      if (i == 1)
        d = c.canReplace(l, l, s);
      else {
        let f = c.contentMatchAt(l).findWrapping(s.firstChild.type);
        d = f && c.canReplaceWith(l, l, f[0]);
      }
      if (d)
        return a == 0 ? r.pos : a < 0 ? r.before(o + 1) : r.after(o + 1);
    }
  return null;
}
function ao(n, e, t = e, r = W.empty) {
  if (e == t && !r.size)
    return null;
  let s = n.resolve(e), i = n.resolve(t);
  return y0(s, i, r) ? new Ve(e, t, r) : new e4(s, i, r).fit();
}
function y0(n, e, t) {
  return !t.openStart && !t.openEnd && n.start() == e.start() && n.parent.canReplace(n.index(), e.index(), t.content);
}
class e4 {
  constructor(e, t, r) {
    this.$from = e, this.$to = t, this.unplaced = r, this.frontier = [], this.placed = L.empty;
    for (let s = 0; s <= e.depth; s++) {
      let i = e.node(s);
      this.frontier.push({
        type: i.type,
        match: i.contentMatchAt(e.indexAfter(s))
      });
    }
    for (let s = e.depth; s > 0; s--)
      this.placed = L.from(e.node(s).copy(this.placed));
  }
  get depth() {
    return this.frontier.length - 1;
  }
  fit() {
    for (; this.unplaced.size; ) {
      let c = this.findFittable();
      c ? this.placeNodes(c) : this.openMore() || this.dropNode();
    }
    let e = this.mustMoveInline(), t = this.placed.size - this.depth - this.$from.depth, r = this.$from, s = this.close(e < 0 ? this.$to : r.doc.resolve(e));
    if (!s)
      return null;
    let i = this.placed, o = r.depth, a = s.depth;
    for (; o && a && i.childCount == 1; )
      i = i.firstChild.content, o--, a--;
    let l = new W(i, o, a);
    return e > -1 ? new je(r.pos, e, this.$to.pos, this.$to.end(), l, t) : l.size || r.pos != this.$to.pos ? new Ve(r.pos, s.pos, l) : null;
  }
  // Find a position on the start spine of `this.unplaced` that has
  // content that can be moved somewhere on the frontier. Returns two
  // depths, one for the slice and one for the frontier.
  findFittable() {
    let e = this.unplaced.openStart;
    for (let t = this.unplaced.content, r = 0, s = this.unplaced.openEnd; r < e; r++) {
      let i = t.firstChild;
      if (t.childCount > 1 && (s = 0), i.type.spec.isolating && s <= r) {
        e = r;
        break;
      }
      t = i.content;
    }
    for (let t = 1; t <= 2; t++)
      for (let r = t == 1 ? e : this.unplaced.openStart; r >= 0; r--) {
        let s, i = null;
        r ? (i = Ho(this.unplaced.content, r - 1).firstChild, s = i.content) : s = this.unplaced.content;
        let o = s.firstChild;
        for (let a = this.depth; a >= 0; a--) {
          let { type: l, match: c } = this.frontier[a], d, f = null;
          if (t == 1 && (o ? c.matchType(o.type) || (f = c.fillBefore(L.from(o), !1)) : i && l.compatibleContent(i.type)))
            return { sliceDepth: r, frontierDepth: a, parent: i, inject: f };
          if (t == 2 && o && (d = c.findWrapping(o.type)))
            return { sliceDepth: r, frontierDepth: a, parent: i, wrap: d };
          if (i && c.matchType(i.type))
            break;
        }
      }
  }
  openMore() {
    let { content: e, openStart: t, openEnd: r } = this.unplaced, s = Ho(e, t);
    return !s.childCount || s.firstChild.isLeaf ? !1 : (this.unplaced = new W(e, t + 1, Math.max(r, s.size + t >= e.size - r ? t + 1 : 0)), !0);
  }
  dropNode() {
    let { content: e, openStart: t, openEnd: r } = this.unplaced, s = Ho(e, t);
    if (s.childCount <= 1 && t > 0) {
      let i = e.size - t <= t + s.size;
      this.unplaced = new W(Br(e, t - 1, 1), t - 1, i ? t - 1 : r);
    } else
      this.unplaced = new W(Br(e, t, 1), t, r);
  }
  // Move content from the unplaced slice at `sliceDepth` to the
  // frontier node at `frontierDepth`. Close that frontier node when
  // applicable.
  placeNodes({ sliceDepth: e, frontierDepth: t, parent: r, inject: s, wrap: i }) {
    for (; this.depth > t; )
      this.closeFrontierNode();
    if (i)
      for (let b = 0; b < i.length; b++)
        this.openFrontierNode(i[b]);
    let o = this.unplaced, a = r ? r.content : o.content, l = o.openStart - e, c = 0, d = [], { match: f, type: h } = this.frontier[t];
    if (s) {
      for (let b = 0; b < s.childCount; b++)
        d.push(s.child(b));
      f = f.matchFragment(s);
    }
    let p = a.size + e - (o.content.size - o.openEnd);
    for (; c < a.childCount; ) {
      let b = a.child(c), v = f.matchType(b.type);
      if (!v)
        break;
      c++, (c > 1 || l == 0 || b.content.size) && (f = v, d.push(b0(b.mark(h.allowedMarks(b.marks)), c == 1 ? l : 0, c == a.childCount ? p : -1)));
    }
    let m = c == a.childCount;
    m || (p = -1), this.placed = Wr(this.placed, t, L.from(d)), this.frontier[t].match = f, m && p < 0 && r && r.type == this.frontier[this.depth].type && this.frontier.length > 1 && this.closeFrontierNode();
    for (let b = 0, v = a; b < p; b++) {
      let w = v.lastChild;
      this.frontier.push({ type: w.type, match: w.contentMatchAt(w.childCount) }), v = w.content;
    }
    this.unplaced = m ? e == 0 ? W.empty : new W(Br(o.content, e - 1, 1), e - 1, p < 0 ? o.openEnd : e - 1) : new W(Br(o.content, e, c), o.openStart, o.openEnd);
  }
  mustMoveInline() {
    if (!this.$to.parent.isTextblock)
      return -1;
    let e = this.frontier[this.depth], t;
    if (!e.type.isTextblock || !Io(this.$to, this.$to.depth, e.type, e.match, !1) || this.$to.depth == this.depth && (t = this.findCloseLevel(this.$to)) && t.depth == this.depth)
      return -1;
    let { depth: r } = this.$to, s = this.$to.after(r);
    for (; r > 1 && s == this.$to.end(--r); )
      ++s;
    return s;
  }
  findCloseLevel(e) {
    e: for (let t = Math.min(this.depth, e.depth); t >= 0; t--) {
      let { match: r, type: s } = this.frontier[t], i = t < e.depth && e.end(t + 1) == e.pos + (e.depth - (t + 1)), o = Io(e, t, s, r, i);
      if (o) {
        for (let a = t - 1; a >= 0; a--) {
          let { match: l, type: c } = this.frontier[a], d = Io(e, a, c, l, !0);
          if (!d || d.childCount)
            continue e;
        }
        return { depth: t, fit: o, move: i ? e.doc.resolve(e.after(t + 1)) : e };
      }
    }
  }
  close(e) {
    let t = this.findCloseLevel(e);
    if (!t)
      return null;
    for (; this.depth > t.depth; )
      this.closeFrontierNode();
    t.fit.childCount && (this.placed = Wr(this.placed, t.depth, t.fit)), e = t.move;
    for (let r = t.depth + 1; r <= e.depth; r++) {
      let s = e.node(r), i = s.type.contentMatch.fillBefore(s.content, !0, e.index(r));
      this.openFrontierNode(s.type, s.attrs, i);
    }
    return e;
  }
  openFrontierNode(e, t = null, r) {
    let s = this.frontier[this.depth];
    s.match = s.match.matchType(e), this.placed = Wr(this.placed, this.depth, L.from(e.create(t, r))), this.frontier.push({ type: e, match: e.contentMatch });
  }
  closeFrontierNode() {
    let t = this.frontier.pop().match.fillBefore(L.empty, !0);
    t.childCount && (this.placed = Wr(this.placed, this.frontier.length, t));
  }
}
function Br(n, e, t) {
  return e == 0 ? n.cutByIndex(t, n.childCount) : n.replaceChild(0, n.firstChild.copy(Br(n.firstChild.content, e - 1, t)));
}
function Wr(n, e, t) {
  return e == 0 ? n.append(t) : n.replaceChild(n.childCount - 1, n.lastChild.copy(Wr(n.lastChild.content, e - 1, t)));
}
function Ho(n, e) {
  for (let t = 0; t < e; t++)
    n = n.firstChild.content;
  return n;
}
function b0(n, e, t) {
  if (e <= 0)
    return n;
  let r = n.content;
  return e > 1 && (r = r.replaceChild(0, b0(r.firstChild, e - 1, r.childCount == 1 ? t - 1 : 0))), e > 0 && (r = n.type.contentMatch.fillBefore(r).append(r), t <= 0 && (r = r.append(n.type.contentMatch.matchFragment(r).fillBefore(L.empty, !0)))), n.copy(r);
}
function Io(n, e, t, r, s) {
  let i = n.node(e), o = s ? n.indexAfter(e) : n.index(e);
  if (o == i.childCount && !t.compatibleContent(i.type))
    return null;
  let a = r.fillBefore(i.content, !0, o);
  return a && !t4(t, i.content, o) ? a : null;
}
function t4(n, e, t) {
  for (let r = t; r < e.childCount; r++)
    if (!n.allowsMarks(e.child(r).marks))
      return !0;
  return !1;
}
function n4(n) {
  return n.spec.defining || n.spec.definingForContent;
}
function r4(n, e, t, r) {
  if (!r.size)
    return n.deleteRange(e, t);
  let s = n.doc.resolve(e), i = n.doc.resolve(t);
  if (y0(s, i, r))
    return n.step(new Ve(e, t, r));
  let o = x0(s, n.doc.resolve(t));
  o[o.length - 1] == 0 && o.pop();
  let a = -(s.depth + 1);
  o.unshift(a);
  for (let h = s.depth, p = s.pos - 1; h > 0; h--, p--) {
    let m = s.node(h).type.spec;
    if (m.defining || m.definingAsContext || m.isolating)
      break;
    o.indexOf(h) > -1 ? a = h : s.before(h) == p && o.splice(1, 0, -h);
  }
  let l = o.indexOf(a), c = [], d = r.openStart;
  for (let h = r.content, p = 0; ; p++) {
    let m = h.firstChild;
    if (c.push(m), p == r.openStart)
      break;
    h = m.content;
  }
  for (let h = d - 1; h >= 0; h--) {
    let p = c[h], m = n4(p.type);
    if (m && !p.sameMarkup(s.node(Math.abs(a) - 1)))
      d = h;
    else if (m || !p.type.isTextblock)
      break;
  }
  for (let h = r.openStart; h >= 0; h--) {
    let p = (h + d + 1) % (r.openStart + 1), m = c[p];
    if (m)
      for (let b = 0; b < o.length; b++) {
        let v = o[(b + l) % o.length], w = !0;
        v < 0 && (w = !1, v = -v);
        let H = s.node(v - 1), z = s.index(v - 1);
        if (H.canReplaceWith(z, z, m.type, m.marks))
          return n.replace(s.before(v), w ? i.after(v) : t, new W(v0(r.content, 0, r.openStart, p), p, r.openEnd));
      }
  }
  let f = n.steps.length;
  for (let h = o.length - 1; h >= 0 && (n.replace(e, t, r), !(n.steps.length > f)); h--) {
    let p = o[h];
    p < 0 || (e = s.before(p), t = i.after(p));
  }
}
function v0(n, e, t, r, s) {
  if (e < t) {
    let i = n.firstChild;
    n = n.replaceChild(0, i.copy(v0(i.content, e + 1, t, r, i)));
  }
  if (e > r) {
    let i = s.contentMatchAt(0), o = i.fillBefore(n).append(n);
    n = o.append(i.matchFragment(o).fillBefore(L.empty, !0));
  }
  return n;
}
function s4(n, e, t, r) {
  if (!r.isInline && e == t && n.doc.resolve(e).parent.content.size) {
    let s = X8(n.doc, e, r.type);
    s != null && (e = t = s);
  }
  n.replaceRange(e, t, new W(L.from(r), 0, 0));
}
function i4(n, e, t) {
  let r = n.doc.resolve(e), s = n.doc.resolve(t), i = x0(r, s);
  for (let o = 0; o < i.length; o++) {
    let a = i[o], l = o == i.length - 1;
    if (l && a == 0 || r.node(a).type.contentMatch.validEnd)
      return n.delete(r.start(a), s.end(a));
    if (a > 0 && (l || r.node(a - 1).canReplace(r.index(a - 1), s.indexAfter(a - 1))))
      return n.delete(r.before(a), s.after(a));
  }
  for (let o = 1; o <= r.depth && o <= s.depth; o++)
    if (e - r.start(o) == r.depth - o && t > r.end(o) && s.end(o) - t != s.depth - o)
      return n.delete(r.before(o), t);
  n.delete(e, t);
}
function x0(n, e) {
  let t = [], r = Math.min(n.depth, e.depth);
  for (let s = r; s >= 0; s--) {
    let i = n.start(s);
    if (i < n.pos - (n.depth - s) || e.end(s) > e.pos + (e.depth - s) || n.node(s).type.spec.isolating || e.node(s).type.spec.isolating)
      break;
    (i == e.start(s) || s == n.depth && s == e.depth && n.parent.inlineContent && e.parent.inlineContent && s && e.start(s - 1) == i - 1) && t.push(s);
  }
  return t;
}
class Er extends et {
  /**
  Construct an attribute step.
  */
  constructor(e, t, r) {
    super(), this.pos = e, this.attr = t, this.value = r;
  }
  apply(e) {
    let t = e.nodeAt(this.pos);
    if (!t)
      return Pe.fail("No node at attribute step's position");
    let r = /* @__PURE__ */ Object.create(null);
    for (let i in t.attrs)
      r[i] = t.attrs[i];
    r[this.attr] = this.value;
    let s = t.type.create(r, null, t.marks);
    return Pe.fromReplace(e, this.pos, this.pos + 1, new W(L.from(s), 0, t.isLeaf ? 0 : 1));
  }
  getMap() {
    return dt.empty;
  }
  invert(e) {
    return new Er(this.pos, this.attr, e.nodeAt(this.pos).attrs[this.attr]);
  }
  map(e) {
    let t = e.mapResult(this.pos, 1);
    return t.deletedAfter ? null : new Er(t.pos, this.attr, this.value);
  }
  toJSON() {
    return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
  }
  static fromJSON(e, t) {
    if (typeof t.pos != "number" || typeof t.attr != "string")
      throw new RangeError("Invalid input for AttrStep.fromJSON");
    return new Er(t.pos, t.attr, t.value);
  }
}
et.jsonID("attr", Er);
class ls extends et {
  /**
  Construct an attribute step.
  */
  constructor(e, t) {
    super(), this.attr = e, this.value = t;
  }
  apply(e) {
    let t = /* @__PURE__ */ Object.create(null);
    for (let s in e.attrs)
      t[s] = e.attrs[s];
    t[this.attr] = this.value;
    let r = e.type.create(t, e.content, e.marks);
    return Pe.ok(r);
  }
  getMap() {
    return dt.empty;
  }
  invert(e) {
    return new ls(this.attr, e.attrs[this.attr]);
  }
  map(e) {
    return this;
  }
  toJSON() {
    return { stepType: "docAttr", attr: this.attr, value: this.value };
  }
  static fromJSON(e, t) {
    if (typeof t.attr != "string")
      throw new RangeError("Invalid input for DocAttrStep.fromJSON");
    return new ls(t.attr, t.value);
  }
}
et.jsonID("docAttr", ls);
let Tr = class extends Error {
};
Tr = function n(e) {
  let t = Error.call(this, e);
  return t.__proto__ = n.prototype, t;
};
Tr.prototype = Object.create(Error.prototype);
Tr.prototype.constructor = Tr;
Tr.prototype.name = "TransformError";
class k0 {
  /**
  Create a transform that starts with the given document.
  */
  constructor(e) {
    this.doc = e, this.steps = [], this.docs = [], this.mapping = new kr();
  }
  /**
  The starting document.
  */
  get before() {
    return this.docs.length ? this.docs[0] : this.doc;
  }
  /**
  Apply a new step in this transform, saving the result. Throws an
  error when the step fails.
  */
  step(e) {
    let t = this.maybeStep(e);
    if (t.failed)
      throw new Tr(t.failed);
    return this;
  }
  /**
  Try to apply a step in this transformation, ignoring it if it
  fails. Returns the step result.
  */
  maybeStep(e) {
    let t = e.apply(this.doc);
    return t.failed || this.addStep(e, t.doc), t;
  }
  /**
  True when the document has been changed (when there are any
  steps).
  */
  get docChanged() {
    return this.steps.length > 0;
  }
  /**
  @internal
  */
  addStep(e, t) {
    this.docs.push(this.doc), this.steps.push(e), this.mapping.appendMap(e.getMap()), this.doc = t;
  }
  /**
  Replace the part of the document between `from` and `to` with the
  given `slice`.
  */
  replace(e, t = e, r = W.empty) {
    let s = ao(this.doc, e, t, r);
    return s && this.step(s), this;
  }
  /**
  Replace the given range with the given content, which may be a
  fragment, node, or array of nodes.
  */
  replaceWith(e, t, r) {
    return this.replace(e, t, new W(L.from(r), 0, 0));
  }
  /**
  Delete the content between the given positions.
  */
  delete(e, t) {
    return this.replace(e, t, W.empty);
  }
  /**
  Insert the given content at the given position.
  */
  insert(e, t) {
    return this.replaceWith(e, e, t);
  }
  /**
  Replace a range of the document with a given slice, using
  `from`, `to`, and the slice's
  [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
  than fixed start and end points. This method may grow the
  replaced area or close open nodes in the slice in order to get a
  fit that is more in line with WYSIWYG expectations, by dropping
  fully covered parent nodes of the replaced region when they are
  marked [non-defining as
  context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
  open parent node from the slice that _is_ marked as [defining
  its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
  
  This is the method, for example, to handle paste. The similar
  [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
  primitive tool which will _not_ move the start and end of its given
  range, and is useful in situations where you need more precise
  control over what happens.
  */
  replaceRange(e, t, r) {
    return r4(this, e, t, r), this;
  }
  /**
  Replace the given range with a node, but use `from` and `to` as
  hints, rather than precise positions. When from and to are the same
  and are at the start or end of a parent node in which the given
  node doesn't fit, this method may _move_ them out towards a parent
  that does allow the given node to be placed. When the given range
  completely covers a parent node, this method may completely replace
  that parent node.
  */
  replaceRangeWith(e, t, r) {
    return s4(this, e, t, r), this;
  }
  /**
  Delete the given range, expanding it to cover fully covered
  parent nodes until a valid replace is found.
  */
  deleteRange(e, t) {
    return i4(this, e, t), this;
  }
  /**
  Split the content in the given range off from its parent, if there
  is sibling content before or after it, and move it up the tree to
  the depth specified by `target`. You'll probably want to use
  [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
  sure the lift is valid.
  */
  lift(e, t) {
    return j8(this, e, t), this;
  }
  /**
  Join the blocks around the given position. If depth is 2, their
  last and first siblings are also joined, and so on.
  */
  join(e, t = 1) {
    return Q8(this, e, t), this;
  }
  /**
  Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
  The wrappers are assumed to be valid in this position, and should
  probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
  */
  wrap(e, t) {
    return W8(this, e, t), this;
  }
  /**
  Set the type of all textblocks (partly) between `from` and `to` to
  the given node type with the given attributes.
  */
  setBlockType(e, t = e, r, s = null) {
    return U8(this, e, t, r, s), this;
  }
  /**
  Change the type, attributes, and/or marks of the node at `pos`.
  When `type` isn't given, the existing node type is preserved,
  */
  setNodeMarkup(e, t, r = null, s) {
    return G8(this, e, t, r, s), this;
  }
  /**
  Set a single attribute on a given node to a new value.
  The `pos` addresses the document content. Use `setDocAttribute`
  to set attributes on the document itself.
  */
  setNodeAttribute(e, t, r) {
    return this.step(new Er(e, t, r)), this;
  }
  /**
  Set a single attribute on the document to a new value.
  */
  setDocAttribute(e, t) {
    return this.step(new ls(e, t)), this;
  }
  /**
  Add a mark to the node at position `pos`.
  */
  addNodeMark(e, t) {
    return this.step(new mn(e, t)), this;
  }
  /**
  Remove a mark (or a mark of the given type) from the node at
  position `pos`.
  */
  removeNodeMark(e, t) {
    if (!(t instanceof Ee)) {
      let r = this.doc.nodeAt(e);
      if (!r)
        throw new RangeError("No node at position " + e);
      if (t = t.isInSet(r.marks), !t)
        return this;
    }
    return this.step(new Or(e, t)), this;
  }
  /**
  Split the node at the given position, and optionally, if `depth` is
  greater than one, any number of nodes above that. By default, the
  parts split off will inherit the node type of the original node.
  This can be changed by passing an array of types and attributes to
  use after the split.
  */
  split(e, t = 1, r) {
    return Y8(this, e, t, r), this;
  }
  /**
  Add the given mark to the inline content between `from` and `to`.
  */
  addMark(e, t, r) {
    return Z8(this, e, t, r), this;
  }
  /**
  Remove marks from inline nodes between `from` and `to`. When
  `mark` is a single mark, remove precisely that mark. When it is
  a mark type, remove all marks of that type. When it is null,
  remove all marks of any type.
  */
  removeMark(e, t, r) {
    return V8(this, e, t, r), this;
  }
  /**
  Removes all marks and nodes from the content of the node at
  `pos` that don't match the given new parent node type. Accepts
  an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
  third argument.
  */
  clearIncompatible(e, t, r) {
    return p0(this, e, t, r), this;
  }
}
const Ro = /* @__PURE__ */ Object.create(null);
class ue {
  /**
  Initialize a selection with the head and anchor and ranges. If no
  ranges are given, constructs a single range across `$anchor` and
  `$head`.
  */
  constructor(e, t, r) {
    this.$anchor = e, this.$head = t, this.ranges = r || [new o4(e.min(t), e.max(t))];
  }
  /**
  The selection's anchor, as an unresolved position.
  */
  get anchor() {
    return this.$anchor.pos;
  }
  /**
  The selection's head.
  */
  get head() {
    return this.$head.pos;
  }
  /**
  The lower bound of the selection's main range.
  */
  get from() {
    return this.$from.pos;
  }
  /**
  The upper bound of the selection's main range.
  */
  get to() {
    return this.$to.pos;
  }
  /**
  The resolved lower  bound of the selection's main range.
  */
  get $from() {
    return this.ranges[0].$from;
  }
  /**
  The resolved upper bound of the selection's main range.
  */
  get $to() {
    return this.ranges[0].$to;
  }
  /**
  Indicates whether the selection contains any content.
  */
  get empty() {
    let e = this.ranges;
    for (let t = 0; t < e.length; t++)
      if (e[t].$from.pos != e[t].$to.pos)
        return !1;
    return !0;
  }
  /**
  Get the content of this selection as a slice.
  */
  content() {
    return this.$from.doc.slice(this.from, this.to, !0);
  }
  /**
  Replace the selection with a slice or, if no slice is given,
  delete the selection. Will append to the given transaction.
  */
  replace(e, t = W.empty) {
    let r = t.content.lastChild, s = null;
    for (let a = 0; a < t.openEnd; a++)
      s = r, r = r.lastChild;
    let i = e.steps.length, o = this.ranges;
    for (let a = 0; a < o.length; a++) {
      let { $from: l, $to: c } = o[a], d = e.mapping.slice(i);
      e.replaceRange(d.map(l.pos), d.map(c.pos), a ? W.empty : t), a == 0 && gd(e, i, (r ? r.isInline : s && s.isTextblock) ? -1 : 1);
    }
  }
  /**
  Replace the selection with the given node, appending the changes
  to the given transaction.
  */
  replaceWith(e, t) {
    let r = e.steps.length, s = this.ranges;
    for (let i = 0; i < s.length; i++) {
      let { $from: o, $to: a } = s[i], l = e.mapping.slice(r), c = l.map(o.pos), d = l.map(a.pos);
      i ? e.deleteRange(c, d) : (e.replaceRangeWith(c, d, t), gd(e, r, t.isInline ? -1 : 1));
    }
  }
  /**
  Find a valid cursor or leaf node selection starting at the given
  position and searching back if `dir` is negative, and forward if
  positive. When `textOnly` is true, only consider cursor
  selections. Will return null when no valid selection position is
  found.
  */
  static findFrom(e, t, r = !1) {
    let s = e.parent.inlineContent ? new le(e) : fr(e.node(0), e.parent, e.pos, e.index(), t, r);
    if (s)
      return s;
    for (let i = e.depth - 1; i >= 0; i--) {
      let o = t < 0 ? fr(e.node(0), e.node(i), e.before(i + 1), e.index(i), t, r) : fr(e.node(0), e.node(i), e.after(i + 1), e.index(i) + 1, t, r);
      if (o)
        return o;
    }
    return null;
  }
  /**
  Find a valid cursor or leaf node selection near the given
  position. Searches forward first by default, but if `bias` is
  negative, it will search backwards first.
  */
  static near(e, t = 1) {
    return this.findFrom(e, t) || this.findFrom(e, -t) || new Ot(e.node(0));
  }
  /**
  Find the cursor or leaf node selection closest to the start of
  the given document. Will return an
  [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
  exists.
  */
  static atStart(e) {
    return fr(e, e, 0, 0, 1) || new Ot(e);
  }
  /**
  Find the cursor or leaf node selection closest to the end of the
  given document.
  */
  static atEnd(e) {
    return fr(e, e, e.content.size, e.childCount, -1) || new Ot(e);
  }
  /**
  Deserialize the JSON representation of a selection. Must be
  implemented for custom classes (as a static class method).
  */
  static fromJSON(e, t) {
    if (!t || !t.type)
      throw new RangeError("Invalid input for Selection.fromJSON");
    let r = Ro[t.type];
    if (!r)
      throw new RangeError(`No selection type ${t.type} defined`);
    return r.fromJSON(e, t);
  }
  /**
  To be able to deserialize selections from JSON, custom selection
  classes must register themselves with an ID string, so that they
  can be disambiguated. Try to pick something that's unlikely to
  clash with classes from other modules.
  */
  static jsonID(e, t) {
    if (e in Ro)
      throw new RangeError("Duplicate use of selection JSON ID " + e);
    return Ro[e] = t, t.prototype.jsonID = e, t;
  }
  /**
  Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
  which is a value that can be mapped without having access to a
  current document, and later resolved to a real selection for a
  given document again. (This is used mostly by the history to
  track and restore old selections.) The default implementation of
  this method just converts the selection to a text selection and
  returns the bookmark for that.
  */
  getBookmark() {
    return le.between(this.$anchor, this.$head).getBookmark();
  }
}
ue.prototype.visible = !0;
class o4 {
  /**
  Create a range.
  */
  constructor(e, t) {
    this.$from = e, this.$to = t;
  }
}
let pd = !1;
function md(n) {
  !pd && !n.parent.inlineContent && (pd = !0, console.warn("TextSelection endpoint not pointing into a node with inline content (" + n.parent.type.name + ")"));
}
class le extends ue {
  /**
  Construct a text selection between the given points.
  */
  constructor(e, t = e) {
    md(e), md(t), super(e, t);
  }
  /**
  Returns a resolved position if this is a cursor selection (an
  empty text selection), and null otherwise.
  */
  get $cursor() {
    return this.$anchor.pos == this.$head.pos ? this.$head : null;
  }
  map(e, t) {
    let r = e.resolve(t.map(this.head));
    if (!r.parent.inlineContent)
      return ue.near(r);
    let s = e.resolve(t.map(this.anchor));
    return new le(s.parent.inlineContent ? s : r, r);
  }
  replace(e, t = W.empty) {
    if (super.replace(e, t), t == W.empty) {
      let r = this.$from.marksAcross(this.$to);
      r && e.ensureMarks(r);
    }
  }
  eq(e) {
    return e instanceof le && e.anchor == this.anchor && e.head == this.head;
  }
  getBookmark() {
    return new lo(this.anchor, this.head);
  }
  toJSON() {
    return { type: "text", anchor: this.anchor, head: this.head };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.anchor != "number" || typeof t.head != "number")
      throw new RangeError("Invalid input for TextSelection.fromJSON");
    return new le(e.resolve(t.anchor), e.resolve(t.head));
  }
  /**
  Create a text selection from non-resolved positions.
  */
  static create(e, t, r = t) {
    let s = e.resolve(t);
    return new this(s, r == t ? s : e.resolve(r));
  }
  /**
  Return a text selection that spans the given positions or, if
  they aren't text positions, find a text selection near them.
  `bias` determines whether the method searches forward (default)
  or backwards (negative number) first. Will fall back to calling
  [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
  doesn't contain a valid text position.
  */
  static between(e, t, r) {
    let s = e.pos - t.pos;
    if ((!r || s) && (r = s >= 0 ? 1 : -1), !t.parent.inlineContent) {
      let i = ue.findFrom(t, r, !0) || ue.findFrom(t, -r, !0);
      if (i)
        t = i.$head;
      else
        return ue.near(t, r);
    }
    return e.parent.inlineContent || (s == 0 ? e = t : (e = (ue.findFrom(e, -r, !0) || ue.findFrom(e, r, !0)).$anchor, e.pos < t.pos != s < 0 && (e = t))), new le(e, t);
  }
}
ue.jsonID("text", le);
class lo {
  constructor(e, t) {
    this.anchor = e, this.head = t;
  }
  map(e) {
    return new lo(e.map(this.anchor), e.map(this.head));
  }
  resolve(e) {
    return le.between(e.resolve(this.anchor), e.resolve(this.head));
  }
}
class ne extends ue {
  /**
  Create a node selection. Does not verify the validity of its
  argument.
  */
  constructor(e) {
    let t = e.nodeAfter, r = e.node(0).resolve(e.pos + t.nodeSize);
    super(e, r), this.node = t;
  }
  map(e, t) {
    let { deleted: r, pos: s } = t.mapResult(this.anchor), i = e.resolve(s);
    return r ? ue.near(i) : new ne(i);
  }
  content() {
    return new W(L.from(this.node), 0, 0);
  }
  eq(e) {
    return e instanceof ne && e.anchor == this.anchor;
  }
  toJSON() {
    return { type: "node", anchor: this.anchor };
  }
  getBookmark() {
    return new il(this.anchor);
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.anchor != "number")
      throw new RangeError("Invalid input for NodeSelection.fromJSON");
    return new ne(e.resolve(t.anchor));
  }
  /**
  Create a node selection from non-resolved positions.
  */
  static create(e, t) {
    return new ne(e.resolve(t));
  }
  /**
  Determines whether the given node may be selected as a node
  selection.
  */
  static isSelectable(e) {
    return !e.isText && e.type.spec.selectable !== !1;
  }
}
ne.prototype.visible = !1;
ue.jsonID("node", ne);
class il {
  constructor(e) {
    this.anchor = e;
  }
  map(e) {
    let { deleted: t, pos: r } = e.mapResult(this.anchor);
    return t ? new lo(r, r) : new il(r);
  }
  resolve(e) {
    let t = e.resolve(this.anchor), r = t.nodeAfter;
    return r && ne.isSelectable(r) ? new ne(t) : ue.near(t);
  }
}
class Ot extends ue {
  /**
  Create an all-selection over the given document.
  */
  constructor(e) {
    super(e.resolve(0), e.resolve(e.content.size));
  }
  replace(e, t = W.empty) {
    if (t == W.empty) {
      e.delete(0, e.doc.content.size);
      let r = ue.atStart(e.doc);
      r.eq(e.selection) || e.setSelection(r);
    } else
      super.replace(e, t);
  }
  toJSON() {
    return { type: "all" };
  }
  /**
  @internal
  */
  static fromJSON(e) {
    return new Ot(e);
  }
  map(e) {
    return new Ot(e);
  }
  eq(e) {
    return e instanceof Ot;
  }
  getBookmark() {
    return a4;
  }
}
ue.jsonID("all", Ot);
const a4 = {
  map() {
    return this;
  },
  resolve(n) {
    return new Ot(n);
  }
};
function fr(n, e, t, r, s, i = !1) {
  if (e.inlineContent)
    return le.create(n, t);
  for (let o = r - (s > 0 ? 0 : 1); s > 0 ? o < e.childCount : o >= 0; o += s) {
    let a = e.child(o);
    if (a.isAtom) {
      if (!i && ne.isSelectable(a))
        return ne.create(n, t - (s < 0 ? a.nodeSize : 0));
    } else {
      let l = fr(n, a, t + s, s < 0 ? a.childCount : 0, s, i);
      if (l)
        return l;
    }
    t += a.nodeSize * s;
  }
  return null;
}
function gd(n, e, t) {
  let r = n.steps.length - 1;
  if (r < e)
    return;
  let s = n.steps[r];
  if (!(s instanceof Ve || s instanceof je))
    return;
  let i = n.mapping.maps[r], o;
  i.forEach((a, l, c, d) => {
    o == null && (o = d);
  }), n.setSelection(ue.near(n.doc.resolve(o), t));
}
const yd = 1, zs = 2, bd = 4;
class l4 extends k0 {
  /**
  @internal
  */
  constructor(e) {
    super(e.doc), this.curSelectionFor = 0, this.updated = 0, this.meta = /* @__PURE__ */ Object.create(null), this.time = Date.now(), this.curSelection = e.selection, this.storedMarks = e.storedMarks;
  }
  /**
  The transaction's current selection. This defaults to the editor
  selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
  transaction, but can be overwritten with
  [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
  */
  get selection() {
    return this.curSelectionFor < this.steps.length && (this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor)), this.curSelectionFor = this.steps.length), this.curSelection;
  }
  /**
  Update the transaction's current selection. Will determine the
  selection that the editor gets when the transaction is applied.
  */
  setSelection(e) {
    if (e.$from.doc != this.doc)
      throw new RangeError("Selection passed to setSelection must point at the current document");
    return this.curSelection = e, this.curSelectionFor = this.steps.length, this.updated = (this.updated | yd) & ~zs, this.storedMarks = null, this;
  }
  /**
  Whether the selection was explicitly updated by this transaction.
  */
  get selectionSet() {
    return (this.updated & yd) > 0;
  }
  /**
  Set the current stored marks.
  */
  setStoredMarks(e) {
    return this.storedMarks = e, this.updated |= zs, this;
  }
  /**
  Make sure the current stored marks or, if that is null, the marks
  at the selection, match the given set of marks. Does nothing if
  this is already the case.
  */
  ensureMarks(e) {
    return Ee.sameSet(this.storedMarks || this.selection.$from.marks(), e) || this.setStoredMarks(e), this;
  }
  /**
  Add a mark to the set of stored marks.
  */
  addStoredMark(e) {
    return this.ensureMarks(e.addToSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Remove a mark or mark type from the set of stored marks.
  */
  removeStoredMark(e) {
    return this.ensureMarks(e.removeFromSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Whether the stored marks were explicitly set for this transaction.
  */
  get storedMarksSet() {
    return (this.updated & zs) > 0;
  }
  /**
  @internal
  */
  addStep(e, t) {
    super.addStep(e, t), this.updated = this.updated & ~zs, this.storedMarks = null;
  }
  /**
  Update the timestamp for the transaction.
  */
  setTime(e) {
    return this.time = e, this;
  }
  /**
  Replace the current selection with the given slice.
  */
  replaceSelection(e) {
    return this.selection.replace(this, e), this;
  }
  /**
  Replace the selection with the given node. When `inheritMarks` is
  true and the content is inline, it inherits the marks from the
  place where it is inserted.
  */
  replaceSelectionWith(e, t = !0) {
    let r = this.selection;
    return t && (e = e.mark(this.storedMarks || (r.empty ? r.$from.marks() : r.$from.marksAcross(r.$to) || Ee.none))), r.replaceWith(this, e), this;
  }
  /**
  Delete the selection.
  */
  deleteSelection() {
    return this.selection.replace(this), this;
  }
  /**
  Replace the given range, or the selection if no range is given,
  with a text node containing the given string.
  */
  insertText(e, t, r) {
    let s = this.doc.type.schema;
    if (t == null)
      return e ? this.replaceSelectionWith(s.text(e), !0) : this.deleteSelection();
    {
      if (r == null && (r = t), r = r ?? t, !e)
        return this.deleteRange(t, r);
      let i = this.storedMarks;
      if (!i) {
        let o = this.doc.resolve(t);
        i = r == t ? o.marks() : o.marksAcross(this.doc.resolve(r));
      }
      return this.replaceRangeWith(t, r, s.text(e, i)), this.selection.empty || this.setSelection(ue.near(this.selection.$to)), this;
    }
  }
  /**
  Store a metadata property in this transaction, keyed either by
  name or by plugin.
  */
  setMeta(e, t) {
    return this.meta[typeof e == "string" ? e : e.key] = t, this;
  }
  /**
  Retrieve a metadata property for a given name or plugin.
  */
  getMeta(e) {
    return this.meta[typeof e == "string" ? e : e.key];
  }
  /**
  Returns true if this transaction doesn't contain any metadata,
  and can thus safely be extended.
  */
  get isGeneric() {
    for (let e in this.meta)
      return !1;
    return !0;
  }
  /**
  Indicate that the editor should scroll the selection into view
  when updated to the state produced by this transaction.
  */
  scrollIntoView() {
    return this.updated |= bd, this;
  }
  /**
  True when this transaction has had `scrollIntoView` called on it.
  */
  get scrolledIntoView() {
    return (this.updated & bd) > 0;
  }
}
function vd(n, e) {
  return !e || !n ? n : n.bind(e);
}
class Ur {
  constructor(e, t, r) {
    this.name = e, this.init = vd(t.init, r), this.apply = vd(t.apply, r);
  }
}
const c4 = [
  new Ur("doc", {
    init(n) {
      return n.doc || n.schema.topNodeType.createAndFill();
    },
    apply(n) {
      return n.doc;
    }
  }),
  new Ur("selection", {
    init(n, e) {
      return n.selection || ue.atStart(e.doc);
    },
    apply(n) {
      return n.selection;
    }
  }),
  new Ur("storedMarks", {
    init(n) {
      return n.storedMarks || null;
    },
    apply(n, e, t, r) {
      return r.selection.$cursor ? n.storedMarks : null;
    }
  }),
  new Ur("scrollToSelection", {
    init() {
      return 0;
    },
    apply(n, e) {
      return n.scrolledIntoView ? e + 1 : e;
    }
  })
];
class Do {
  constructor(e, t) {
    this.schema = e, this.plugins = [], this.pluginsByKey = /* @__PURE__ */ Object.create(null), this.fields = c4.slice(), t && t.forEach((r) => {
      if (this.pluginsByKey[r.key])
        throw new RangeError("Adding different instances of a keyed plugin (" + r.key + ")");
      this.plugins.push(r), this.pluginsByKey[r.key] = r, r.spec.state && this.fields.push(new Ur(r.key, r.spec.state, r));
    });
  }
}
class yr {
  /**
  @internal
  */
  constructor(e) {
    this.config = e;
  }
  /**
  The schema of the state's document.
  */
  get schema() {
    return this.config.schema;
  }
  /**
  The plugins that are active in this state.
  */
  get plugins() {
    return this.config.plugins;
  }
  /**
  Apply the given transaction to produce a new state.
  */
  apply(e) {
    return this.applyTransaction(e).state;
  }
  /**
  @internal
  */
  filterTransaction(e, t = -1) {
    for (let r = 0; r < this.config.plugins.length; r++)
      if (r != t) {
        let s = this.config.plugins[r];
        if (s.spec.filterTransaction && !s.spec.filterTransaction.call(s, e, this))
          return !1;
      }
    return !0;
  }
  /**
  Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
  returns the precise transactions that were applied (which might
  be influenced by the [transaction
  hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
  plugins) along with the new state.
  */
  applyTransaction(e) {
    if (!this.filterTransaction(e))
      return { state: this, transactions: [] };
    let t = [e], r = this.applyInner(e), s = null;
    for (; ; ) {
      let i = !1;
      for (let o = 0; o < this.config.plugins.length; o++) {
        let a = this.config.plugins[o];
        if (a.spec.appendTransaction) {
          let l = s ? s[o].n : 0, c = s ? s[o].state : this, d = l < t.length && a.spec.appendTransaction.call(a, l ? t.slice(l) : t, c, r);
          if (d && r.filterTransaction(d, o)) {
            if (d.setMeta("appendedTransaction", e), !s) {
              s = [];
              for (let f = 0; f < this.config.plugins.length; f++)
                s.push(f < o ? { state: r, n: t.length } : { state: this, n: 0 });
            }
            t.push(d), r = r.applyInner(d), i = !0;
          }
          s && (s[o] = { state: r, n: t.length });
        }
      }
      if (!i)
        return { state: r, transactions: t };
    }
  }
  /**
  @internal
  */
  applyInner(e) {
    if (!e.before.eq(this.doc))
      throw new RangeError("Applying a mismatched transaction");
    let t = new yr(this.config), r = this.config.fields;
    for (let s = 0; s < r.length; s++) {
      let i = r[s];
      t[i.name] = i.apply(e, this[i.name], this, t);
    }
    return t;
  }
  /**
  Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
  */
  get tr() {
    return new l4(this);
  }
  /**
  Create a new state.
  */
  static create(e) {
    let t = new Do(e.doc ? e.doc.type.schema : e.schema, e.plugins), r = new yr(t);
    for (let s = 0; s < t.fields.length; s++)
      r[t.fields[s].name] = t.fields[s].init(e, r);
    return r;
  }
  /**
  Create a new state based on this one, but with an adjusted set
  of active plugins. State fields that exist in both sets of
  plugins are kept unchanged. Those that no longer exist are
  dropped, and those that are new are initialized using their
  [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
  configuration object..
  */
  reconfigure(e) {
    let t = new Do(this.schema, e.plugins), r = t.fields, s = new yr(t);
    for (let i = 0; i < r.length; i++) {
      let o = r[i].name;
      s[o] = this.hasOwnProperty(o) ? this[o] : r[i].init(e, s);
    }
    return s;
  }
  /**
  Serialize this state to JSON. If you want to serialize the state
  of plugins, pass an object mapping property names to use in the
  resulting JSON object to plugin objects. The argument may also be
  a string or number, in which case it is ignored, to support the
  way `JSON.stringify` calls `toString` methods.
  */
  toJSON(e) {
    let t = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
    if (this.storedMarks && (t.storedMarks = this.storedMarks.map((r) => r.toJSON())), e && typeof e == "object")
      for (let r in e) {
        if (r == "doc" || r == "selection")
          throw new RangeError("The JSON fields `doc` and `selection` are reserved");
        let s = e[r], i = s.spec.state;
        i && i.toJSON && (t[r] = i.toJSON.call(s, this[s.key]));
      }
    return t;
  }
  /**
  Deserialize a JSON representation of a state. `config` should
  have at least a `schema` field, and should contain array of
  plugins to initialize the state with. `pluginFields` can be used
  to deserialize the state of plugins, by associating plugin
  instances with the property names they use in the JSON object.
  */
  static fromJSON(e, t, r) {
    if (!t)
      throw new RangeError("Invalid input for EditorState.fromJSON");
    if (!e.schema)
      throw new RangeError("Required config field 'schema' missing");
    let s = new Do(e.schema, e.plugins), i = new yr(s);
    return s.fields.forEach((o) => {
      if (o.name == "doc")
        i.doc = Fn.fromJSON(e.schema, t.doc);
      else if (o.name == "selection")
        i.selection = ue.fromJSON(i.doc, t.selection);
      else if (o.name == "storedMarks")
        t.storedMarks && (i.storedMarks = t.storedMarks.map(e.schema.markFromJSON));
      else {
        if (r)
          for (let a in r) {
            let l = r[a], c = l.spec.state;
            if (l.key == o.name && c && c.fromJSON && Object.prototype.hasOwnProperty.call(t, a)) {
              i[o.name] = c.fromJSON.call(l, e, t[a], i);
              return;
            }
          }
        i[o.name] = o.init(e, i);
      }
    }), i;
  }
}
function w0(n, e, t) {
  for (let r in n) {
    let s = n[r];
    s instanceof Function ? s = s.bind(e) : r == "handleDOMEvents" && (s = w0(s, e, {})), t[r] = s;
  }
  return t;
}
class it {
  /**
  Create a plugin.
  */
  constructor(e) {
    this.spec = e, this.props = {}, e.props && w0(e.props, this, this.props), this.key = e.key ? e.key.key : E0("plugin");
  }
  /**
  Extract the plugin's state field from an editor state.
  */
  getState(e) {
    return e[this.key];
  }
}
const Lo = /* @__PURE__ */ Object.create(null);
function E0(n) {
  return n in Lo ? n + "$" + ++Lo[n] : (Lo[n] = 0, n + "$");
}
class Ht {
  /**
  Create a plugin key.
  */
  constructor(e = "key") {
    this.key = E0(e);
  }
  /**
  Get the active plugin with this key, if any, from an editor
  state.
  */
  get(e) {
    return e.config.pluginsByKey[this.key];
  }
  /**
  Get the plugin's state from an editor state.
  */
  getState(e) {
    return e[this.key];
  }
}
const Ue = function(n) {
  for (var e = 0; ; e++)
    if (n = n.previousSibling, !n)
      return e;
}, cs = function(n) {
  let e = n.assignedSlot || n.parentNode;
  return e && e.nodeType == 11 ? e.host : e;
};
let ba = null;
const Yt = function(n, e, t) {
  let r = ba || (ba = document.createRange());
  return r.setEnd(n, t ?? n.nodeValue.length), r.setStart(n, e || 0), r;
}, d4 = function() {
  ba = null;
}, Qn = function(n, e, t, r) {
  return t && (xd(n, e, t, r, -1) || xd(n, e, t, r, 1));
}, u4 = /^(img|br|input|textarea|hr)$/i;
function xd(n, e, t, r, s) {
  for (; ; ) {
    if (n == t && e == r)
      return !0;
    if (e == (s < 0 ? 0 : $t(n))) {
      let i = n.parentNode;
      if (!i || i.nodeType != 1 || Rs(n) || u4.test(n.nodeName) || n.contentEditable == "false")
        return !1;
      e = Ue(n) + (s < 0 ? 0 : 1), n = i;
    } else if (n.nodeType == 1) {
      if (n = n.childNodes[e + (s < 0 ? -1 : 0)], n.contentEditable == "false")
        return !1;
      e = s < 0 ? $t(n) : 0;
    } else
      return !1;
  }
}
function $t(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function f4(n, e) {
  for (; ; ) {
    if (n.nodeType == 3 && e)
      return n;
    if (n.nodeType == 1 && e > 0) {
      if (n.contentEditable == "false")
        return null;
      n = n.childNodes[e - 1], e = $t(n);
    } else if (n.parentNode && !Rs(n))
      e = Ue(n), n = n.parentNode;
    else
      return null;
  }
}
function h4(n, e) {
  for (; ; ) {
    if (n.nodeType == 3 && e < n.nodeValue.length)
      return n;
    if (n.nodeType == 1 && e < n.childNodes.length) {
      if (n.contentEditable == "false")
        return null;
      n = n.childNodes[e], e = 0;
    } else if (n.parentNode && !Rs(n))
      e = Ue(n) + 1, n = n.parentNode;
    else
      return null;
  }
}
function p4(n, e, t) {
  for (let r = e == 0, s = e == $t(n); r || s; ) {
    if (n == t)
      return !0;
    let i = Ue(n);
    if (n = n.parentNode, !n)
      return !1;
    r = r && i == 0, s = s && i == $t(n);
  }
}
function Rs(n) {
  let e;
  for (let t = n; t && !(e = t.pmViewDesc); t = t.parentNode)
    ;
  return e && e.node && e.node.isBlock && (e.dom == n || e.contentDOM == n);
}
const co = function(n) {
  return n.focusNode && Qn(n.focusNode, n.focusOffset, n.anchorNode, n.anchorOffset);
};
function Rn(n, e) {
  let t = document.createEvent("Event");
  return t.initEvent("keydown", !0, !0), t.keyCode = n, t.key = t.code = e, t;
}
function m4(n) {
  let e = n.activeElement;
  for (; e && e.shadowRoot; )
    e = e.shadowRoot.activeElement;
  return e;
}
function g4(n, e, t) {
  if (n.caretPositionFromPoint)
    try {
      let r = n.caretPositionFromPoint(e, t);
      if (r)
        return { node: r.offsetNode, offset: r.offset };
    } catch {
    }
  if (n.caretRangeFromPoint) {
    let r = n.caretRangeFromPoint(e, t);
    if (r)
      return { node: r.startContainer, offset: r.startOffset };
  }
}
const zt = typeof navigator < "u" ? navigator : null, kd = typeof document < "u" ? document : null, Tn = zt && zt.userAgent || "", va = /Edge\/(\d+)/.exec(Tn), M0 = /MSIE \d/.exec(Tn), xa = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(Tn), at = !!(M0 || xa || va), bn = M0 ? document.documentMode : xa ? +xa[1] : va ? +va[1] : 0, Nt = !at && /gecko\/(\d+)/i.test(Tn);
Nt && +(/Firefox\/(\d+)/.exec(Tn) || [0, 0])[1];
const ka = !at && /Chrome\/(\d+)/.exec(Tn), Ye = !!ka, S0 = ka ? +ka[1] : 0, tt = !at && !!zt && /Apple Computer/.test(zt.vendor), Nr = tt && (/Mobile\/\w+/.test(Tn) || !!zt && zt.maxTouchPoints > 2), xt = Nr || (zt ? /Mac/.test(zt.platform) : !1), y4 = zt ? /Win/.test(zt.platform) : !1, St = /Android \d/.test(Tn), Ds = !!kd && "webkitFontSmoothing" in kd.documentElement.style, b4 = Ds ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;
function v4(n) {
  let e = n.defaultView && n.defaultView.visualViewport;
  return e ? {
    left: 0,
    right: e.width,
    top: 0,
    bottom: e.height
  } : {
    left: 0,
    right: n.documentElement.clientWidth,
    top: 0,
    bottom: n.documentElement.clientHeight
  };
}
function qt(n, e) {
  return typeof n == "number" ? n : n[e];
}
function x4(n) {
  let e = n.getBoundingClientRect(), t = e.width / n.offsetWidth || 1, r = e.height / n.offsetHeight || 1;
  return {
    left: e.left,
    right: e.left + n.clientWidth * t,
    top: e.top,
    bottom: e.top + n.clientHeight * r
  };
}
function wd(n, e, t) {
  let r = n.someProp("scrollThreshold") || 0, s = n.someProp("scrollMargin") || 5, i = n.dom.ownerDocument;
  for (let o = t || n.dom; o; o = cs(o)) {
    if (o.nodeType != 1)
      continue;
    let a = o, l = a == i.body, c = l ? v4(i) : x4(a), d = 0, f = 0;
    if (e.top < c.top + qt(r, "top") ? f = -(c.top - e.top + qt(s, "top")) : e.bottom > c.bottom - qt(r, "bottom") && (f = e.bottom - e.top > c.bottom - c.top ? e.top + qt(s, "top") - c.top : e.bottom - c.bottom + qt(s, "bottom")), e.left < c.left + qt(r, "left") ? d = -(c.left - e.left + qt(s, "left")) : e.right > c.right - qt(r, "right") && (d = e.right - c.right + qt(s, "right")), d || f)
      if (l)
        i.defaultView.scrollBy(d, f);
      else {
        let h = a.scrollLeft, p = a.scrollTop;
        f && (a.scrollTop += f), d && (a.scrollLeft += d);
        let m = a.scrollLeft - h, b = a.scrollTop - p;
        e = { left: e.left - m, top: e.top - b, right: e.right - m, bottom: e.bottom - b };
      }
    if (l || /^(fixed|sticky)$/.test(getComputedStyle(o).position))
      break;
  }
}
function k4(n) {
  let e = n.dom.getBoundingClientRect(), t = Math.max(0, e.top), r, s;
  for (let i = (e.left + e.right) / 2, o = t + 1; o < Math.min(innerHeight, e.bottom); o += 5) {
    let a = n.root.elementFromPoint(i, o);
    if (!a || a == n.dom || !n.dom.contains(a))
      continue;
    let l = a.getBoundingClientRect();
    if (l.top >= t - 20) {
      r = a, s = l.top;
      break;
    }
  }
  return { refDOM: r, refTop: s, stack: A0(n.dom) };
}
function A0(n) {
  let e = [], t = n.ownerDocument;
  for (let r = n; r && (e.push({ dom: r, top: r.scrollTop, left: r.scrollLeft }), n != t); r = cs(r))
    ;
  return e;
}
function w4({ refDOM: n, refTop: e, stack: t }) {
  let r = n ? n.getBoundingClientRect().top : 0;
  C0(t, r == 0 ? 0 : r - e);
}
function C0(n, e) {
  for (let t = 0; t < n.length; t++) {
    let { dom: r, top: s, left: i } = n[t];
    r.scrollTop != s + e && (r.scrollTop = s + e), r.scrollLeft != i && (r.scrollLeft = i);
  }
}
let lr = null;
function E4(n) {
  if (n.setActive)
    return n.setActive();
  if (lr)
    return n.focus(lr);
  let e = A0(n);
  n.focus(lr == null ? {
    get preventScroll() {
      return lr = { preventScroll: !0 }, !0;
    }
  } : void 0), lr || (lr = !1, C0(e, 0));
}
function O0(n, e) {
  let t, r = 2e8, s, i = 0, o = e.top, a = e.top, l, c;
  for (let d = n.firstChild, f = 0; d; d = d.nextSibling, f++) {
    let h;
    if (d.nodeType == 1)
      h = d.getClientRects();
    else if (d.nodeType == 3)
      h = Yt(d).getClientRects();
    else
      continue;
    for (let p = 0; p < h.length; p++) {
      let m = h[p];
      if (m.top <= o && m.bottom >= a) {
        o = Math.max(m.bottom, o), a = Math.min(m.top, a);
        let b = m.left > e.left ? m.left - e.left : m.right < e.left ? e.left - m.right : 0;
        if (b < r) {
          t = d, r = b, s = b && t.nodeType == 3 ? {
            left: m.right < e.left ? m.right : m.left,
            top: e.top
          } : e, d.nodeType == 1 && b && (i = f + (e.left >= (m.left + m.right) / 2 ? 1 : 0));
          continue;
        }
      } else m.top > e.top && !l && m.left <= e.left && m.right >= e.left && (l = d, c = { left: Math.max(m.left, Math.min(m.right, e.left)), top: m.top });
      !t && (e.left >= m.right && e.top >= m.top || e.left >= m.left && e.top >= m.bottom) && (i = f + 1);
    }
  }
  return !t && l && (t = l, s = c, r = 0), t && t.nodeType == 3 ? M4(t, s) : !t || r && t.nodeType == 1 ? { node: n, offset: i } : O0(t, s);
}
function M4(n, e) {
  let t = n.nodeValue.length, r = document.createRange();
  for (let s = 0; s < t; s++) {
    r.setEnd(n, s + 1), r.setStart(n, s);
    let i = an(r, 1);
    if (i.top != i.bottom && ol(e, i))
      return { node: n, offset: s + (e.left >= (i.left + i.right) / 2 ? 1 : 0) };
  }
  return { node: n, offset: 0 };
}
function ol(n, e) {
  return n.left >= e.left - 1 && n.left <= e.right + 1 && n.top >= e.top - 1 && n.top <= e.bottom + 1;
}
function S4(n, e) {
  let t = n.parentNode;
  return t && /^li$/i.test(t.nodeName) && e.left < n.getBoundingClientRect().left ? t : n;
}
function A4(n, e, t) {
  let { node: r, offset: s } = O0(e, t), i = -1;
  if (r.nodeType == 1 && !r.firstChild) {
    let o = r.getBoundingClientRect();
    i = o.left != o.right && t.left > (o.left + o.right) / 2 ? 1 : -1;
  }
  return n.docView.posFromDOM(r, s, i);
}
function C4(n, e, t, r) {
  let s = -1;
  for (let i = e, o = !1; i != n.dom; ) {
    let a = n.docView.nearestDesc(i, !0);
    if (!a)
      return null;
    if (a.dom.nodeType == 1 && (a.node.isBlock && a.parent || !a.contentDOM)) {
      let l = a.dom.getBoundingClientRect();
      if (a.node.isBlock && a.parent && (!o && l.left > r.left || l.top > r.top ? s = a.posBefore : (!o && l.right < r.left || l.bottom < r.top) && (s = a.posAfter), o = !0), !a.contentDOM && s < 0 && !a.node.isText)
        return (a.node.isBlock ? r.top < (l.top + l.bottom) / 2 : r.left < (l.left + l.right) / 2) ? a.posBefore : a.posAfter;
    }
    i = a.dom.parentNode;
  }
  return s > -1 ? s : n.docView.posFromDOM(e, t, -1);
}
function T0(n, e, t) {
  let r = n.childNodes.length;
  if (r && t.top < t.bottom)
    for (let s = Math.max(0, Math.min(r - 1, Math.floor(r * (e.top - t.top) / (t.bottom - t.top)) - 2)), i = s; ; ) {
      let o = n.childNodes[i];
      if (o.nodeType == 1) {
        let a = o.getClientRects();
        for (let l = 0; l < a.length; l++) {
          let c = a[l];
          if (ol(e, c))
            return T0(o, e, c);
        }
      }
      if ((i = (i + 1) % r) == s)
        break;
    }
  return n;
}
function O4(n, e) {
  let t = n.dom.ownerDocument, r, s = 0, i = g4(t, e.left, e.top);
  i && ({ node: r, offset: s } = i);
  let o = (n.root.elementFromPoint ? n.root : t).elementFromPoint(e.left, e.top), a;
  if (!o || !n.dom.contains(o.nodeType != 1 ? o.parentNode : o)) {
    let c = n.dom.getBoundingClientRect();
    if (!ol(e, c) || (o = T0(n.dom, e, c), !o))
      return null;
  }
  if (tt)
    for (let c = o; r && c; c = cs(c))
      c.draggable && (r = void 0);
  if (o = S4(o, e), r) {
    if (Nt && r.nodeType == 1 && (s = Math.min(s, r.childNodes.length), s < r.childNodes.length)) {
      let d = r.childNodes[s], f;
      d.nodeName == "IMG" && (f = d.getBoundingClientRect()).right <= e.left && f.bottom > e.top && s++;
    }
    let c;
    Ds && s && r.nodeType == 1 && (c = r.childNodes[s - 1]).nodeType == 1 && c.contentEditable == "false" && c.getBoundingClientRect().top >= e.top && s--, r == n.dom && s == r.childNodes.length - 1 && r.lastChild.nodeType == 1 && e.top > r.lastChild.getBoundingClientRect().bottom ? a = n.state.doc.content.size : (s == 0 || r.nodeType != 1 || r.childNodes[s - 1].nodeName != "BR") && (a = C4(n, r, s, e));
  }
  a == null && (a = A4(n, o, e));
  let l = n.docView.nearestDesc(o, !0);
  return { pos: a, inside: l ? l.posAtStart - l.border : -1 };
}
function Ed(n) {
  return n.top < n.bottom || n.left < n.right;
}
function an(n, e) {
  let t = n.getClientRects();
  if (t.length) {
    let r = t[e < 0 ? 0 : t.length - 1];
    if (Ed(r))
      return r;
  }
  return Array.prototype.find.call(t, Ed) || n.getBoundingClientRect();
}
const T4 = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
function N0(n, e, t) {
  let { node: r, offset: s, atom: i } = n.docView.domFromPos(e, t < 0 ? -1 : 1), o = Ds || Nt;
  if (r.nodeType == 3)
    if (o && (T4.test(r.nodeValue) || (t < 0 ? !s : s == r.nodeValue.length))) {
      let l = an(Yt(r, s, s), t);
      if (Nt && s && /\s/.test(r.nodeValue[s - 1]) && s < r.nodeValue.length) {
        let c = an(Yt(r, s - 1, s - 1), -1);
        if (c.top == l.top) {
          let d = an(Yt(r, s, s + 1), -1);
          if (d.top != l.top)
            return jr(d, d.left < c.left);
        }
      }
      return l;
    } else {
      let l = s, c = s, d = t < 0 ? 1 : -1;
      return t < 0 && !s ? (c++, d = -1) : t >= 0 && s == r.nodeValue.length ? (l--, d = 1) : t < 0 ? l-- : c++, jr(an(Yt(r, l, c), d), d < 0);
    }
  if (!n.state.doc.resolve(e - (i || 0)).parent.inlineContent) {
    if (i == null && s && (t < 0 || s == $t(r))) {
      let l = r.childNodes[s - 1];
      if (l.nodeType == 1)
        return Po(l.getBoundingClientRect(), !1);
    }
    if (i == null && s < $t(r)) {
      let l = r.childNodes[s];
      if (l.nodeType == 1)
        return Po(l.getBoundingClientRect(), !0);
    }
    return Po(r.getBoundingClientRect(), t >= 0);
  }
  if (i == null && s && (t < 0 || s == $t(r))) {
    let l = r.childNodes[s - 1], c = l.nodeType == 3 ? Yt(l, $t(l) - (o ? 0 : 1)) : l.nodeType == 1 && (l.nodeName != "BR" || !l.nextSibling) ? l : null;
    if (c)
      return jr(an(c, 1), !1);
  }
  if (i == null && s < $t(r)) {
    let l = r.childNodes[s];
    for (; l.pmViewDesc && l.pmViewDesc.ignoreForCoords; )
      l = l.nextSibling;
    let c = l ? l.nodeType == 3 ? Yt(l, 0, o ? 0 : 1) : l.nodeType == 1 ? l : null : null;
    if (c)
      return jr(an(c, -1), !0);
  }
  return jr(an(r.nodeType == 3 ? Yt(r) : r, -t), t >= 0);
}
function jr(n, e) {
  if (n.width == 0)
    return n;
  let t = e ? n.left : n.right;
  return { top: n.top, bottom: n.bottom, left: t, right: t };
}
function Po(n, e) {
  if (n.height == 0)
    return n;
  let t = e ? n.top : n.bottom;
  return { top: t, bottom: t, left: n.left, right: n.right };
}
function _0(n, e, t) {
  let r = n.state, s = n.root.activeElement;
  r != e && n.updateState(e), s != n.dom && n.focus();
  try {
    return t();
  } finally {
    r != e && n.updateState(r), s != n.dom && s && s.focus();
  }
}
function N4(n, e, t) {
  let r = e.selection, s = t == "up" ? r.$from : r.$to;
  return _0(n, e, () => {
    let { node: i } = n.docView.domFromPos(s.pos, t == "up" ? -1 : 1);
    for (; ; ) {
      let a = n.docView.nearestDesc(i, !0);
      if (!a)
        break;
      if (a.node.isBlock) {
        i = a.contentDOM || a.dom;
        break;
      }
      i = a.dom.parentNode;
    }
    let o = N0(n, s.pos, 1);
    for (let a = i.firstChild; a; a = a.nextSibling) {
      let l;
      if (a.nodeType == 1)
        l = a.getClientRects();
      else if (a.nodeType == 3)
        l = Yt(a, 0, a.nodeValue.length).getClientRects();
      else
        continue;
      for (let c = 0; c < l.length; c++) {
        let d = l[c];
        if (d.bottom > d.top + 1 && (t == "up" ? o.top - d.top > (d.bottom - o.top) * 2 : d.bottom - o.bottom > (o.bottom - d.top) * 2))
          return !1;
      }
    }
    return !0;
  });
}
const _4 = /[\u0590-\u08ac]/;
function H4(n, e, t) {
  let { $head: r } = e.selection;
  if (!r.parent.isTextblock)
    return !1;
  let s = r.parentOffset, i = !s, o = s == r.parent.content.size, a = n.domSelection();
  return a ? !_4.test(r.parent.textContent) || !a.modify ? t == "left" || t == "backward" ? i : o : _0(n, e, () => {
    let { focusNode: l, focusOffset: c, anchorNode: d, anchorOffset: f } = n.domSelectionRange(), h = a.caretBidiLevel;
    a.modify("move", t, "character");
    let p = r.depth ? n.docView.domAfterPos(r.before()) : n.dom, { focusNode: m, focusOffset: b } = n.domSelectionRange(), v = m && !p.contains(m.nodeType == 1 ? m : m.parentNode) || l == m && c == b;
    try {
      a.collapse(d, f), l && (l != d || c != f) && a.extend && a.extend(l, c);
    } catch {
    }
    return h != null && (a.caretBidiLevel = h), v;
  }) : r.pos == r.start() || r.pos == r.end();
}
let Md = null, Sd = null, Ad = !1;
function I4(n, e, t) {
  return Md == e && Sd == t ? Ad : (Md = e, Sd = t, Ad = t == "up" || t == "down" ? N4(n, e, t) : H4(n, e, t));
}
const wt = 0, Cd = 1, Ln = 2, jt = 3;
class Ls {
  constructor(e, t, r, s) {
    this.parent = e, this.children = t, this.dom = r, this.contentDOM = s, this.dirty = wt, r.pmViewDesc = this;
  }
  // Used to check whether a given description corresponds to a
  // widget/mark/node.
  matchesWidget(e) {
    return !1;
  }
  matchesMark(e) {
    return !1;
  }
  matchesNode(e, t, r) {
    return !1;
  }
  matchesHack(e) {
    return !1;
  }
  // When parsing in-editor content (in domchange.js), we allow
  // descriptions to determine the parse rules that should be used to
  // parse them.
  parseRule() {
    return null;
  }
  // Used by the editor's event handler to ignore events that come
  // from certain descs.
  stopEvent(e) {
    return !1;
  }
  // The size of the content represented by this desc.
  get size() {
    let e = 0;
    for (let t = 0; t < this.children.length; t++)
      e += this.children[t].size;
    return e;
  }
  // For block nodes, this represents the space taken up by their
  // start/end tokens.
  get border() {
    return 0;
  }
  destroy() {
    this.parent = void 0, this.dom.pmViewDesc == this && (this.dom.pmViewDesc = void 0);
    for (let e = 0; e < this.children.length; e++)
      this.children[e].destroy();
  }
  posBeforeChild(e) {
    for (let t = 0, r = this.posAtStart; ; t++) {
      let s = this.children[t];
      if (s == e)
        return r;
      r += s.size;
    }
  }
  get posBefore() {
    return this.parent.posBeforeChild(this);
  }
  get posAtStart() {
    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
  }
  get posAfter() {
    return this.posBefore + this.size;
  }
  get posAtEnd() {
    return this.posAtStart + this.size - 2 * this.border;
  }
  localPosFromDOM(e, t, r) {
    if (this.contentDOM && this.contentDOM.contains(e.nodeType == 1 ? e : e.parentNode))
      if (r < 0) {
        let i, o;
        if (e == this.contentDOM)
          i = e.childNodes[t - 1];
        else {
          for (; e.parentNode != this.contentDOM; )
            e = e.parentNode;
          i = e.previousSibling;
        }
        for (; i && !((o = i.pmViewDesc) && o.parent == this); )
          i = i.previousSibling;
        return i ? this.posBeforeChild(o) + o.size : this.posAtStart;
      } else {
        let i, o;
        if (e == this.contentDOM)
          i = e.childNodes[t];
        else {
          for (; e.parentNode != this.contentDOM; )
            e = e.parentNode;
          i = e.nextSibling;
        }
        for (; i && !((o = i.pmViewDesc) && o.parent == this); )
          i = i.nextSibling;
        return i ? this.posBeforeChild(o) : this.posAtEnd;
      }
    let s;
    if (e == this.dom && this.contentDOM)
      s = t > Ue(this.contentDOM);
    else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM))
      s = e.compareDocumentPosition(this.contentDOM) & 2;
    else if (this.dom.firstChild) {
      if (t == 0)
        for (let i = e; ; i = i.parentNode) {
          if (i == this.dom) {
            s = !1;
            break;
          }
          if (i.previousSibling)
            break;
        }
      if (s == null && t == e.childNodes.length)
        for (let i = e; ; i = i.parentNode) {
          if (i == this.dom) {
            s = !0;
            break;
          }
          if (i.nextSibling)
            break;
        }
    }
    return s ?? r > 0 ? this.posAtEnd : this.posAtStart;
  }
  nearestDesc(e, t = !1) {
    for (let r = !0, s = e; s; s = s.parentNode) {
      let i = this.getDesc(s), o;
      if (i && (!t || i.node))
        if (r && (o = i.nodeDOM) && !(o.nodeType == 1 ? o.contains(e.nodeType == 1 ? e : e.parentNode) : o == e))
          r = !1;
        else
          return i;
    }
  }
  getDesc(e) {
    let t = e.pmViewDesc;
    for (let r = t; r; r = r.parent)
      if (r == this)
        return t;
  }
  posFromDOM(e, t, r) {
    for (let s = e; s; s = s.parentNode) {
      let i = this.getDesc(s);
      if (i)
        return i.localPosFromDOM(e, t, r);
    }
    return -1;
  }
  // Find the desc for the node after the given pos, if any. (When a
  // parent node overrode rendering, there might not be one.)
  descAt(e) {
    for (let t = 0, r = 0; t < this.children.length; t++) {
      let s = this.children[t], i = r + s.size;
      if (r == e && i != r) {
        for (; !s.border && s.children.length; )
          s = s.children[0];
        return s;
      }
      if (e < i)
        return s.descAt(e - r - s.border);
      r = i;
    }
  }
  domFromPos(e, t) {
    if (!this.contentDOM)
      return { node: this.dom, offset: 0, atom: e + 1 };
    let r = 0, s = 0;
    for (let i = 0; r < this.children.length; r++) {
      let o = this.children[r], a = i + o.size;
      if (a > e || o instanceof I0) {
        s = e - i;
        break;
      }
      i = a;
    }
    if (s)
      return this.children[r].domFromPos(s - this.children[r].border, t);
    for (let i; r && !(i = this.children[r - 1]).size && i instanceof H0 && i.side >= 0; r--)
      ;
    if (t <= 0) {
      let i, o = !0;
      for (; i = r ? this.children[r - 1] : null, !(!i || i.dom.parentNode == this.contentDOM); r--, o = !1)
        ;
      return i && t && o && !i.border && !i.domAtom ? i.domFromPos(i.size, t) : { node: this.contentDOM, offset: i ? Ue(i.dom) + 1 : 0 };
    } else {
      let i, o = !0;
      for (; i = r < this.children.length ? this.children[r] : null, !(!i || i.dom.parentNode == this.contentDOM); r++, o = !1)
        ;
      return i && o && !i.border && !i.domAtom ? i.domFromPos(0, t) : { node: this.contentDOM, offset: i ? Ue(i.dom) : this.contentDOM.childNodes.length };
    }
  }
  // Used to find a DOM range in a single parent for a given changed
  // range.
  parseRange(e, t, r = 0) {
    if (this.children.length == 0)
      return { node: this.contentDOM, from: e, to: t, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
    let s = -1, i = -1;
    for (let o = r, a = 0; ; a++) {
      let l = this.children[a], c = o + l.size;
      if (s == -1 && e <= c) {
        let d = o + l.border;
        if (e >= d && t <= c - l.border && l.node && l.contentDOM && this.contentDOM.contains(l.contentDOM))
          return l.parseRange(e, t, d);
        e = o;
        for (let f = a; f > 0; f--) {
          let h = this.children[f - 1];
          if (h.size && h.dom.parentNode == this.contentDOM && !h.emptyChildAt(1)) {
            s = Ue(h.dom) + 1;
            break;
          }
          e -= h.size;
        }
        s == -1 && (s = 0);
      }
      if (s > -1 && (c > t || a == this.children.length - 1)) {
        t = c;
        for (let d = a + 1; d < this.children.length; d++) {
          let f = this.children[d];
          if (f.size && f.dom.parentNode == this.contentDOM && !f.emptyChildAt(-1)) {
            i = Ue(f.dom);
            break;
          }
          t += f.size;
        }
        i == -1 && (i = this.contentDOM.childNodes.length);
        break;
      }
      o = c;
    }
    return { node: this.contentDOM, from: e, to: t, fromOffset: s, toOffset: i };
  }
  emptyChildAt(e) {
    if (this.border || !this.contentDOM || !this.children.length)
      return !1;
    let t = this.children[e < 0 ? 0 : this.children.length - 1];
    return t.size == 0 || t.emptyChildAt(e);
  }
  domAfterPos(e) {
    let { node: t, offset: r } = this.domFromPos(e, 0);
    if (t.nodeType != 1 || r == t.childNodes.length)
      throw new RangeError("No node after pos " + e);
    return t.childNodes[r];
  }
  // View descs are responsible for setting any selection that falls
  // entirely inside of them, so that custom implementations can do
  // custom things with the selection. Note that this falls apart when
  // a selection starts in such a node and ends in another, in which
  // case we just use whatever domFromPos produces as a best effort.
  setSelection(e, t, r, s = !1) {
    let i = Math.min(e, t), o = Math.max(e, t);
    for (let h = 0, p = 0; h < this.children.length; h++) {
      let m = this.children[h], b = p + m.size;
      if (i > p && o < b)
        return m.setSelection(e - p - m.border, t - p - m.border, r, s);
      p = b;
    }
    let a = this.domFromPos(e, e ? -1 : 1), l = t == e ? a : this.domFromPos(t, t ? -1 : 1), c = r.getSelection(), d = !1;
    if ((Nt || tt) && e == t) {
      let { node: h, offset: p } = a;
      if (h.nodeType == 3) {
        if (d = !!(p && h.nodeValue[p - 1] == `
`), d && p == h.nodeValue.length)
          for (let m = h, b; m; m = m.parentNode) {
            if (b = m.nextSibling) {
              b.nodeName == "BR" && (a = l = { node: b.parentNode, offset: Ue(b) + 1 });
              break;
            }
            let v = m.pmViewDesc;
            if (v && v.node && v.node.isBlock)
              break;
          }
      } else {
        let m = h.childNodes[p - 1];
        d = m && (m.nodeName == "BR" || m.contentEditable == "false");
      }
    }
    if (Nt && c.focusNode && c.focusNode != l.node && c.focusNode.nodeType == 1) {
      let h = c.focusNode.childNodes[c.focusOffset];
      h && h.contentEditable == "false" && (s = !0);
    }
    if (!(s || d && tt) && Qn(a.node, a.offset, c.anchorNode, c.anchorOffset) && Qn(l.node, l.offset, c.focusNode, c.focusOffset))
      return;
    let f = !1;
    if ((c.extend || e == t) && !d) {
      c.collapse(a.node, a.offset);
      try {
        e != t && c.extend(l.node, l.offset), f = !0;
      } catch {
      }
    }
    if (!f) {
      if (e > t) {
        let p = a;
        a = l, l = p;
      }
      let h = document.createRange();
      h.setEnd(l.node, l.offset), h.setStart(a.node, a.offset), c.removeAllRanges(), c.addRange(h);
    }
  }
  ignoreMutation(e) {
    return !this.contentDOM && e.type != "selection";
  }
  get contentLost() {
    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
  }
  // Remove a subtree of the element tree that has been touched
  // by a DOM change, so that the next update will redraw it.
  markDirty(e, t) {
    for (let r = 0, s = 0; s < this.children.length; s++) {
      let i = this.children[s], o = r + i.size;
      if (r == o ? e <= o && t >= r : e < o && t > r) {
        let a = r + i.border, l = o - i.border;
        if (e >= a && t <= l) {
          this.dirty = e == r || t == o ? Ln : Cd, e == a && t == l && (i.contentLost || i.dom.parentNode != this.contentDOM) ? i.dirty = jt : i.markDirty(e - a, t - a);
          return;
        } else
          i.dirty = i.dom == i.contentDOM && i.dom.parentNode == this.contentDOM && !i.children.length ? Ln : jt;
      }
      r = o;
    }
    this.dirty = Ln;
  }
  markParentsDirty() {
    let e = 1;
    for (let t = this.parent; t; t = t.parent, e++) {
      let r = e == 1 ? Ln : Cd;
      t.dirty < r && (t.dirty = r);
    }
  }
  get domAtom() {
    return !1;
  }
  get ignoreForCoords() {
    return !1;
  }
  isText(e) {
    return !1;
  }
}
class H0 extends Ls {
  constructor(e, t, r, s) {
    let i, o = t.type.toDOM;
    if (typeof o == "function" && (o = o(r, () => {
      if (!i)
        return s;
      if (i.parent)
        return i.parent.posBeforeChild(i);
    })), !t.type.spec.raw) {
      if (o.nodeType != 1) {
        let a = document.createElement("span");
        a.appendChild(o), o = a;
      }
      o.contentEditable = "false", o.classList.add("ProseMirror-widget");
    }
    super(e, [], o, null), this.widget = t, this.widget = t, i = this;
  }
  matchesWidget(e) {
    return this.dirty == wt && e.type.eq(this.widget.type);
  }
  parseRule() {
    return { ignore: !0 };
  }
  stopEvent(e) {
    let t = this.widget.spec.stopEvent;
    return t ? t(e) : !1;
  }
  ignoreMutation(e) {
    return e.type != "selection" || this.widget.spec.ignoreSelection;
  }
  destroy() {
    this.widget.type.destroy(this.dom), super.destroy();
  }
  get domAtom() {
    return !0;
  }
  get side() {
    return this.widget.type.side;
  }
}
class R4 extends Ls {
  constructor(e, t, r, s) {
    super(e, [], t, null), this.textDOM = r, this.text = s;
  }
  get size() {
    return this.text.length;
  }
  localPosFromDOM(e, t) {
    return e != this.textDOM ? this.posAtStart + (t ? this.size : 0) : this.posAtStart + t;
  }
  domFromPos(e) {
    return { node: this.textDOM, offset: e };
  }
  ignoreMutation(e) {
    return e.type === "characterData" && e.target.nodeValue == e.oldValue;
  }
}
class Xn extends Ls {
  constructor(e, t, r, s) {
    super(e, [], r, s), this.mark = t;
  }
  static create(e, t, r, s) {
    let i = s.nodeViews[t.type.name], o = i && i(t, s, r);
    return (!o || !o.dom) && (o = or.renderSpec(document, t.type.spec.toDOM(t, r), null, t.attrs)), new Xn(e, t, o.dom, o.contentDOM || o.dom);
  }
  parseRule() {
    return this.dirty & jt || this.mark.type.spec.reparseInView ? null : { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM };
  }
  matchesMark(e) {
    return this.dirty != jt && this.mark.eq(e);
  }
  markDirty(e, t) {
    if (super.markDirty(e, t), this.dirty != wt) {
      let r = this.parent;
      for (; !r.node; )
        r = r.parent;
      r.dirty < this.dirty && (r.dirty = this.dirty), this.dirty = wt;
    }
  }
  slice(e, t, r) {
    let s = Xn.create(this.parent, this.mark, !0, r), i = this.children, o = this.size;
    t < o && (i = Ma(i, t, o, r)), e > 0 && (i = Ma(i, 0, e, r));
    for (let a = 0; a < i.length; a++)
      i[a].parent = s;
    return s.children = i, s;
  }
}
class vn extends Ls {
  constructor(e, t, r, s, i, o, a, l, c) {
    super(e, [], i, o), this.node = t, this.outerDeco = r, this.innerDeco = s, this.nodeDOM = a;
  }
  // By default, a node is rendered using the `toDOM` method from the
  // node type spec. But client code can use the `nodeViews` spec to
  // supply a custom node view, which can influence various aspects of
  // the way the node works.
  //
  // (Using subclassing for this was intentionally decided against,
  // since it'd require exposing a whole slew of finicky
  // implementation details to the user code that they probably will
  // never need.)
  static create(e, t, r, s, i, o) {
    let a = i.nodeViews[t.type.name], l, c = a && a(t, i, () => {
      if (!l)
        return o;
      if (l.parent)
        return l.parent.posBeforeChild(l);
    }, r, s), d = c && c.dom, f = c && c.contentDOM;
    if (t.isText) {
      if (!d)
        d = document.createTextNode(t.text);
      else if (d.nodeType != 3)
        throw new RangeError("Text must be rendered as a DOM text node");
    } else d || ({ dom: d, contentDOM: f } = or.renderSpec(document, t.type.spec.toDOM(t), null, t.attrs));
    !f && !t.isText && d.nodeName != "BR" && (d.hasAttribute("contenteditable") || (d.contentEditable = "false"), t.type.spec.draggable && (d.draggable = !0));
    let h = d;
    return d = L0(d, r, t), c ? l = new D4(e, t, r, s, d, f || null, h, c, i, o + 1) : t.isText ? new uo(e, t, r, s, d, h, i) : new vn(e, t, r, s, d, f || null, h, i, o + 1);
  }
  parseRule() {
    if (this.node.type.spec.reparseInView)
      return null;
    let e = { node: this.node.type.name, attrs: this.node.attrs };
    if (this.node.type.whitespace == "pre" && (e.preserveWhitespace = "full"), !this.contentDOM)
      e.getContent = () => this.node.content;
    else if (!this.contentLost)
      e.contentElement = this.contentDOM;
    else {
      for (let t = this.children.length - 1; t >= 0; t--) {
        let r = this.children[t];
        if (this.dom.contains(r.dom.parentNode)) {
          e.contentElement = r.dom.parentNode;
          break;
        }
      }
      e.contentElement || (e.getContent = () => L.empty);
    }
    return e;
  }
  matchesNode(e, t, r) {
    return this.dirty == wt && e.eq(this.node) && Ea(t, this.outerDeco) && r.eq(this.innerDeco);
  }
  get size() {
    return this.node.nodeSize;
  }
  get border() {
    return this.node.isLeaf ? 0 : 1;
  }
  // Syncs `this.children` to match `this.node.content` and the local
  // decorations, possibly introducing nesting for marks. Then, in a
  // separate step, syncs the DOM inside `this.contentDOM` to
  // `this.children`.
  updateChildren(e, t) {
    let r = this.node.inlineContent, s = t, i = e.composing ? this.localCompositionInfo(e, t) : null, o = i && i.pos > -1 ? i : null, a = i && i.pos < 0, l = new P4(this, o && o.node, e);
    V4(this.node, this.innerDeco, (c, d, f) => {
      c.spec.marks ? l.syncToMarks(c.spec.marks, r, e) : c.type.side >= 0 && !f && l.syncToMarks(d == this.node.childCount ? Ee.none : this.node.child(d).marks, r, e), l.placeWidget(c, e, s);
    }, (c, d, f, h) => {
      l.syncToMarks(c.marks, r, e);
      let p;
      l.findNodeMatch(c, d, f, h) || a && e.state.selection.from > s && e.state.selection.to < s + c.nodeSize && (p = l.findIndexWithChild(i.node)) > -1 && l.updateNodeAt(c, d, f, p, e) || l.updateNextNode(c, d, f, e, h, s) || l.addNode(c, d, f, e, s), s += c.nodeSize;
    }), l.syncToMarks([], r, e), this.node.isTextblock && l.addTextblockHacks(), l.destroyRest(), (l.changed || this.dirty == Ln) && (o && this.protectLocalComposition(e, o), R0(this.contentDOM, this.children, e), Nr && z4(this.dom));
  }
  localCompositionInfo(e, t) {
    let { from: r, to: s } = e.state.selection;
    if (!(e.state.selection instanceof le) || r < t || s > t + this.node.content.size)
      return null;
    let i = e.input.compositionNode;
    if (!i || !this.dom.contains(i.parentNode))
      return null;
    if (this.node.inlineContent) {
      let o = i.nodeValue, a = j4(this.node.content, o, r - t, s - t);
      return a < 0 ? null : { node: i, pos: a, text: o };
    } else
      return { node: i, pos: -1, text: "" };
  }
  protectLocalComposition(e, { node: t, pos: r, text: s }) {
    if (this.getDesc(t))
      return;
    let i = t;
    for (; i.parentNode != this.contentDOM; i = i.parentNode) {
      for (; i.previousSibling; )
        i.parentNode.removeChild(i.previousSibling);
      for (; i.nextSibling; )
        i.parentNode.removeChild(i.nextSibling);
      i.pmViewDesc && (i.pmViewDesc = void 0);
    }
    let o = new R4(this, i, t, s);
    e.input.compositionNodes.push(o), this.children = Ma(this.children, r, r + s.length, e, o);
  }
  // If this desc must be updated to match the given node decoration,
  // do so and return true.
  update(e, t, r, s) {
    return this.dirty == jt || !e.sameMarkup(this.node) ? !1 : (this.updateInner(e, t, r, s), !0);
  }
  updateInner(e, t, r, s) {
    this.updateOuterDeco(t), this.node = e, this.innerDeco = r, this.contentDOM && this.updateChildren(s, this.posAtStart), this.dirty = wt;
  }
  updateOuterDeco(e) {
    if (Ea(e, this.outerDeco))
      return;
    let t = this.nodeDOM.nodeType != 1, r = this.dom;
    this.dom = D0(this.dom, this.nodeDOM, wa(this.outerDeco, this.node, t), wa(e, this.node, t)), this.dom != r && (r.pmViewDesc = void 0, this.dom.pmViewDesc = this), this.outerDeco = e;
  }
  // Mark this node as being the selected node.
  selectNode() {
    this.nodeDOM.nodeType == 1 && this.nodeDOM.classList.add("ProseMirror-selectednode"), (this.contentDOM || !this.node.type.spec.draggable) && (this.dom.draggable = !0);
  }
  // Remove selected node marking from this node.
  deselectNode() {
    this.nodeDOM.nodeType == 1 && (this.nodeDOM.classList.remove("ProseMirror-selectednode"), (this.contentDOM || !this.node.type.spec.draggable) && this.dom.removeAttribute("draggable"));
  }
  get domAtom() {
    return this.node.isAtom;
  }
}
function Od(n, e, t, r, s) {
  L0(r, e, n);
  let i = new vn(void 0, n, e, t, r, r, r, s, 0);
  return i.contentDOM && i.updateChildren(s, 0), i;
}
class uo extends vn {
  constructor(e, t, r, s, i, o, a) {
    super(e, t, r, s, i, null, o, a, 0);
  }
  parseRule() {
    let e = this.nodeDOM.parentNode;
    for (; e && e != this.dom && !e.pmIsDeco; )
      e = e.parentNode;
    return { skip: e || !0 };
  }
  update(e, t, r, s) {
    return this.dirty == jt || this.dirty != wt && !this.inParent() || !e.sameMarkup(this.node) ? !1 : (this.updateOuterDeco(t), (this.dirty != wt || e.text != this.node.text) && e.text != this.nodeDOM.nodeValue && (this.nodeDOM.nodeValue = e.text, s.trackWrites == this.nodeDOM && (s.trackWrites = null)), this.node = e, this.dirty = wt, !0);
  }
  inParent() {
    let e = this.parent.contentDOM;
    for (let t = this.nodeDOM; t; t = t.parentNode)
      if (t == e)
        return !0;
    return !1;
  }
  domFromPos(e) {
    return { node: this.nodeDOM, offset: e };
  }
  localPosFromDOM(e, t, r) {
    return e == this.nodeDOM ? this.posAtStart + Math.min(t, this.node.text.length) : super.localPosFromDOM(e, t, r);
  }
  ignoreMutation(e) {
    return e.type != "characterData" && e.type != "selection";
  }
  slice(e, t, r) {
    let s = this.node.cut(e, t), i = document.createTextNode(s.text);
    return new uo(this.parent, s, this.outerDeco, this.innerDeco, i, i, r);
  }
  markDirty(e, t) {
    super.markDirty(e, t), this.dom != this.nodeDOM && (e == 0 || t == this.nodeDOM.nodeValue.length) && (this.dirty = jt);
  }
  get domAtom() {
    return !1;
  }
  isText(e) {
    return this.node.text == e;
  }
}
class I0 extends Ls {
  parseRule() {
    return { ignore: !0 };
  }
  matchesHack(e) {
    return this.dirty == wt && this.dom.nodeName == e;
  }
  get domAtom() {
    return !0;
  }
  get ignoreForCoords() {
    return this.dom.nodeName == "IMG";
  }
}
class D4 extends vn {
  constructor(e, t, r, s, i, o, a, l, c, d) {
    super(e, t, r, s, i, o, a, c, d), this.spec = l;
  }
  // A custom `update` method gets to decide whether the update goes
  // through. If it does, and there's a `contentDOM` node, our logic
  // updates the children.
  update(e, t, r, s) {
    if (this.dirty == jt)
      return !1;
    if (this.spec.update) {
      let i = this.spec.update(e, t, r);
      return i && this.updateInner(e, t, r, s), i;
    } else return !this.contentDOM && !e.isLeaf ? !1 : super.update(e, t, r, s);
  }
  selectNode() {
    this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
  }
  deselectNode() {
    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
  }
  setSelection(e, t, r, s) {
    this.spec.setSelection ? this.spec.setSelection(e, t, r) : super.setSelection(e, t, r, s);
  }
  destroy() {
    this.spec.destroy && this.spec.destroy(), super.destroy();
  }
  stopEvent(e) {
    return this.spec.stopEvent ? this.spec.stopEvent(e) : !1;
  }
  ignoreMutation(e) {
    return this.spec.ignoreMutation ? this.spec.ignoreMutation(e) : super.ignoreMutation(e);
  }
}
function R0(n, e, t) {
  let r = n.firstChild, s = !1;
  for (let i = 0; i < e.length; i++) {
    let o = e[i], a = o.dom;
    if (a.parentNode == n) {
      for (; a != r; )
        r = Td(r), s = !0;
      r = r.nextSibling;
    } else
      s = !0, n.insertBefore(a, r);
    if (o instanceof Xn) {
      let l = r ? r.previousSibling : n.lastChild;
      R0(o.contentDOM, o.children, t), r = l ? l.nextSibling : n.firstChild;
    }
  }
  for (; r; )
    r = Td(r), s = !0;
  s && t.trackWrites == n && (t.trackWrites = null);
}
const Qr = function(n) {
  n && (this.nodeName = n);
};
Qr.prototype = /* @__PURE__ */ Object.create(null);
const Pn = [new Qr()];
function wa(n, e, t) {
  if (n.length == 0)
    return Pn;
  let r = t ? Pn[0] : new Qr(), s = [r];
  for (let i = 0; i < n.length; i++) {
    let o = n[i].type.attrs;
    if (o) {
      o.nodeName && s.push(r = new Qr(o.nodeName));
      for (let a in o) {
        let l = o[a];
        l != null && (t && s.length == 1 && s.push(r = new Qr(e.isInline ? "span" : "div")), a == "class" ? r.class = (r.class ? r.class + " " : "") + l : a == "style" ? r.style = (r.style ? r.style + ";" : "") + l : a != "nodeName" && (r[a] = l));
      }
    }
  }
  return s;
}
function D0(n, e, t, r) {
  if (t == Pn && r == Pn)
    return e;
  let s = e;
  for (let i = 0; i < r.length; i++) {
    let o = r[i], a = t[i];
    if (i) {
      let l;
      a && a.nodeName == o.nodeName && s != n && (l = s.parentNode) && l.nodeName.toLowerCase() == o.nodeName || (l = document.createElement(o.nodeName), l.pmIsDeco = !0, l.appendChild(s), a = Pn[0]), s = l;
    }
    L4(s, a || Pn[0], o);
  }
  return s;
}
function L4(n, e, t) {
  for (let r in e)
    r != "class" && r != "style" && r != "nodeName" && !(r in t) && n.removeAttribute(r);
  for (let r in t)
    r != "class" && r != "style" && r != "nodeName" && t[r] != e[r] && n.setAttribute(r, t[r]);
  if (e.class != t.class) {
    let r = e.class ? e.class.split(" ").filter(Boolean) : [], s = t.class ? t.class.split(" ").filter(Boolean) : [];
    for (let i = 0; i < r.length; i++)
      s.indexOf(r[i]) == -1 && n.classList.remove(r[i]);
    for (let i = 0; i < s.length; i++)
      r.indexOf(s[i]) == -1 && n.classList.add(s[i]);
    n.classList.length == 0 && n.removeAttribute("class");
  }
  if (e.style != t.style) {
    if (e.style) {
      let r = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, s;
      for (; s = r.exec(e.style); )
        n.style.removeProperty(s[1]);
    }
    t.style && (n.style.cssText += t.style);
  }
}
function L0(n, e, t) {
  return D0(n, n, Pn, wa(e, t, n.nodeType != 1));
}
function Ea(n, e) {
  if (n.length != e.length)
    return !1;
  for (let t = 0; t < n.length; t++)
    if (!n[t].type.eq(e[t].type))
      return !1;
  return !0;
}
function Td(n) {
  let e = n.nextSibling;
  return n.parentNode.removeChild(n), e;
}
class P4 {
  constructor(e, t, r) {
    this.lock = t, this.view = r, this.index = 0, this.stack = [], this.changed = !1, this.top = e, this.preMatch = $4(e.node.content, e);
  }
  // Destroy and remove the children between the given indices in
  // `this.top`.
  destroyBetween(e, t) {
    if (e != t) {
      for (let r = e; r < t; r++)
        this.top.children[r].destroy();
      this.top.children.splice(e, t - e), this.changed = !0;
    }
  }
  // Destroy all remaining children in `this.top`.
  destroyRest() {
    this.destroyBetween(this.index, this.top.children.length);
  }
  // Sync the current stack of mark descs with the given array of
  // marks, reusing existing mark descs when possible.
  syncToMarks(e, t, r) {
    let s = 0, i = this.stack.length >> 1, o = Math.min(i, e.length);
    for (; s < o && (s == i - 1 ? this.top : this.stack[s + 1 << 1]).matchesMark(e[s]) && e[s].type.spec.spanning !== !1; )
      s++;
    for (; s < i; )
      this.destroyRest(), this.top.dirty = wt, this.index = this.stack.pop(), this.top = this.stack.pop(), i--;
    for (; i < e.length; ) {
      this.stack.push(this.top, this.index + 1);
      let a = -1;
      for (let l = this.index; l < Math.min(this.index + 3, this.top.children.length); l++) {
        let c = this.top.children[l];
        if (c.matchesMark(e[i]) && !this.isLocked(c.dom)) {
          a = l;
          break;
        }
      }
      if (a > -1)
        a > this.index && (this.changed = !0, this.destroyBetween(this.index, a)), this.top = this.top.children[this.index];
      else {
        let l = Xn.create(this.top, e[i], t, r);
        this.top.children.splice(this.index, 0, l), this.top = l, this.changed = !0;
      }
      this.index = 0, i++;
    }
  }
  // Try to find a node desc matching the given data. Skip over it and
  // return true when successful.
  findNodeMatch(e, t, r, s) {
    let i = -1, o;
    if (s >= this.preMatch.index && (o = this.preMatch.matches[s - this.preMatch.index]).parent == this.top && o.matchesNode(e, t, r))
      i = this.top.children.indexOf(o, this.index);
    else
      for (let a = this.index, l = Math.min(this.top.children.length, a + 5); a < l; a++) {
        let c = this.top.children[a];
        if (c.matchesNode(e, t, r) && !this.preMatch.matched.has(c)) {
          i = a;
          break;
        }
      }
    return i < 0 ? !1 : (this.destroyBetween(this.index, i), this.index++, !0);
  }
  updateNodeAt(e, t, r, s, i) {
    let o = this.top.children[s];
    return o.dirty == jt && o.dom == o.contentDOM && (o.dirty = Ln), o.update(e, t, r, i) ? (this.destroyBetween(this.index, s), this.index++, !0) : !1;
  }
  findIndexWithChild(e) {
    for (; ; ) {
      let t = e.parentNode;
      if (!t)
        return -1;
      if (t == this.top.contentDOM) {
        let r = e.pmViewDesc;
        if (r) {
          for (let s = this.index; s < this.top.children.length; s++)
            if (this.top.children[s] == r)
              return s;
        }
        return -1;
      }
      e = t;
    }
  }
  // Try to update the next node, if any, to the given data. Checks
  // pre-matches to avoid overwriting nodes that could still be used.
  updateNextNode(e, t, r, s, i, o) {
    for (let a = this.index; a < this.top.children.length; a++) {
      let l = this.top.children[a];
      if (l instanceof vn) {
        let c = this.preMatch.matched.get(l);
        if (c != null && c != i)
          return !1;
        let d = l.dom, f, h = this.isLocked(d) && !(e.isText && l.node && l.node.isText && l.nodeDOM.nodeValue == e.text && l.dirty != jt && Ea(t, l.outerDeco));
        if (!h && l.update(e, t, r, s))
          return this.destroyBetween(this.index, a), l.dom != d && (this.changed = !0), this.index++, !0;
        if (!h && (f = this.recreateWrapper(l, e, t, r, s, o)))
          return this.top.children[this.index] = f, f.contentDOM && (f.dirty = Ln, f.updateChildren(s, o + 1), f.dirty = wt), this.changed = !0, this.index++, !0;
        break;
      }
    }
    return !1;
  }
  // When a node with content is replaced by a different node with
  // identical content, move over its children.
  recreateWrapper(e, t, r, s, i, o) {
    if (e.dirty || t.isAtom || !e.children.length || !e.node.content.eq(t.content))
      return null;
    let a = vn.create(this.top, t, r, s, i, o);
    if (a.contentDOM) {
      a.children = e.children, e.children = [];
      for (let l of a.children)
        l.parent = a;
    }
    return e.destroy(), a;
  }
  // Insert the node as a newly created node desc.
  addNode(e, t, r, s, i) {
    let o = vn.create(this.top, e, t, r, s, i);
    o.contentDOM && o.updateChildren(s, i + 1), this.top.children.splice(this.index++, 0, o), this.changed = !0;
  }
  placeWidget(e, t, r) {
    let s = this.index < this.top.children.length ? this.top.children[this.index] : null;
    if (s && s.matchesWidget(e) && (e == s.widget || !s.widget.type.toDOM.parentNode))
      this.index++;
    else {
      let i = new H0(this.top, e, t, r);
      this.top.children.splice(this.index++, 0, i), this.changed = !0;
    }
  }
  // Make sure a textblock looks and behaves correctly in
  // contentEditable.
  addTextblockHacks() {
    let e = this.top.children[this.index - 1], t = this.top;
    for (; e instanceof Xn; )
      t = e, e = t.children[t.children.length - 1];
    (!e || // Empty textblock
    !(e instanceof uo) || /\n$/.test(e.node.text) || this.view.requiresGeckoHackNode && /\s$/.test(e.node.text)) && ((tt || Ye) && e && e.dom.contentEditable == "false" && this.addHackNode("IMG", t), this.addHackNode("BR", this.top));
  }
  addHackNode(e, t) {
    if (t == this.top && this.index < t.children.length && t.children[this.index].matchesHack(e))
      this.index++;
    else {
      let r = document.createElement(e);
      e == "IMG" && (r.className = "ProseMirror-separator", r.alt = ""), e == "BR" && (r.className = "ProseMirror-trailingBreak");
      let s = new I0(this.top, [], r, null);
      t != this.top ? t.children.push(s) : t.children.splice(this.index++, 0, s), this.changed = !0;
    }
  }
  isLocked(e) {
    return this.lock && (e == this.lock || e.nodeType == 1 && e.contains(this.lock.parentNode));
  }
}
function $4(n, e) {
  let t = e, r = t.children.length, s = n.childCount, i = /* @__PURE__ */ new Map(), o = [];
  e: for (; s > 0; ) {
    let a;
    for (; ; )
      if (r) {
        let c = t.children[r - 1];
        if (c instanceof Xn)
          t = c, r = c.children.length;
        else {
          a = c, r--;
          break;
        }
      } else {
        if (t == e)
          break e;
        r = t.parent.children.indexOf(t), t = t.parent;
      }
    let l = a.node;
    if (l) {
      if (l != n.child(s - 1))
        break;
      --s, i.set(a, s), o.push(a);
    }
  }
  return { index: s, matched: i, matches: o.reverse() };
}
function Z4(n, e) {
  return n.type.side - e.type.side;
}
function V4(n, e, t, r) {
  let s = e.locals(n), i = 0;
  if (s.length == 0) {
    for (let c = 0; c < n.childCount; c++) {
      let d = n.child(c);
      r(d, s, e.forChild(i, d), c), i += d.nodeSize;
    }
    return;
  }
  let o = 0, a = [], l = null;
  for (let c = 0; ; ) {
    let d, f;
    for (; o < s.length && s[o].to == i; ) {
      let v = s[o++];
      v.widget && (d ? (f || (f = [d])).push(v) : d = v);
    }
    if (d)
      if (f) {
        f.sort(Z4);
        for (let v = 0; v < f.length; v++)
          t(f[v], c, !!l);
      } else
        t(d, c, !!l);
    let h, p;
    if (l)
      p = -1, h = l, l = null;
    else if (c < n.childCount)
      p = c, h = n.child(c++);
    else
      break;
    for (let v = 0; v < a.length; v++)
      a[v].to <= i && a.splice(v--, 1);
    for (; o < s.length && s[o].from <= i && s[o].to > i; )
      a.push(s[o++]);
    let m = i + h.nodeSize;
    if (h.isText) {
      let v = m;
      o < s.length && s[o].from < v && (v = s[o].from);
      for (let w = 0; w < a.length; w++)
        a[w].to < v && (v = a[w].to);
      v < m && (l = h.cut(v - i), h = h.cut(0, v - i), m = v, p = -1);
    } else
      for (; o < s.length && s[o].to < m; )
        o++;
    let b = h.isInline && !h.isLeaf ? a.filter((v) => !v.inline) : a.slice();
    r(h, b, e.forChild(i, h), p), i = m;
  }
}
function z4(n) {
  if (n.nodeName == "UL" || n.nodeName == "OL") {
    let e = n.style.cssText;
    n.style.cssText = e + "; list-style: square !important", window.getComputedStyle(n).listStyle, n.style.cssText = e;
  }
}
function j4(n, e, t, r) {
  for (let s = 0, i = 0; s < n.childCount && i <= r; ) {
    let o = n.child(s++), a = i;
    if (i += o.nodeSize, !o.isText)
      continue;
    let l = o.text;
    for (; s < n.childCount; ) {
      let c = n.child(s++);
      if (i += c.nodeSize, !c.isText)
        break;
      l += c.text;
    }
    if (i >= t) {
      if (i >= r && l.slice(r - e.length - a, r - a) == e)
        return r - e.length;
      let c = a < r ? l.lastIndexOf(e, r - a - 1) : -1;
      if (c >= 0 && c + e.length + a >= t)
        return a + c;
      if (t == r && l.length >= r + e.length - a && l.slice(r - a, r - a + e.length) == e)
        return r;
    }
  }
  return -1;
}
function Ma(n, e, t, r, s) {
  let i = [];
  for (let o = 0, a = 0; o < n.length; o++) {
    let l = n[o], c = a, d = a += l.size;
    c >= t || d <= e ? i.push(l) : (c < e && i.push(l.slice(0, e - c, r)), s && (i.push(s), s = void 0), d > t && i.push(l.slice(t - c, l.size, r)));
  }
  return i;
}
function al(n, e = null) {
  let t = n.domSelectionRange(), r = n.state.doc;
  if (!t.focusNode)
    return null;
  let s = n.docView.nearestDesc(t.focusNode), i = s && s.size == 0, o = n.docView.posFromDOM(t.focusNode, t.focusOffset, 1);
  if (o < 0)
    return null;
  let a = r.resolve(o), l, c;
  if (co(t)) {
    for (l = a; s && !s.node; )
      s = s.parent;
    let d = s.node;
    if (s && d.isAtom && ne.isSelectable(d) && s.parent && !(d.isInline && p4(t.focusNode, t.focusOffset, s.dom))) {
      let f = s.posBefore;
      c = new ne(o == f ? a : r.resolve(f));
    }
  } else {
    let d = n.docView.posFromDOM(t.anchorNode, t.anchorOffset, 1);
    if (d < 0)
      return null;
    l = r.resolve(d);
  }
  if (!c) {
    let d = e == "pointer" || n.state.selection.head < a.pos && !i ? 1 : -1;
    c = ll(n, l, a, d);
  }
  return c;
}
function P0(n) {
  return n.editable ? n.hasFocus() : Z0(n) && document.activeElement && document.activeElement.contains(n.dom);
}
function Qt(n, e = !1) {
  let t = n.state.selection;
  if ($0(n, t), !!P0(n)) {
    if (!e && n.input.mouseDown && n.input.mouseDown.allowDefault && Ye) {
      let r = n.domSelectionRange(), s = n.domObserver.currentSelection;
      if (r.anchorNode && s.anchorNode && Qn(r.anchorNode, r.anchorOffset, s.anchorNode, s.anchorOffset)) {
        n.input.mouseDown.delayedSelectionSync = !0, n.domObserver.setCurSelection();
        return;
      }
    }
    if (n.domObserver.disconnectSelection(), n.cursorWrapper)
      B4(n);
    else {
      let { anchor: r, head: s } = t, i, o;
      Nd && !(t instanceof le) && (t.$from.parent.inlineContent || (i = _d(n, t.from)), !t.empty && !t.$from.parent.inlineContent && (o = _d(n, t.to))), n.docView.setSelection(r, s, n.root, e), Nd && (i && Hd(i), o && Hd(o)), t.visible ? n.dom.classList.remove("ProseMirror-hideselection") : (n.dom.classList.add("ProseMirror-hideselection"), "onselectionchange" in document && F4(n));
    }
    n.domObserver.setCurSelection(), n.domObserver.connectSelection();
  }
}
const Nd = tt || Ye && S0 < 63;
function _d(n, e) {
  let { node: t, offset: r } = n.docView.domFromPos(e, 0), s = r < t.childNodes.length ? t.childNodes[r] : null, i = r ? t.childNodes[r - 1] : null;
  if (tt && s && s.contentEditable == "false")
    return $o(s);
  if ((!s || s.contentEditable == "false") && (!i || i.contentEditable == "false")) {
    if (s)
      return $o(s);
    if (i)
      return $o(i);
  }
}
function $o(n) {
  return n.contentEditable = "true", tt && n.draggable && (n.draggable = !1, n.wasDraggable = !0), n;
}
function Hd(n) {
  n.contentEditable = "false", n.wasDraggable && (n.draggable = !0, n.wasDraggable = null);
}
function F4(n) {
  let e = n.dom.ownerDocument;
  e.removeEventListener("selectionchange", n.input.hideSelectionGuard);
  let t = n.domSelectionRange(), r = t.anchorNode, s = t.anchorOffset;
  e.addEventListener("selectionchange", n.input.hideSelectionGuard = () => {
    (t.anchorNode != r || t.anchorOffset != s) && (e.removeEventListener("selectionchange", n.input.hideSelectionGuard), setTimeout(() => {
      (!P0(n) || n.state.selection.visible) && n.dom.classList.remove("ProseMirror-hideselection");
    }, 20));
  });
}
function B4(n) {
  let e = n.domSelection(), t = document.createRange();
  if (!e)
    return;
  let r = n.cursorWrapper.dom, s = r.nodeName == "IMG";
  s ? t.setStart(r.parentNode, Ue(r) + 1) : t.setStart(r, 0), t.collapse(!0), e.removeAllRanges(), e.addRange(t), !s && !n.state.selection.visible && at && bn <= 11 && (r.disabled = !0, r.disabled = !1);
}
function $0(n, e) {
  if (e instanceof ne) {
    let t = n.docView.descAt(e.from);
    t != n.lastSelectedViewDesc && (Id(n), t && t.selectNode(), n.lastSelectedViewDesc = t);
  } else
    Id(n);
}
function Id(n) {
  n.lastSelectedViewDesc && (n.lastSelectedViewDesc.parent && n.lastSelectedViewDesc.deselectNode(), n.lastSelectedViewDesc = void 0);
}
function ll(n, e, t, r) {
  return n.someProp("createSelectionBetween", (s) => s(n, e, t)) || le.between(e, t, r);
}
function Rd(n) {
  return n.editable && !n.hasFocus() ? !1 : Z0(n);
}
function Z0(n) {
  let e = n.domSelectionRange();
  if (!e.anchorNode)
    return !1;
  try {
    return n.dom.contains(e.anchorNode.nodeType == 3 ? e.anchorNode.parentNode : e.anchorNode) && (n.editable || n.dom.contains(e.focusNode.nodeType == 3 ? e.focusNode.parentNode : e.focusNode));
  } catch {
    return !1;
  }
}
function W4(n) {
  let e = n.docView.domFromPos(n.state.selection.anchor, 0), t = n.domSelectionRange();
  return Qn(e.node, e.offset, t.anchorNode, t.anchorOffset);
}
function Sa(n, e) {
  let { $anchor: t, $head: r } = n.selection, s = e > 0 ? t.max(r) : t.min(r), i = s.parent.inlineContent ? s.depth ? n.doc.resolve(e > 0 ? s.after() : s.before()) : null : s;
  return i && ue.findFrom(i, e);
}
function ln(n, e) {
  return n.dispatch(n.state.tr.setSelection(e).scrollIntoView()), !0;
}
function Dd(n, e, t) {
  let r = n.state.selection;
  if (r instanceof le)
    if (t.indexOf("s") > -1) {
      let { $head: s } = r, i = s.textOffset ? null : e < 0 ? s.nodeBefore : s.nodeAfter;
      if (!i || i.isText || !i.isLeaf)
        return !1;
      let o = n.state.doc.resolve(s.pos + i.nodeSize * (e < 0 ? -1 : 1));
      return ln(n, new le(r.$anchor, o));
    } else if (r.empty) {
      if (n.endOfTextblock(e > 0 ? "forward" : "backward")) {
        let s = Sa(n.state, e);
        return s && s instanceof ne ? ln(n, s) : !1;
      } else if (!(xt && t.indexOf("m") > -1)) {
        let s = r.$head, i = s.textOffset ? null : e < 0 ? s.nodeBefore : s.nodeAfter, o;
        if (!i || i.isText)
          return !1;
        let a = e < 0 ? s.pos - i.nodeSize : s.pos;
        return i.isAtom || (o = n.docView.descAt(a)) && !o.contentDOM ? ne.isSelectable(i) ? ln(n, new ne(e < 0 ? n.state.doc.resolve(s.pos - i.nodeSize) : s)) : Ds ? ln(n, new le(n.state.doc.resolve(e < 0 ? a : a + i.nodeSize))) : !1 : !1;
      }
    } else return !1;
  else {
    if (r instanceof ne && r.node.isInline)
      return ln(n, new le(e > 0 ? r.$to : r.$from));
    {
      let s = Sa(n.state, e);
      return s ? ln(n, s) : !1;
    }
  }
}
function fi(n) {
  return n.nodeType == 3 ? n.nodeValue.length : n.childNodes.length;
}
function Xr(n, e) {
  let t = n.pmViewDesc;
  return t && t.size == 0 && (e < 0 || n.nextSibling || n.nodeName != "BR");
}
function cr(n, e) {
  return e < 0 ? U4(n) : K4(n);
}
function U4(n) {
  let e = n.domSelectionRange(), t = e.focusNode, r = e.focusOffset;
  if (!t)
    return;
  let s, i, o = !1;
  for (Nt && t.nodeType == 1 && r < fi(t) && Xr(t.childNodes[r], -1) && (o = !0); ; )
    if (r > 0) {
      if (t.nodeType != 1)
        break;
      {
        let a = t.childNodes[r - 1];
        if (Xr(a, -1))
          s = t, i = --r;
        else if (a.nodeType == 3)
          t = a, r = t.nodeValue.length;
        else
          break;
      }
    } else {
      if (V0(t))
        break;
      {
        let a = t.previousSibling;
        for (; a && Xr(a, -1); )
          s = t.parentNode, i = Ue(a), a = a.previousSibling;
        if (a)
          t = a, r = fi(t);
        else {
          if (t = t.parentNode, t == n.dom)
            break;
          r = 0;
        }
      }
    }
  o ? Aa(n, t, r) : s && Aa(n, s, i);
}
function K4(n) {
  let e = n.domSelectionRange(), t = e.focusNode, r = e.focusOffset;
  if (!t)
    return;
  let s = fi(t), i, o;
  for (; ; )
    if (r < s) {
      if (t.nodeType != 1)
        break;
      let a = t.childNodes[r];
      if (Xr(a, 1))
        i = t, o = ++r;
      else
        break;
    } else {
      if (V0(t))
        break;
      {
        let a = t.nextSibling;
        for (; a && Xr(a, 1); )
          i = a.parentNode, o = Ue(a) + 1, a = a.nextSibling;
        if (a)
          t = a, r = 0, s = fi(t);
        else {
          if (t = t.parentNode, t == n.dom)
            break;
          r = s = 0;
        }
      }
    }
  i && Aa(n, i, o);
}
function V0(n) {
  let e = n.pmViewDesc;
  return e && e.node && e.node.isBlock;
}
function q4(n, e) {
  for (; n && e == n.childNodes.length && !Rs(n); )
    e = Ue(n) + 1, n = n.parentNode;
  for (; n && e < n.childNodes.length; ) {
    let t = n.childNodes[e];
    if (t.nodeType == 3)
      return t;
    if (t.nodeType == 1 && t.contentEditable == "false")
      break;
    n = t, e = 0;
  }
}
function J4(n, e) {
  for (; n && !e && !Rs(n); )
    e = Ue(n), n = n.parentNode;
  for (; n && e; ) {
    let t = n.childNodes[e - 1];
    if (t.nodeType == 3)
      return t;
    if (t.nodeType == 1 && t.contentEditable == "false")
      break;
    n = t, e = n.childNodes.length;
  }
}
function Aa(n, e, t) {
  if (e.nodeType != 3) {
    let i, o;
    (o = q4(e, t)) ? (e = o, t = 0) : (i = J4(e, t)) && (e = i, t = i.nodeValue.length);
  }
  let r = n.domSelection();
  if (!r)
    return;
  if (co(r)) {
    let i = document.createRange();
    i.setEnd(e, t), i.setStart(e, t), r.removeAllRanges(), r.addRange(i);
  } else r.extend && r.extend(e, t);
  n.domObserver.setCurSelection();
  let { state: s } = n;
  setTimeout(() => {
    n.state == s && Qt(n);
  }, 50);
}
function Ld(n, e) {
  let t = n.state.doc.resolve(e);
  if (!(Ye || y4) && t.parent.inlineContent) {
    let s = n.coordsAtPos(e);
    if (e > t.start()) {
      let i = n.coordsAtPos(e - 1), o = (i.top + i.bottom) / 2;
      if (o > s.top && o < s.bottom && Math.abs(i.left - s.left) > 1)
        return i.left < s.left ? "ltr" : "rtl";
    }
    if (e < t.end()) {
      let i = n.coordsAtPos(e + 1), o = (i.top + i.bottom) / 2;
      if (o > s.top && o < s.bottom && Math.abs(i.left - s.left) > 1)
        return i.left > s.left ? "ltr" : "rtl";
    }
  }
  return getComputedStyle(n.dom).direction == "rtl" ? "rtl" : "ltr";
}
function Pd(n, e, t) {
  let r = n.state.selection;
  if (r instanceof le && !r.empty || t.indexOf("s") > -1 || xt && t.indexOf("m") > -1)
    return !1;
  let { $from: s, $to: i } = r;
  if (!s.parent.inlineContent || n.endOfTextblock(e < 0 ? "up" : "down")) {
    let o = Sa(n.state, e);
    if (o && o instanceof ne)
      return ln(n, o);
  }
  if (!s.parent.inlineContent) {
    let o = e < 0 ? s : i, a = r instanceof Ot ? ue.near(o, e) : ue.findFrom(o, e);
    return a ? ln(n, a) : !1;
  }
  return !1;
}
function $d(n, e) {
  if (!(n.state.selection instanceof le))
    return !0;
  let { $head: t, $anchor: r, empty: s } = n.state.selection;
  if (!t.sameParent(r))
    return !0;
  if (!s)
    return !1;
  if (n.endOfTextblock(e > 0 ? "forward" : "backward"))
    return !0;
  let i = !t.textOffset && (e < 0 ? t.nodeBefore : t.nodeAfter);
  if (i && !i.isText) {
    let o = n.state.tr;
    return e < 0 ? o.delete(t.pos - i.nodeSize, t.pos) : o.delete(t.pos, t.pos + i.nodeSize), n.dispatch(o), !0;
  }
  return !1;
}
function Zd(n, e, t) {
  n.domObserver.stop(), e.contentEditable = t, n.domObserver.start();
}
function G4(n) {
  if (!tt || n.state.selection.$head.parentOffset > 0)
    return !1;
  let { focusNode: e, focusOffset: t } = n.domSelectionRange();
  if (e && e.nodeType == 1 && t == 0 && e.firstChild && e.firstChild.contentEditable == "false") {
    let r = e.firstChild;
    Zd(n, r, "true"), setTimeout(() => Zd(n, r, "false"), 20);
  }
  return !1;
}
function Y4(n) {
  let e = "";
  return n.ctrlKey && (e += "c"), n.metaKey && (e += "m"), n.altKey && (e += "a"), n.shiftKey && (e += "s"), e;
}
function Q4(n, e) {
  let t = e.keyCode, r = Y4(e);
  if (t == 8 || xt && t == 72 && r == "c")
    return $d(n, -1) || cr(n, -1);
  if (t == 46 && !e.shiftKey || xt && t == 68 && r == "c")
    return $d(n, 1) || cr(n, 1);
  if (t == 13 || t == 27)
    return !0;
  if (t == 37 || xt && t == 66 && r == "c") {
    let s = t == 37 ? Ld(n, n.state.selection.from) == "ltr" ? -1 : 1 : -1;
    return Dd(n, s, r) || cr(n, s);
  } else if (t == 39 || xt && t == 70 && r == "c") {
    let s = t == 39 ? Ld(n, n.state.selection.from) == "ltr" ? 1 : -1 : 1;
    return Dd(n, s, r) || cr(n, s);
  } else {
    if (t == 38 || xt && t == 80 && r == "c")
      return Pd(n, -1, r) || cr(n, -1);
    if (t == 40 || xt && t == 78 && r == "c")
      return G4(n) || Pd(n, 1, r) || cr(n, 1);
    if (r == (xt ? "m" : "c") && (t == 66 || t == 73 || t == 89 || t == 90))
      return !0;
  }
  return !1;
}
function z0(n, e) {
  n.someProp("transformCopied", (p) => {
    e = p(e, n);
  });
  let t = [], { content: r, openStart: s, openEnd: i } = e;
  for (; s > 1 && i > 1 && r.childCount == 1 && r.firstChild.childCount == 1; ) {
    s--, i--;
    let p = r.firstChild;
    t.push(p.type.name, p.attrs != p.type.defaultAttrs ? p.attrs : null), r = p.content;
  }
  let o = n.someProp("clipboardSerializer") || or.fromSchema(n.state.schema), a = K0(), l = a.createElement("div");
  l.appendChild(o.serializeFragment(r, { document: a }));
  let c = l.firstChild, d, f = 0;
  for (; c && c.nodeType == 1 && (d = U0[c.nodeName.toLowerCase()]); ) {
    for (let p = d.length - 1; p >= 0; p--) {
      let m = a.createElement(d[p]);
      for (; l.firstChild; )
        m.appendChild(l.firstChild);
      l.appendChild(m), f++;
    }
    c = l.firstChild;
  }
  c && c.nodeType == 1 && c.setAttribute("data-pm-slice", `${s} ${i}${f ? ` -${f}` : ""} ${JSON.stringify(t)}`);
  let h = n.someProp("clipboardTextSerializer", (p) => p(e, n)) || e.content.textBetween(0, e.content.size, `

`);
  return { dom: l, text: h, slice: e };
}
function j0(n, e, t, r, s) {
  let i = s.parent.type.spec.code, o, a;
  if (!t && !e)
    return null;
  let l = e && (r || i || !t);
  if (l) {
    if (n.someProp("transformPastedText", (h) => {
      e = h(e, i || r, n);
    }), i)
      return e ? new W(L.from(n.state.schema.text(e.replace(/\r\n?/g, `
`))), 0, 0) : W.empty;
    let f = n.someProp("clipboardTextParser", (h) => h(e, s, r, n));
    if (f)
      a = f;
    else {
      let h = s.marks(), { schema: p } = n.state, m = or.fromSchema(p);
      o = document.createElement("div"), e.split(/(?:\r\n?|\n)+/).forEach((b) => {
        let v = o.appendChild(document.createElement("p"));
        b && v.appendChild(m.serializeNode(p.text(b, h)));
      });
    }
  } else
    n.someProp("transformPastedHTML", (f) => {
      t = f(t, n);
    }), o = tb(t), Ds && nb(o);
  let c = o && o.querySelector("[data-pm-slice]"), d = c && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(c.getAttribute("data-pm-slice") || "");
  if (d && d[3])
    for (let f = +d[3]; f > 0; f--) {
      let h = o.firstChild;
      for (; h && h.nodeType != 1; )
        h = h.nextSibling;
      if (!h)
        break;
      o = h;
    }
  if (a || (a = (n.someProp("clipboardParser") || n.someProp("domParser") || yn.fromSchema(n.state.schema)).parseSlice(o, {
    preserveWhitespace: !!(l || d),
    context: s,
    ruleFromNode(h) {
      return h.nodeName == "BR" && !h.nextSibling && h.parentNode && !X4.test(h.parentNode.nodeName) ? { ignore: !0 } : null;
    }
  })), d)
    a = rb(Vd(a, +d[1], +d[2]), d[4]);
  else if (a = W.maxOpen(eb(a.content, s), !0), a.openStart || a.openEnd) {
    let f = 0, h = 0;
    for (let p = a.content.firstChild; f < a.openStart && !p.type.spec.isolating; f++, p = p.firstChild)
      ;
    for (let p = a.content.lastChild; h < a.openEnd && !p.type.spec.isolating; h++, p = p.lastChild)
      ;
    a = Vd(a, f, h);
  }
  return n.someProp("transformPasted", (f) => {
    a = f(a, n);
  }), a;
}
const X4 = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
function eb(n, e) {
  if (n.childCount < 2)
    return n;
  for (let t = e.depth; t >= 0; t--) {
    let s = e.node(t).contentMatchAt(e.index(t)), i, o = [];
    if (n.forEach((a) => {
      if (!o)
        return;
      let l = s.findWrapping(a.type), c;
      if (!l)
        return o = null;
      if (c = o.length && i.length && B0(l, i, a, o[o.length - 1], 0))
        o[o.length - 1] = c;
      else {
        o.length && (o[o.length - 1] = W0(o[o.length - 1], i.length));
        let d = F0(a, l);
        o.push(d), s = s.matchType(d.type), i = l;
      }
    }), o)
      return L.from(o);
  }
  return n;
}
function F0(n, e, t = 0) {
  for (let r = e.length - 1; r >= t; r--)
    n = e[r].create(null, L.from(n));
  return n;
}
function B0(n, e, t, r, s) {
  if (s < n.length && s < e.length && n[s] == e[s]) {
    let i = B0(n, e, t, r.lastChild, s + 1);
    if (i)
      return r.copy(r.content.replaceChild(r.childCount - 1, i));
    if (r.contentMatchAt(r.childCount).matchType(s == n.length - 1 ? t.type : n[s + 1]))
      return r.copy(r.content.append(L.from(F0(t, n, s + 1))));
  }
}
function W0(n, e) {
  if (e == 0)
    return n;
  let t = n.content.replaceChild(n.childCount - 1, W0(n.lastChild, e - 1)), r = n.contentMatchAt(n.childCount).fillBefore(L.empty, !0);
  return n.copy(t.append(r));
}
function Ca(n, e, t, r, s, i) {
  let o = e < 0 ? n.firstChild : n.lastChild, a = o.content;
  return n.childCount > 1 && (i = 0), s < r - 1 && (a = Ca(a, e, t, r, s + 1, i)), s >= t && (a = e < 0 ? o.contentMatchAt(0).fillBefore(a, i <= s).append(a) : a.append(o.contentMatchAt(o.childCount).fillBefore(L.empty, !0))), n.replaceChild(e < 0 ? 0 : n.childCount - 1, o.copy(a));
}
function Vd(n, e, t) {
  return e < n.openStart && (n = new W(Ca(n.content, -1, e, n.openStart, 0, n.openEnd), e, n.openEnd)), t < n.openEnd && (n = new W(Ca(n.content, 1, t, n.openEnd, 0, 0), n.openStart, t)), n;
}
const U0 = {
  thead: ["table"],
  tbody: ["table"],
  tfoot: ["table"],
  caption: ["table"],
  colgroup: ["table"],
  col: ["table", "colgroup"],
  tr: ["table", "tbody"],
  td: ["table", "tbody", "tr"],
  th: ["table", "tbody", "tr"]
};
let zd = null;
function K0() {
  return zd || (zd = document.implementation.createHTMLDocument("title"));
}
function tb(n) {
  let e = /^(\s*<meta [^>]*>)*/.exec(n);
  e && (n = n.slice(e[0].length));
  let t = K0().createElement("div"), r = /<([a-z][^>\s]+)/i.exec(n), s;
  if ((s = r && U0[r[1].toLowerCase()]) && (n = s.map((i) => "<" + i + ">").join("") + n + s.map((i) => "</" + i + ">").reverse().join("")), t.innerHTML = n, s)
    for (let i = 0; i < s.length; i++)
      t = t.querySelector(s[i]) || t;
  return t;
}
function nb(n) {
  let e = n.querySelectorAll(Ye ? "span:not([class]):not([style])" : "span.Apple-converted-space");
  for (let t = 0; t < e.length; t++) {
    let r = e[t];
    r.childNodes.length == 1 && r.textContent == " " && r.parentNode && r.parentNode.replaceChild(n.ownerDocument.createTextNode(" "), r);
  }
}
function rb(n, e) {
  if (!n.size)
    return n;
  let t = n.content.firstChild.type.schema, r;
  try {
    r = JSON.parse(e);
  } catch {
    return n;
  }
  let { content: s, openStart: i, openEnd: o } = n;
  for (let a = r.length - 2; a >= 0; a -= 2) {
    let l = t.nodes[r[a]];
    if (!l || l.hasRequiredAttrs())
      break;
    s = L.from(l.create(r[a + 1], s)), i++, o++;
  }
  return new W(s, i, o);
}
const nt = {}, rt = {}, sb = { touchstart: !0, touchmove: !0 };
class ib {
  constructor() {
    this.shiftKey = !1, this.mouseDown = null, this.lastKeyCode = null, this.lastKeyCodeTime = 0, this.lastClick = { time: 0, x: 0, y: 0, type: "" }, this.lastSelectionOrigin = null, this.lastSelectionTime = 0, this.lastIOSEnter = 0, this.lastIOSEnterFallbackTimeout = -1, this.lastFocus = 0, this.lastTouch = 0, this.lastAndroidDelete = 0, this.composing = !1, this.compositionNode = null, this.composingTimeout = -1, this.compositionNodes = [], this.compositionEndedAt = -2e8, this.compositionID = 1, this.compositionPendingChanges = 0, this.domChangeCount = 0, this.eventHandlers = /* @__PURE__ */ Object.create(null), this.hideSelectionGuard = null;
  }
}
function ob(n) {
  for (let e in nt) {
    let t = nt[e];
    n.dom.addEventListener(e, n.input.eventHandlers[e] = (r) => {
      lb(n, r) && !cl(n, r) && (n.editable || !(r.type in rt)) && t(n, r);
    }, sb[e] ? { passive: !0 } : void 0);
  }
  tt && n.dom.addEventListener("input", () => null), Oa(n);
}
function gn(n, e) {
  n.input.lastSelectionOrigin = e, n.input.lastSelectionTime = Date.now();
}
function ab(n) {
  n.domObserver.stop();
  for (let e in n.input.eventHandlers)
    n.dom.removeEventListener(e, n.input.eventHandlers[e]);
  clearTimeout(n.input.composingTimeout), clearTimeout(n.input.lastIOSEnterFallbackTimeout);
}
function Oa(n) {
  n.someProp("handleDOMEvents", (e) => {
    for (let t in e)
      n.input.eventHandlers[t] || n.dom.addEventListener(t, n.input.eventHandlers[t] = (r) => cl(n, r));
  });
}
function cl(n, e) {
  return n.someProp("handleDOMEvents", (t) => {
    let r = t[e.type];
    return r ? r(n, e) || e.defaultPrevented : !1;
  });
}
function lb(n, e) {
  if (!e.bubbles)
    return !0;
  if (e.defaultPrevented)
    return !1;
  for (let t = e.target; t != n.dom; t = t.parentNode)
    if (!t || t.nodeType == 11 || t.pmViewDesc && t.pmViewDesc.stopEvent(e))
      return !1;
  return !0;
}
function cb(n, e) {
  !cl(n, e) && nt[e.type] && (n.editable || !(e.type in rt)) && nt[e.type](n, e);
}
rt.keydown = (n, e) => {
  let t = e;
  if (n.input.shiftKey = t.keyCode == 16 || t.shiftKey, !J0(n, t) && (n.input.lastKeyCode = t.keyCode, n.input.lastKeyCodeTime = Date.now(), !(St && Ye && t.keyCode == 13)))
    if (t.keyCode != 229 && n.domObserver.forceFlush(), Nr && t.keyCode == 13 && !t.ctrlKey && !t.altKey && !t.metaKey) {
      let r = Date.now();
      n.input.lastIOSEnter = r, n.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
        n.input.lastIOSEnter == r && (n.someProp("handleKeyDown", (s) => s(n, Rn(13, "Enter"))), n.input.lastIOSEnter = 0);
      }, 200);
    } else n.someProp("handleKeyDown", (r) => r(n, t)) || Q4(n, t) ? t.preventDefault() : gn(n, "key");
};
rt.keyup = (n, e) => {
  e.keyCode == 16 && (n.input.shiftKey = !1);
};
rt.keypress = (n, e) => {
  let t = e;
  if (J0(n, t) || !t.charCode || t.ctrlKey && !t.altKey || xt && t.metaKey)
    return;
  if (n.someProp("handleKeyPress", (s) => s(n, t))) {
    t.preventDefault();
    return;
  }
  let r = n.state.selection;
  if (!(r instanceof le) || !r.$from.sameParent(r.$to)) {
    let s = String.fromCharCode(t.charCode);
    !/[\r\n]/.test(s) && !n.someProp("handleTextInput", (i) => i(n, r.$from.pos, r.$to.pos, s)) && n.dispatch(n.state.tr.insertText(s).scrollIntoView()), t.preventDefault();
  }
};
function fo(n) {
  return { left: n.clientX, top: n.clientY };
}
function db(n, e) {
  let t = e.x - n.clientX, r = e.y - n.clientY;
  return t * t + r * r < 100;
}
function dl(n, e, t, r, s) {
  if (r == -1)
    return !1;
  let i = n.state.doc.resolve(r);
  for (let o = i.depth + 1; o > 0; o--)
    if (n.someProp(e, (a) => o > i.depth ? a(n, t, i.nodeAfter, i.before(o), s, !0) : a(n, t, i.node(o), i.before(o), s, !1)))
      return !0;
  return !1;
}
function Mr(n, e, t) {
  if (n.focused || n.focus(), n.state.selection.eq(e))
    return;
  let r = n.state.tr.setSelection(e);
  r.setMeta("pointer", !0), n.dispatch(r);
}
function ub(n, e) {
  if (e == -1)
    return !1;
  let t = n.state.doc.resolve(e), r = t.nodeAfter;
  return r && r.isAtom && ne.isSelectable(r) ? (Mr(n, new ne(t)), !0) : !1;
}
function fb(n, e) {
  if (e == -1)
    return !1;
  let t = n.state.selection, r, s;
  t instanceof ne && (r = t.node);
  let i = n.state.doc.resolve(e);
  for (let o = i.depth + 1; o > 0; o--) {
    let a = o > i.depth ? i.nodeAfter : i.node(o);
    if (ne.isSelectable(a)) {
      r && t.$from.depth > 0 && o >= t.$from.depth && i.before(t.$from.depth + 1) == t.$from.pos ? s = i.before(t.$from.depth) : s = i.before(o);
      break;
    }
  }
  return s != null ? (Mr(n, ne.create(n.state.doc, s)), !0) : !1;
}
function hb(n, e, t, r, s) {
  return dl(n, "handleClickOn", e, t, r) || n.someProp("handleClick", (i) => i(n, e, r)) || (s ? fb(n, t) : ub(n, t));
}
function pb(n, e, t, r) {
  return dl(n, "handleDoubleClickOn", e, t, r) || n.someProp("handleDoubleClick", (s) => s(n, e, r));
}
function mb(n, e, t, r) {
  return dl(n, "handleTripleClickOn", e, t, r) || n.someProp("handleTripleClick", (s) => s(n, e, r)) || gb(n, t, r);
}
function gb(n, e, t) {
  if (t.button != 0)
    return !1;
  let r = n.state.doc;
  if (e == -1)
    return r.inlineContent ? (Mr(n, le.create(r, 0, r.content.size)), !0) : !1;
  let s = r.resolve(e);
  for (let i = s.depth + 1; i > 0; i--) {
    let o = i > s.depth ? s.nodeAfter : s.node(i), a = s.before(i);
    if (o.inlineContent)
      Mr(n, le.create(r, a + 1, a + 1 + o.content.size));
    else if (ne.isSelectable(o))
      Mr(n, ne.create(r, a));
    else
      continue;
    return !0;
  }
}
function ul(n) {
  return hi(n);
}
const q0 = xt ? "metaKey" : "ctrlKey";
nt.mousedown = (n, e) => {
  let t = e;
  n.input.shiftKey = t.shiftKey;
  let r = ul(n), s = Date.now(), i = "singleClick";
  s - n.input.lastClick.time < 500 && db(t, n.input.lastClick) && !t[q0] && (n.input.lastClick.type == "singleClick" ? i = "doubleClick" : n.input.lastClick.type == "doubleClick" && (i = "tripleClick")), n.input.lastClick = { time: s, x: t.clientX, y: t.clientY, type: i };
  let o = n.posAtCoords(fo(t));
  o && (i == "singleClick" ? (n.input.mouseDown && n.input.mouseDown.done(), n.input.mouseDown = new yb(n, o, t, !!r)) : (i == "doubleClick" ? pb : mb)(n, o.pos, o.inside, t) ? t.preventDefault() : gn(n, "pointer"));
};
class yb {
  constructor(e, t, r, s) {
    this.view = e, this.pos = t, this.event = r, this.flushed = s, this.delayedSelectionSync = !1, this.mightDrag = null, this.startDoc = e.state.doc, this.selectNode = !!r[q0], this.allowDefault = r.shiftKey;
    let i, o;
    if (t.inside > -1)
      i = e.state.doc.nodeAt(t.inside), o = t.inside;
    else {
      let d = e.state.doc.resolve(t.pos);
      i = d.parent, o = d.depth ? d.before() : 0;
    }
    const a = s ? null : r.target, l = a ? e.docView.nearestDesc(a, !0) : null;
    this.target = l && l.dom.nodeType == 1 ? l.dom : null;
    let { selection: c } = e.state;
    (r.button == 0 && i.type.spec.draggable && i.type.spec.selectable !== !1 || c instanceof ne && c.from <= o && c.to > o) && (this.mightDrag = {
      node: i,
      pos: o,
      addAttr: !!(this.target && !this.target.draggable),
      setUneditable: !!(this.target && Nt && !this.target.hasAttribute("contentEditable"))
    }), this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable) && (this.view.domObserver.stop(), this.mightDrag.addAttr && (this.target.draggable = !0), this.mightDrag.setUneditable && setTimeout(() => {
      this.view.input.mouseDown == this && this.target.setAttribute("contentEditable", "false");
    }, 20), this.view.domObserver.start()), e.root.addEventListener("mouseup", this.up = this.up.bind(this)), e.root.addEventListener("mousemove", this.move = this.move.bind(this)), gn(e, "pointer");
  }
  done() {
    this.view.root.removeEventListener("mouseup", this.up), this.view.root.removeEventListener("mousemove", this.move), this.mightDrag && this.target && (this.view.domObserver.stop(), this.mightDrag.addAttr && this.target.removeAttribute("draggable"), this.mightDrag.setUneditable && this.target.removeAttribute("contentEditable"), this.view.domObserver.start()), this.delayedSelectionSync && setTimeout(() => Qt(this.view)), this.view.input.mouseDown = null;
  }
  up(e) {
    if (this.done(), !this.view.dom.contains(e.target))
      return;
    let t = this.pos;
    this.view.state.doc != this.startDoc && (t = this.view.posAtCoords(fo(e))), this.updateAllowDefault(e), this.allowDefault || !t ? gn(this.view, "pointer") : hb(this.view, t.pos, t.inside, e, this.selectNode) ? e.preventDefault() : e.button == 0 && (this.flushed || // Safari ignores clicks on draggable elements
    tt && this.mightDrag && !this.mightDrag.node.isAtom || // Chrome will sometimes treat a node selection as a
    // cursor, but still report that the node is selected
    // when asked through getSelection. You'll then get a
    // situation where clicking at the point where that
    // (hidden) cursor is doesn't change the selection, and
    // thus doesn't get a reaction from ProseMirror. This
    // works around that.
    Ye && !this.view.state.selection.visible && Math.min(Math.abs(t.pos - this.view.state.selection.from), Math.abs(t.pos - this.view.state.selection.to)) <= 2) ? (Mr(this.view, ue.near(this.view.state.doc.resolve(t.pos))), e.preventDefault()) : gn(this.view, "pointer");
  }
  move(e) {
    this.updateAllowDefault(e), gn(this.view, "pointer"), e.buttons == 0 && this.done();
  }
  updateAllowDefault(e) {
    !this.allowDefault && (Math.abs(this.event.x - e.clientX) > 4 || Math.abs(this.event.y - e.clientY) > 4) && (this.allowDefault = !0);
  }
}
nt.touchstart = (n) => {
  n.input.lastTouch = Date.now(), ul(n), gn(n, "pointer");
};
nt.touchmove = (n) => {
  n.input.lastTouch = Date.now(), gn(n, "pointer");
};
nt.contextmenu = (n) => ul(n);
function J0(n, e) {
  return n.composing ? !0 : tt && Math.abs(e.timeStamp - n.input.compositionEndedAt) < 500 ? (n.input.compositionEndedAt = -2e8, !0) : !1;
}
const bb = St ? 5e3 : -1;
rt.compositionstart = rt.compositionupdate = (n) => {
  if (!n.composing) {
    n.domObserver.flush();
    let { state: e } = n, t = e.selection.$to;
    if (e.selection instanceof le && (e.storedMarks || !t.textOffset && t.parentOffset && t.nodeBefore.marks.some((r) => r.type.spec.inclusive === !1)))
      n.markCursor = n.state.storedMarks || t.marks(), hi(n, !0), n.markCursor = null;
    else if (hi(n, !e.selection.empty), Nt && e.selection.empty && t.parentOffset && !t.textOffset && t.nodeBefore.marks.length) {
      let r = n.domSelectionRange();
      for (let s = r.focusNode, i = r.focusOffset; s && s.nodeType == 1 && i != 0; ) {
        let o = i < 0 ? s.lastChild : s.childNodes[i - 1];
        if (!o)
          break;
        if (o.nodeType == 3) {
          let a = n.domSelection();
          a && a.collapse(o, o.nodeValue.length);
          break;
        } else
          s = o, i = -1;
      }
    }
    n.input.composing = !0;
  }
  G0(n, bb);
};
rt.compositionend = (n, e) => {
  n.composing && (n.input.composing = !1, n.input.compositionEndedAt = e.timeStamp, n.input.compositionPendingChanges = n.domObserver.pendingRecords().length ? n.input.compositionID : 0, n.input.compositionNode = null, n.input.compositionPendingChanges && Promise.resolve().then(() => n.domObserver.flush()), n.input.compositionID++, G0(n, 20));
};
function G0(n, e) {
  clearTimeout(n.input.composingTimeout), e > -1 && (n.input.composingTimeout = setTimeout(() => hi(n), e));
}
function Y0(n) {
  for (n.composing && (n.input.composing = !1, n.input.compositionEndedAt = xb()); n.input.compositionNodes.length > 0; )
    n.input.compositionNodes.pop().markParentsDirty();
}
function vb(n) {
  let e = n.domSelectionRange();
  if (!e.focusNode)
    return null;
  let t = f4(e.focusNode, e.focusOffset), r = h4(e.focusNode, e.focusOffset);
  if (t && r && t != r) {
    let s = r.pmViewDesc, i = n.domObserver.lastChangedTextNode;
    if (t == i || r == i)
      return i;
    if (!s || !s.isText(r.nodeValue))
      return r;
    if (n.input.compositionNode == r) {
      let o = t.pmViewDesc;
      if (!(!o || !o.isText(t.nodeValue)))
        return r;
    }
  }
  return t || r;
}
function xb() {
  let n = document.createEvent("Event");
  return n.initEvent("event", !0, !0), n.timeStamp;
}
function hi(n, e = !1) {
  if (!(St && n.domObserver.flushingSoon >= 0)) {
    if (n.domObserver.forceFlush(), Y0(n), e || n.docView && n.docView.dirty) {
      let t = al(n);
      return t && !t.eq(n.state.selection) ? n.dispatch(n.state.tr.setSelection(t)) : (n.markCursor || e) && !n.state.selection.empty ? n.dispatch(n.state.tr.deleteSelection()) : n.updateState(n.state), !0;
    }
    return !1;
  }
}
function kb(n, e) {
  if (!n.dom.parentNode)
    return;
  let t = n.dom.parentNode.appendChild(document.createElement("div"));
  t.appendChild(e), t.style.cssText = "position: fixed; left: -10000px; top: 10px";
  let r = getSelection(), s = document.createRange();
  s.selectNodeContents(e), n.dom.blur(), r.removeAllRanges(), r.addRange(s), setTimeout(() => {
    t.parentNode && t.parentNode.removeChild(t), n.focus();
  }, 50);
}
const ds = at && bn < 15 || Nr && b4 < 604;
nt.copy = rt.cut = (n, e) => {
  let t = e, r = n.state.selection, s = t.type == "cut";
  if (r.empty)
    return;
  let i = ds ? null : t.clipboardData, o = r.content(), { dom: a, text: l } = z0(n, o);
  i ? (t.preventDefault(), i.clearData(), i.setData("text/html", a.innerHTML), i.setData("text/plain", l)) : kb(n, a), s && n.dispatch(n.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
};
function wb(n) {
  return n.openStart == 0 && n.openEnd == 0 && n.content.childCount == 1 ? n.content.firstChild : null;
}
function Eb(n, e) {
  if (!n.dom.parentNode)
    return;
  let t = n.input.shiftKey || n.state.selection.$from.parent.type.spec.code, r = n.dom.parentNode.appendChild(document.createElement(t ? "textarea" : "div"));
  t || (r.contentEditable = "true"), r.style.cssText = "position: fixed; left: -10000px; top: 10px", r.focus();
  let s = n.input.shiftKey && n.input.lastKeyCode != 45;
  setTimeout(() => {
    n.focus(), r.parentNode && r.parentNode.removeChild(r), t ? us(n, r.value, null, s, e) : us(n, r.textContent, r.innerHTML, s, e);
  }, 50);
}
function us(n, e, t, r, s) {
  let i = j0(n, e, t, r, n.state.selection.$from);
  if (n.someProp("handlePaste", (l) => l(n, s, i || W.empty)))
    return !0;
  if (!i)
    return !1;
  let o = wb(i), a = o ? n.state.tr.replaceSelectionWith(o, r) : n.state.tr.replaceSelection(i);
  return n.dispatch(a.scrollIntoView().setMeta("paste", !0).setMeta("uiEvent", "paste")), !0;
}
function Q0(n) {
  let e = n.getData("text/plain") || n.getData("Text");
  if (e)
    return e;
  let t = n.getData("text/uri-list");
  return t ? t.replace(/\r?\n/g, " ") : "";
}
rt.paste = (n, e) => {
  let t = e;
  if (n.composing && !St)
    return;
  let r = ds ? null : t.clipboardData, s = n.input.shiftKey && n.input.lastKeyCode != 45;
  r && us(n, Q0(r), r.getData("text/html"), s, t) ? t.preventDefault() : Eb(n, t);
};
class X0 {
  constructor(e, t, r) {
    this.slice = e, this.move = t, this.node = r;
  }
}
const eh = xt ? "altKey" : "ctrlKey";
nt.dragstart = (n, e) => {
  let t = e, r = n.input.mouseDown;
  if (r && r.done(), !t.dataTransfer)
    return;
  let s = n.state.selection, i = s.empty ? null : n.posAtCoords(fo(t)), o;
  if (!(i && i.pos >= s.from && i.pos <= (s instanceof ne ? s.to - 1 : s.to))) {
    if (r && r.mightDrag)
      o = ne.create(n.state.doc, r.mightDrag.pos);
    else if (t.target && t.target.nodeType == 1) {
      let f = n.docView.nearestDesc(t.target, !0);
      f && f.node.type.spec.draggable && f != n.docView && (o = ne.create(n.state.doc, f.posBefore));
    }
  }
  let a = (o || n.state.selection).content(), { dom: l, text: c, slice: d } = z0(n, a);
  (!t.dataTransfer.files.length || !Ye || S0 > 120) && t.dataTransfer.clearData(), t.dataTransfer.setData(ds ? "Text" : "text/html", l.innerHTML), t.dataTransfer.effectAllowed = "copyMove", ds || t.dataTransfer.setData("text/plain", c), n.dragging = new X0(d, !t[eh], o);
};
nt.dragend = (n) => {
  let e = n.dragging;
  window.setTimeout(() => {
    n.dragging == e && (n.dragging = null);
  }, 50);
};
rt.dragover = rt.dragenter = (n, e) => e.preventDefault();
rt.drop = (n, e) => {
  let t = e, r = n.dragging;
  if (n.dragging = null, !t.dataTransfer)
    return;
  let s = n.posAtCoords(fo(t));
  if (!s)
    return;
  let i = n.state.doc.resolve(s.pos), o = r && r.slice;
  o ? n.someProp("transformPasted", (m) => {
    o = m(o, n);
  }) : o = j0(n, Q0(t.dataTransfer), ds ? null : t.dataTransfer.getData("text/html"), !1, i);
  let a = !!(r && !t[eh]);
  if (n.someProp("handleDrop", (m) => m(n, t, o || W.empty, a))) {
    t.preventDefault();
    return;
  }
  if (!o)
    return;
  t.preventDefault();
  let l = o ? g0(n.state.doc, i.pos, o) : i.pos;
  l == null && (l = i.pos);
  let c = n.state.tr;
  if (a) {
    let { node: m } = r;
    m ? m.replace(c) : c.deleteSelection();
  }
  let d = c.mapping.map(l), f = o.openStart == 0 && o.openEnd == 0 && o.content.childCount == 1, h = c.doc;
  if (f ? c.replaceRangeWith(d, d, o.content.firstChild) : c.replaceRange(d, d, o), c.doc.eq(h))
    return;
  let p = c.doc.resolve(d);
  if (f && ne.isSelectable(o.content.firstChild) && p.nodeAfter && p.nodeAfter.sameMarkup(o.content.firstChild))
    c.setSelection(new ne(p));
  else {
    let m = c.mapping.map(l);
    c.mapping.maps[c.mapping.maps.length - 1].forEach((b, v, w, H) => m = H), c.setSelection(ll(n, p, c.doc.resolve(m)));
  }
  n.focus(), n.dispatch(c.setMeta("uiEvent", "drop"));
};
nt.focus = (n) => {
  n.input.lastFocus = Date.now(), n.focused || (n.domObserver.stop(), n.dom.classList.add("ProseMirror-focused"), n.domObserver.start(), n.focused = !0, setTimeout(() => {
    n.docView && n.hasFocus() && !n.domObserver.currentSelection.eq(n.domSelectionRange()) && Qt(n);
  }, 20));
};
nt.blur = (n, e) => {
  let t = e;
  n.focused && (n.domObserver.stop(), n.dom.classList.remove("ProseMirror-focused"), n.domObserver.start(), t.relatedTarget && n.dom.contains(t.relatedTarget) && n.domObserver.currentSelection.clear(), n.focused = !1);
};
nt.beforeinput = (n, e) => {
  if (Ye && St && e.inputType == "deleteContentBackward") {
    n.domObserver.flushSoon();
    let { domChangeCount: r } = n.input;
    setTimeout(() => {
      if (n.input.domChangeCount != r || (n.dom.blur(), n.focus(), n.someProp("handleKeyDown", (i) => i(n, Rn(8, "Backspace")))))
        return;
      let { $cursor: s } = n.state.selection;
      s && s.pos > 0 && n.dispatch(n.state.tr.delete(s.pos - 1, s.pos).scrollIntoView());
    }, 50);
  }
};
for (let n in rt)
  nt[n] = rt[n];
function fs(n, e) {
  if (n == e)
    return !0;
  for (let t in n)
    if (n[t] !== e[t])
      return !1;
  for (let t in e)
    if (!(t in n))
      return !1;
  return !0;
}
class pi {
  constructor(e, t) {
    this.toDOM = e, this.spec = t || Bn, this.side = this.spec.side || 0;
  }
  map(e, t, r, s) {
    let { pos: i, deleted: o } = e.mapResult(t.from + s, this.side < 0 ? -1 : 1);
    return o ? null : new kt(i - r, i - r, this);
  }
  valid() {
    return !0;
  }
  eq(e) {
    return this == e || e instanceof pi && (this.spec.key && this.spec.key == e.spec.key || this.toDOM == e.toDOM && fs(this.spec, e.spec));
  }
  destroy(e) {
    this.spec.destroy && this.spec.destroy(e);
  }
}
class xn {
  constructor(e, t) {
    this.attrs = e, this.spec = t || Bn;
  }
  map(e, t, r, s) {
    let i = e.map(t.from + s, this.spec.inclusiveStart ? -1 : 1) - r, o = e.map(t.to + s, this.spec.inclusiveEnd ? 1 : -1) - r;
    return i >= o ? null : new kt(i, o, this);
  }
  valid(e, t) {
    return t.from < t.to;
  }
  eq(e) {
    return this == e || e instanceof xn && fs(this.attrs, e.attrs) && fs(this.spec, e.spec);
  }
  static is(e) {
    return e.type instanceof xn;
  }
  destroy() {
  }
}
class fl {
  constructor(e, t) {
    this.attrs = e, this.spec = t || Bn;
  }
  map(e, t, r, s) {
    let i = e.mapResult(t.from + s, 1);
    if (i.deleted)
      return null;
    let o = e.mapResult(t.to + s, -1);
    return o.deleted || o.pos <= i.pos ? null : new kt(i.pos - r, o.pos - r, this);
  }
  valid(e, t) {
    let { index: r, offset: s } = e.content.findIndex(t.from), i;
    return s == t.from && !(i = e.child(r)).isText && s + i.nodeSize == t.to;
  }
  eq(e) {
    return this == e || e instanceof fl && fs(this.attrs, e.attrs) && fs(this.spec, e.spec);
  }
  destroy() {
  }
}
class kt {
  /**
  @internal
  */
  constructor(e, t, r) {
    this.from = e, this.to = t, this.type = r;
  }
  /**
  @internal
  */
  copy(e, t) {
    return new kt(e, t, this.type);
  }
  /**
  @internal
  */
  eq(e, t = 0) {
    return this.type.eq(e.type) && this.from + t == e.from && this.to + t == e.to;
  }
  /**
  @internal
  */
  map(e, t, r) {
    return this.type.map(e, this, t, r);
  }
  /**
  Creates a widget decoration, which is a DOM node that's shown in
  the document at the given position. It is recommended that you
  delay rendering the widget by passing a function that will be
  called when the widget is actually drawn in a view, but you can
  also directly pass a DOM node. `getPos` can be used to find the
  widget's current document position.
  */
  static widget(e, t, r) {
    return new kt(e, e, new pi(t, r));
  }
  /**
  Creates an inline decoration, which adds the given attributes to
  each inline node between `from` and `to`.
  */
  static inline(e, t, r, s) {
    return new kt(e, t, new xn(r, s));
  }
  /**
  Creates a node decoration. `from` and `to` should point precisely
  before and after a node in the document. That node, and only that
  node, will receive the given attributes.
  */
  static node(e, t, r, s) {
    return new kt(e, t, new fl(r, s));
  }
  /**
  The spec provided when creating this decoration. Can be useful
  if you've stored extra information in that object.
  */
  get spec() {
    return this.type.spec;
  }
  /**
  @internal
  */
  get inline() {
    return this.type instanceof xn;
  }
  /**
  @internal
  */
  get widget() {
    return this.type instanceof pi;
  }
}
const hr = [], Bn = {};
class $e {
  /**
  @internal
  */
  constructor(e, t) {
    this.local = e.length ? e : hr, this.children = t.length ? t : hr;
  }
  /**
  Create a set of decorations, using the structure of the given
  document. This will consume (modify) the `decorations` array, so
  you must make a copy if you want need to preserve that.
  */
  static create(e, t) {
    return t.length ? mi(t, e, 0, Bn) : Ge;
  }
  /**
  Find all decorations in this set which touch the given range
  (including decorations that start or end directly at the
  boundaries) and match the given predicate on their spec. When
  `start` and `end` are omitted, all decorations in the set are
  considered. When `predicate` isn't given, all decorations are
  assumed to match.
  */
  find(e, t, r) {
    let s = [];
    return this.findInner(e ?? 0, t ?? 1e9, s, 0, r), s;
  }
  findInner(e, t, r, s, i) {
    for (let o = 0; o < this.local.length; o++) {
      let a = this.local[o];
      a.from <= t && a.to >= e && (!i || i(a.spec)) && r.push(a.copy(a.from + s, a.to + s));
    }
    for (let o = 0; o < this.children.length; o += 3)
      if (this.children[o] < t && this.children[o + 1] > e) {
        let a = this.children[o] + 1;
        this.children[o + 2].findInner(e - a, t - a, r, s + a, i);
      }
  }
  /**
  Map the set of decorations in response to a change in the
  document.
  */
  map(e, t, r) {
    return this == Ge || e.maps.length == 0 ? this : this.mapInner(e, t, 0, 0, r || Bn);
  }
  /**
  @internal
  */
  mapInner(e, t, r, s, i) {
    let o;
    for (let a = 0; a < this.local.length; a++) {
      let l = this.local[a].map(e, r, s);
      l && l.type.valid(t, l) ? (o || (o = [])).push(l) : i.onRemove && i.onRemove(this.local[a].spec);
    }
    return this.children.length ? Mb(this.children, o || [], e, t, r, s, i) : o ? new $e(o.sort(Wn), hr) : Ge;
  }
  /**
  Add the given array of decorations to the ones in the set,
  producing a new set. Consumes the `decorations` array. Needs
  access to the current document to create the appropriate tree
  structure.
  */
  add(e, t) {
    return t.length ? this == Ge ? $e.create(e, t) : this.addInner(e, t, 0) : this;
  }
  addInner(e, t, r) {
    let s, i = 0;
    e.forEach((a, l) => {
      let c = l + r, d;
      if (d = nh(t, a, c)) {
        for (s || (s = this.children.slice()); i < s.length && s[i] < l; )
          i += 3;
        s[i] == l ? s[i + 2] = s[i + 2].addInner(a, d, c + 1) : s.splice(i, 0, l, l + a.nodeSize, mi(d, a, c + 1, Bn)), i += 3;
      }
    });
    let o = th(i ? rh(t) : t, -r);
    for (let a = 0; a < o.length; a++)
      o[a].type.valid(e, o[a]) || o.splice(a--, 1);
    return new $e(o.length ? this.local.concat(o).sort(Wn) : this.local, s || this.children);
  }
  /**
  Create a new set that contains the decorations in this set, minus
  the ones in the given array.
  */
  remove(e) {
    return e.length == 0 || this == Ge ? this : this.removeInner(e, 0);
  }
  removeInner(e, t) {
    let r = this.children, s = this.local;
    for (let i = 0; i < r.length; i += 3) {
      let o, a = r[i] + t, l = r[i + 1] + t;
      for (let d = 0, f; d < e.length; d++)
        (f = e[d]) && f.from > a && f.to < l && (e[d] = null, (o || (o = [])).push(f));
      if (!o)
        continue;
      r == this.children && (r = this.children.slice());
      let c = r[i + 2].removeInner(o, a + 1);
      c != Ge ? r[i + 2] = c : (r.splice(i, 3), i -= 3);
    }
    if (s.length) {
      for (let i = 0, o; i < e.length; i++)
        if (o = e[i])
          for (let a = 0; a < s.length; a++)
            s[a].eq(o, t) && (s == this.local && (s = this.local.slice()), s.splice(a--, 1));
    }
    return r == this.children && s == this.local ? this : s.length || r.length ? new $e(s, r) : Ge;
  }
  forChild(e, t) {
    if (this == Ge)
      return this;
    if (t.isLeaf)
      return $e.empty;
    let r, s;
    for (let a = 0; a < this.children.length; a += 3)
      if (this.children[a] >= e) {
        this.children[a] == e && (r = this.children[a + 2]);
        break;
      }
    let i = e + 1, o = i + t.content.size;
    for (let a = 0; a < this.local.length; a++) {
      let l = this.local[a];
      if (l.from < o && l.to > i && l.type instanceof xn) {
        let c = Math.max(i, l.from) - i, d = Math.min(o, l.to) - i;
        c < d && (s || (s = [])).push(l.copy(c, d));
      }
    }
    if (s) {
      let a = new $e(s.sort(Wn), hr);
      return r ? new un([a, r]) : a;
    }
    return r || Ge;
  }
  /**
  @internal
  */
  eq(e) {
    if (this == e)
      return !0;
    if (!(e instanceof $e) || this.local.length != e.local.length || this.children.length != e.children.length)
      return !1;
    for (let t = 0; t < this.local.length; t++)
      if (!this.local[t].eq(e.local[t]))
        return !1;
    for (let t = 0; t < this.children.length; t += 3)
      if (this.children[t] != e.children[t] || this.children[t + 1] != e.children[t + 1] || !this.children[t + 2].eq(e.children[t + 2]))
        return !1;
    return !0;
  }
  /**
  @internal
  */
  locals(e) {
    return hl(this.localsInner(e));
  }
  /**
  @internal
  */
  localsInner(e) {
    if (this == Ge)
      return hr;
    if (e.inlineContent || !this.local.some(xn.is))
      return this.local;
    let t = [];
    for (let r = 0; r < this.local.length; r++)
      this.local[r].type instanceof xn || t.push(this.local[r]);
    return t;
  }
}
$e.empty = new $e([], []);
$e.removeOverlap = hl;
const Ge = $e.empty;
class un {
  constructor(e) {
    this.members = e;
  }
  map(e, t) {
    const r = this.members.map((s) => s.map(e, t, Bn));
    return un.from(r);
  }
  forChild(e, t) {
    if (t.isLeaf)
      return $e.empty;
    let r = [];
    for (let s = 0; s < this.members.length; s++) {
      let i = this.members[s].forChild(e, t);
      i != Ge && (i instanceof un ? r = r.concat(i.members) : r.push(i));
    }
    return un.from(r);
  }
  eq(e) {
    if (!(e instanceof un) || e.members.length != this.members.length)
      return !1;
    for (let t = 0; t < this.members.length; t++)
      if (!this.members[t].eq(e.members[t]))
        return !1;
    return !0;
  }
  locals(e) {
    let t, r = !0;
    for (let s = 0; s < this.members.length; s++) {
      let i = this.members[s].localsInner(e);
      if (i.length)
        if (!t)
          t = i;
        else {
          r && (t = t.slice(), r = !1);
          for (let o = 0; o < i.length; o++)
            t.push(i[o]);
        }
    }
    return t ? hl(r ? t : t.sort(Wn)) : hr;
  }
  // Create a group for the given array of decoration sets, or return
  // a single set when possible.
  static from(e) {
    switch (e.length) {
      case 0:
        return Ge;
      case 1:
        return e[0];
      default:
        return new un(e.every((t) => t instanceof $e) ? e : e.reduce((t, r) => t.concat(r instanceof $e ? r : r.members), []));
    }
  }
}
function Mb(n, e, t, r, s, i, o) {
  let a = n.slice();
  for (let c = 0, d = i; c < t.maps.length; c++) {
    let f = 0;
    t.maps[c].forEach((h, p, m, b) => {
      let v = b - m - (p - h);
      for (let w = 0; w < a.length; w += 3) {
        let H = a[w + 1];
        if (H < 0 || h > H + d - f)
          continue;
        let z = a[w] + d - f;
        p >= z ? a[w + 1] = h <= z ? -2 : -1 : h >= d && v && (a[w] += v, a[w + 1] += v);
      }
      f += v;
    }), d = t.maps[c].map(d, -1);
  }
  let l = !1;
  for (let c = 0; c < a.length; c += 3)
    if (a[c + 1] < 0) {
      if (a[c + 1] == -2) {
        l = !0, a[c + 1] = -1;
        continue;
      }
      let d = t.map(n[c] + i), f = d - s;
      if (f < 0 || f >= r.content.size) {
        l = !0;
        continue;
      }
      let h = t.map(n[c + 1] + i, -1), p = h - s, { index: m, offset: b } = r.content.findIndex(f), v = r.maybeChild(m);
      if (v && b == f && b + v.nodeSize == p) {
        let w = a[c + 2].mapInner(t, v, d + 1, n[c] + i + 1, o);
        w != Ge ? (a[c] = f, a[c + 1] = p, a[c + 2] = w) : (a[c + 1] = -2, l = !0);
      } else
        l = !0;
    }
  if (l) {
    let c = Sb(a, n, e, t, s, i, o), d = mi(c, r, 0, o);
    e = d.local;
    for (let f = 0; f < a.length; f += 3)
      a[f + 1] < 0 && (a.splice(f, 3), f -= 3);
    for (let f = 0, h = 0; f < d.children.length; f += 3) {
      let p = d.children[f];
      for (; h < a.length && a[h] < p; )
        h += 3;
      a.splice(h, 0, d.children[f], d.children[f + 1], d.children[f + 2]);
    }
  }
  return new $e(e.sort(Wn), a);
}
function th(n, e) {
  if (!e || !n.length)
    return n;
  let t = [];
  for (let r = 0; r < n.length; r++) {
    let s = n[r];
    t.push(new kt(s.from + e, s.to + e, s.type));
  }
  return t;
}
function Sb(n, e, t, r, s, i, o) {
  function a(l, c) {
    for (let d = 0; d < l.local.length; d++) {
      let f = l.local[d].map(r, s, c);
      f ? t.push(f) : o.onRemove && o.onRemove(l.local[d].spec);
    }
    for (let d = 0; d < l.children.length; d += 3)
      a(l.children[d + 2], l.children[d] + c + 1);
  }
  for (let l = 0; l < n.length; l += 3)
    n[l + 1] == -1 && a(n[l + 2], e[l] + i + 1);
  return t;
}
function nh(n, e, t) {
  if (e.isLeaf)
    return null;
  let r = t + e.nodeSize, s = null;
  for (let i = 0, o; i < n.length; i++)
    (o = n[i]) && o.from > t && o.to < r && ((s || (s = [])).push(o), n[i] = null);
  return s;
}
function rh(n) {
  let e = [];
  for (let t = 0; t < n.length; t++)
    n[t] != null && e.push(n[t]);
  return e;
}
function mi(n, e, t, r) {
  let s = [], i = !1;
  e.forEach((a, l) => {
    let c = nh(n, a, l + t);
    if (c) {
      i = !0;
      let d = mi(c, a, t + l + 1, r);
      d != Ge && s.push(l, l + a.nodeSize, d);
    }
  });
  let o = th(i ? rh(n) : n, -t).sort(Wn);
  for (let a = 0; a < o.length; a++)
    o[a].type.valid(e, o[a]) || (r.onRemove && r.onRemove(o[a].spec), o.splice(a--, 1));
  return o.length || s.length ? new $e(o, s) : Ge;
}
function Wn(n, e) {
  return n.from - e.from || n.to - e.to;
}
function hl(n) {
  let e = n;
  for (let t = 0; t < e.length - 1; t++) {
    let r = e[t];
    if (r.from != r.to)
      for (let s = t + 1; s < e.length; s++) {
        let i = e[s];
        if (i.from == r.from) {
          i.to != r.to && (e == n && (e = n.slice()), e[s] = i.copy(i.from, r.to), jd(e, s + 1, i.copy(r.to, i.to)));
          continue;
        } else {
          i.from < r.to && (e == n && (e = n.slice()), e[t] = r.copy(r.from, i.from), jd(e, s, r.copy(i.from, r.to)));
          break;
        }
      }
  }
  return e;
}
function jd(n, e, t) {
  for (; e < n.length && Wn(t, n[e]) > 0; )
    e++;
  n.splice(e, 0, t);
}
function Zo(n) {
  let e = [];
  return n.someProp("decorations", (t) => {
    let r = t(n.state);
    r && r != Ge && e.push(r);
  }), n.cursorWrapper && e.push($e.create(n.state.doc, [n.cursorWrapper.deco])), un.from(e);
}
const Ab = {
  childList: !0,
  characterData: !0,
  characterDataOldValue: !0,
  attributes: !0,
  attributeOldValue: !0,
  subtree: !0
}, Cb = at && bn <= 11;
class Ob {
  constructor() {
    this.anchorNode = null, this.anchorOffset = 0, this.focusNode = null, this.focusOffset = 0;
  }
  set(e) {
    this.anchorNode = e.anchorNode, this.anchorOffset = e.anchorOffset, this.focusNode = e.focusNode, this.focusOffset = e.focusOffset;
  }
  clear() {
    this.anchorNode = this.focusNode = null;
  }
  eq(e) {
    return e.anchorNode == this.anchorNode && e.anchorOffset == this.anchorOffset && e.focusNode == this.focusNode && e.focusOffset == this.focusOffset;
  }
}
class Tb {
  constructor(e, t) {
    this.view = e, this.handleDOMChange = t, this.queue = [], this.flushingSoon = -1, this.observer = null, this.currentSelection = new Ob(), this.onCharData = null, this.suppressingSelectionUpdates = !1, this.lastChangedTextNode = null, this.observer = window.MutationObserver && new window.MutationObserver((r) => {
      for (let s = 0; s < r.length; s++)
        this.queue.push(r[s]);
      at && bn <= 11 && r.some((s) => s.type == "childList" && s.removedNodes.length || s.type == "characterData" && s.oldValue.length > s.target.nodeValue.length) ? this.flushSoon() : this.flush();
    }), Cb && (this.onCharData = (r) => {
      this.queue.push({ target: r.target, type: "characterData", oldValue: r.prevValue }), this.flushSoon();
    }), this.onSelectionChange = this.onSelectionChange.bind(this);
  }
  flushSoon() {
    this.flushingSoon < 0 && (this.flushingSoon = window.setTimeout(() => {
      this.flushingSoon = -1, this.flush();
    }, 20));
  }
  forceFlush() {
    this.flushingSoon > -1 && (window.clearTimeout(this.flushingSoon), this.flushingSoon = -1, this.flush());
  }
  start() {
    this.observer && (this.observer.takeRecords(), this.observer.observe(this.view.dom, Ab)), this.onCharData && this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData), this.connectSelection();
  }
  stop() {
    if (this.observer) {
      let e = this.observer.takeRecords();
      if (e.length) {
        for (let t = 0; t < e.length; t++)
          this.queue.push(e[t]);
        window.setTimeout(() => this.flush(), 20);
      }
      this.observer.disconnect();
    }
    this.onCharData && this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData), this.disconnectSelection();
  }
  connectSelection() {
    this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
  }
  disconnectSelection() {
    this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
  }
  suppressSelectionUpdates() {
    this.suppressingSelectionUpdates = !0, setTimeout(() => this.suppressingSelectionUpdates = !1, 50);
  }
  onSelectionChange() {
    if (Rd(this.view)) {
      if (this.suppressingSelectionUpdates)
        return Qt(this.view);
      if (at && bn <= 11 && !this.view.state.selection.empty) {
        let e = this.view.domSelectionRange();
        if (e.focusNode && Qn(e.focusNode, e.focusOffset, e.anchorNode, e.anchorOffset))
          return this.flushSoon();
      }
      this.flush();
    }
  }
  setCurSelection() {
    this.currentSelection.set(this.view.domSelectionRange());
  }
  ignoreSelectionChange(e) {
    if (!e.focusNode)
      return !0;
    let t = /* @__PURE__ */ new Set(), r;
    for (let i = e.focusNode; i; i = cs(i))
      t.add(i);
    for (let i = e.anchorNode; i; i = cs(i))
      if (t.has(i)) {
        r = i;
        break;
      }
    let s = r && this.view.docView.nearestDesc(r);
    if (s && s.ignoreMutation({
      type: "selection",
      target: r.nodeType == 3 ? r.parentNode : r
    }))
      return this.setCurSelection(), !0;
  }
  pendingRecords() {
    if (this.observer)
      for (let e of this.observer.takeRecords())
        this.queue.push(e);
    return this.queue;
  }
  flush() {
    let { view: e } = this;
    if (!e.docView || this.flushingSoon > -1)
      return;
    let t = this.pendingRecords();
    t.length && (this.queue = []);
    let r = e.domSelectionRange(), s = !this.suppressingSelectionUpdates && !this.currentSelection.eq(r) && Rd(e) && !this.ignoreSelectionChange(r), i = -1, o = -1, a = !1, l = [];
    if (e.editable)
      for (let d = 0; d < t.length; d++) {
        let f = this.registerMutation(t[d], l);
        f && (i = i < 0 ? f.from : Math.min(f.from, i), o = o < 0 ? f.to : Math.max(f.to, o), f.typeOver && (a = !0));
      }
    if (Nt && l.length) {
      let d = l.filter((f) => f.nodeName == "BR");
      if (d.length == 2) {
        let [f, h] = d;
        f.parentNode && f.parentNode.parentNode == h.parentNode ? h.remove() : f.remove();
      } else {
        let { focusNode: f } = this.currentSelection;
        for (let h of d) {
          let p = h.parentNode;
          p && p.nodeName == "LI" && (!f || Hb(e, f) != p) && h.remove();
        }
      }
    }
    let c = null;
    i < 0 && s && e.input.lastFocus > Date.now() - 200 && Math.max(e.input.lastTouch, e.input.lastClick.time) < Date.now() - 300 && co(r) && (c = al(e)) && c.eq(ue.near(e.state.doc.resolve(0), 1)) ? (e.input.lastFocus = 0, Qt(e), this.currentSelection.set(r), e.scrollToSelection()) : (i > -1 || s) && (i > -1 && (e.docView.markDirty(i, o), Nb(e)), this.handleDOMChange(i, o, a, l), e.docView && e.docView.dirty ? e.updateState(e.state) : this.currentSelection.eq(r) || Qt(e), this.currentSelection.set(r));
  }
  registerMutation(e, t) {
    if (t.indexOf(e.target) > -1)
      return null;
    let r = this.view.docView.nearestDesc(e.target);
    if (e.type == "attributes" && (r == this.view.docView || e.attributeName == "contenteditable" || // Firefox sometimes fires spurious events for null/empty styles
    e.attributeName == "style" && !e.oldValue && !e.target.getAttribute("style")) || !r || r.ignoreMutation(e))
      return null;
    if (e.type == "childList") {
      for (let d = 0; d < e.addedNodes.length; d++) {
        let f = e.addedNodes[d];
        t.push(f), f.nodeType == 3 && (this.lastChangedTextNode = f);
      }
      if (r.contentDOM && r.contentDOM != r.dom && !r.contentDOM.contains(e.target))
        return { from: r.posBefore, to: r.posAfter };
      let s = e.previousSibling, i = e.nextSibling;
      if (at && bn <= 11 && e.addedNodes.length)
        for (let d = 0; d < e.addedNodes.length; d++) {
          let { previousSibling: f, nextSibling: h } = e.addedNodes[d];
          (!f || Array.prototype.indexOf.call(e.addedNodes, f) < 0) && (s = f), (!h || Array.prototype.indexOf.call(e.addedNodes, h) < 0) && (i = h);
        }
      let o = s && s.parentNode == e.target ? Ue(s) + 1 : 0, a = r.localPosFromDOM(e.target, o, -1), l = i && i.parentNode == e.target ? Ue(i) : e.target.childNodes.length, c = r.localPosFromDOM(e.target, l, 1);
      return { from: a, to: c };
    } else return e.type == "attributes" ? { from: r.posAtStart - r.border, to: r.posAtEnd + r.border } : (this.lastChangedTextNode = e.target, {
      from: r.posAtStart,
      to: r.posAtEnd,
      // An event was generated for a text change that didn't change
      // any text. Mark the dom change to fall back to assuming the
      // selection was typed over with an identical value if it can't
      // find another change.
      typeOver: e.target.nodeValue == e.oldValue
    });
  }
}
let Fd = /* @__PURE__ */ new WeakMap(), Bd = !1;
function Nb(n) {
  if (!Fd.has(n) && (Fd.set(n, null), ["normal", "nowrap", "pre-line"].indexOf(getComputedStyle(n.dom).whiteSpace) !== -1)) {
    if (n.requiresGeckoHackNode = Nt, Bd)
      return;
    console.warn("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package."), Bd = !0;
  }
}
function Wd(n, e) {
  let t = e.startContainer, r = e.startOffset, s = e.endContainer, i = e.endOffset, o = n.domAtPos(n.state.selection.anchor);
  return Qn(o.node, o.offset, s, i) && ([t, r, s, i] = [s, i, t, r]), { anchorNode: t, anchorOffset: r, focusNode: s, focusOffset: i };
}
function _b(n, e) {
  if (e.getComposedRanges) {
    let s = e.getComposedRanges(n.root)[0];
    if (s)
      return Wd(n, s);
  }
  let t;
  function r(s) {
    s.preventDefault(), s.stopImmediatePropagation(), t = s.getTargetRanges()[0];
  }
  return n.dom.addEventListener("beforeinput", r, !0), document.execCommand("indent"), n.dom.removeEventListener("beforeinput", r, !0), t ? Wd(n, t) : null;
}
function Hb(n, e) {
  for (let t = e.parentNode; t && t != n.dom; t = t.parentNode) {
    let r = n.docView.nearestDesc(t, !0);
    if (r && r.node.isBlock)
      return t;
  }
  return null;
}
function Ib(n, e, t) {
  let { node: r, fromOffset: s, toOffset: i, from: o, to: a } = n.docView.parseRange(e, t), l = n.domSelectionRange(), c, d = l.anchorNode;
  if (d && n.dom.contains(d.nodeType == 1 ? d : d.parentNode) && (c = [{ node: d, offset: l.anchorOffset }], co(l) || c.push({ node: l.focusNode, offset: l.focusOffset })), Ye && n.input.lastKeyCode === 8)
    for (let v = i; v > s; v--) {
      let w = r.childNodes[v - 1], H = w.pmViewDesc;
      if (w.nodeName == "BR" && !H) {
        i = v;
        break;
      }
      if (!H || H.size)
        break;
    }
  let f = n.state.doc, h = n.someProp("domParser") || yn.fromSchema(n.state.schema), p = f.resolve(o), m = null, b = h.parse(r, {
    topNode: p.parent,
    topMatch: p.parent.contentMatchAt(p.index()),
    topOpen: !0,
    from: s,
    to: i,
    preserveWhitespace: p.parent.type.whitespace == "pre" ? "full" : !0,
    findPositions: c,
    ruleFromNode: Rb,
    context: p
  });
  if (c && c[0].pos != null) {
    let v = c[0].pos, w = c[1] && c[1].pos;
    w == null && (w = v), m = { anchor: v + o, head: w + o };
  }
  return { doc: b, sel: m, from: o, to: a };
}
function Rb(n) {
  let e = n.pmViewDesc;
  if (e)
    return e.parseRule();
  if (n.nodeName == "BR" && n.parentNode) {
    if (tt && /^(ul|ol)$/i.test(n.parentNode.nodeName)) {
      let t = document.createElement("div");
      return t.appendChild(document.createElement("li")), { skip: t };
    } else if (n.parentNode.lastChild == n || tt && /^(tr|table)$/i.test(n.parentNode.nodeName))
      return { ignore: !0 };
  } else if (n.nodeName == "IMG" && n.getAttribute("mark-placeholder"))
    return { ignore: !0 };
  return null;
}
const Db = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
function Lb(n, e, t, r, s) {
  let i = n.input.compositionPendingChanges || (n.composing ? n.input.compositionID : 0);
  if (n.input.compositionPendingChanges = 0, e < 0) {
    let y = n.input.lastSelectionTime > Date.now() - 50 ? n.input.lastSelectionOrigin : null, E = al(n, y);
    if (E && !n.state.selection.eq(E)) {
      if (Ye && St && n.input.lastKeyCode === 13 && Date.now() - 100 < n.input.lastKeyCodeTime && n.someProp("handleKeyDown", (_) => _(n, Rn(13, "Enter"))))
        return;
      let O = n.state.tr.setSelection(E);
      y == "pointer" ? O.setMeta("pointer", !0) : y == "key" && O.scrollIntoView(), i && O.setMeta("composition", i), n.dispatch(O);
    }
    return;
  }
  let o = n.state.doc.resolve(e), a = o.sharedDepth(t);
  e = o.before(a + 1), t = n.state.doc.resolve(t).after(a + 1);
  let l = n.state.selection, c = Ib(n, e, t), d = n.state.doc, f = d.slice(c.from, c.to), h, p;
  n.input.lastKeyCode === 8 && Date.now() - 100 < n.input.lastKeyCodeTime ? (h = n.state.selection.to, p = "end") : (h = n.state.selection.from, p = "start"), n.input.lastKeyCode = null;
  let m = Zb(f.content, c.doc.content, c.from, h, p);
  if ((Nr && n.input.lastIOSEnter > Date.now() - 225 || St) && s.some((y) => y.nodeType == 1 && !Db.test(y.nodeName)) && (!m || m.endA >= m.endB) && n.someProp("handleKeyDown", (y) => y(n, Rn(13, "Enter")))) {
    n.input.lastIOSEnter = 0;
    return;
  }
  if (!m)
    if (r && l instanceof le && !l.empty && l.$head.sameParent(l.$anchor) && !n.composing && !(c.sel && c.sel.anchor != c.sel.head))
      m = { start: l.from, endA: l.to, endB: l.to };
    else {
      if (c.sel) {
        let y = Ud(n, n.state.doc, c.sel);
        if (y && !y.eq(n.state.selection)) {
          let E = n.state.tr.setSelection(y);
          i && E.setMeta("composition", i), n.dispatch(E);
        }
      }
      return;
    }
  n.input.domChangeCount++, n.state.selection.from < n.state.selection.to && m.start == m.endB && n.state.selection instanceof le && (m.start > n.state.selection.from && m.start <= n.state.selection.from + 2 && n.state.selection.from >= c.from ? m.start = n.state.selection.from : m.endA < n.state.selection.to && m.endA >= n.state.selection.to - 2 && n.state.selection.to <= c.to && (m.endB += n.state.selection.to - m.endA, m.endA = n.state.selection.to)), at && bn <= 11 && m.endB == m.start + 1 && m.endA == m.start && m.start > c.from && c.doc.textBetween(m.start - c.from - 1, m.start - c.from + 1) == "  " && (m.start--, m.endA--, m.endB--);
  let b = c.doc.resolveNoCache(m.start - c.from), v = c.doc.resolveNoCache(m.endB - c.from), w = d.resolve(m.start), H = b.sameParent(v) && b.parent.inlineContent && w.end() >= m.endA, z;
  if ((Nr && n.input.lastIOSEnter > Date.now() - 225 && (!H || s.some((y) => y.nodeName == "DIV" || y.nodeName == "P")) || !H && b.pos < c.doc.content.size && !b.sameParent(v) && (z = ue.findFrom(c.doc.resolve(b.pos + 1), 1, !0)) && z.head == v.pos) && n.someProp("handleKeyDown", (y) => y(n, Rn(13, "Enter")))) {
    n.input.lastIOSEnter = 0;
    return;
  }
  if (n.state.selection.anchor > m.start && $b(d, m.start, m.endA, b, v) && n.someProp("handleKeyDown", (y) => y(n, Rn(8, "Backspace")))) {
    St && Ye && n.domObserver.suppressSelectionUpdates();
    return;
  }
  Ye && St && m.endB == m.start && (n.input.lastAndroidDelete = Date.now()), St && !H && b.start() != v.start() && v.parentOffset == 0 && b.depth == v.depth && c.sel && c.sel.anchor == c.sel.head && c.sel.head == m.endA && (m.endB -= 2, v = c.doc.resolveNoCache(m.endB - c.from), setTimeout(() => {
    n.someProp("handleKeyDown", function(y) {
      return y(n, Rn(13, "Enter"));
    });
  }, 20));
  let F = m.start, q = m.endA, A, $, x;
  if (H) {
    if (b.pos == v.pos)
      at && bn <= 11 && b.parentOffset == 0 && (n.domObserver.suppressSelectionUpdates(), setTimeout(() => Qt(n), 20)), A = n.state.tr.delete(F, q), $ = d.resolve(m.start).marksAcross(d.resolve(m.endA));
    else if (
      // Adding or removing a mark
      m.endA == m.endB && (x = Pb(b.parent.content.cut(b.parentOffset, v.parentOffset), w.parent.content.cut(w.parentOffset, m.endA - w.start())))
    )
      A = n.state.tr, x.type == "add" ? A.addMark(F, q, x.mark) : A.removeMark(F, q, x.mark);
    else if (b.parent.child(b.index()).isText && b.index() == v.index() - (v.textOffset ? 0 : 1)) {
      let y = b.parent.textBetween(b.parentOffset, v.parentOffset);
      if (n.someProp("handleTextInput", (E) => E(n, F, q, y)))
        return;
      A = n.state.tr.insertText(y, F, q);
    }
  }
  if (A || (A = n.state.tr.replace(F, q, c.doc.slice(m.start - c.from, m.endB - c.from))), c.sel) {
    let y = Ud(n, A.doc, c.sel);
    y && !(Ye && St && n.composing && y.empty && (m.start != m.endB || n.input.lastAndroidDelete < Date.now() - 100) && (y.head == F || y.head == A.mapping.map(q) - 1) || at && y.empty && y.head == F) && A.setSelection(y);
  }
  $ && A.ensureMarks($), i && A.setMeta("composition", i), n.dispatch(A.scrollIntoView());
}
function Ud(n, e, t) {
  return Math.max(t.anchor, t.head) > e.content.size ? null : ll(n, e.resolve(t.anchor), e.resolve(t.head));
}
function Pb(n, e) {
  let t = n.firstChild.marks, r = e.firstChild.marks, s = t, i = r, o, a, l;
  for (let d = 0; d < r.length; d++)
    s = r[d].removeFromSet(s);
  for (let d = 0; d < t.length; d++)
    i = t[d].removeFromSet(i);
  if (s.length == 1 && i.length == 0)
    a = s[0], o = "add", l = (d) => d.mark(a.addToSet(d.marks));
  else if (s.length == 0 && i.length == 1)
    a = i[0], o = "remove", l = (d) => d.mark(a.removeFromSet(d.marks));
  else
    return null;
  let c = [];
  for (let d = 0; d < e.childCount; d++)
    c.push(l(e.child(d)));
  if (L.from(c).eq(n))
    return { mark: a, type: o };
}
function $b(n, e, t, r, s) {
  if (
    // The content must have shrunk
    t - e <= s.pos - r.pos || // newEnd must point directly at or after the end of the block that newStart points into
    Vo(r, !0, !1) < s.pos
  )
    return !1;
  let i = n.resolve(e);
  if (!r.parent.isTextblock) {
    let a = i.nodeAfter;
    return a != null && t == e + a.nodeSize;
  }
  if (i.parentOffset < i.parent.content.size || !i.parent.isTextblock)
    return !1;
  let o = n.resolve(Vo(i, !0, !0));
  return !o.parent.isTextblock || o.pos > t || Vo(o, !0, !1) < t ? !1 : r.parent.content.cut(r.parentOffset).eq(o.parent.content);
}
function Vo(n, e, t) {
  let r = n.depth, s = e ? n.end() : n.pos;
  for (; r > 0 && (e || n.indexAfter(r) == n.node(r).childCount); )
    r--, s++, e = !1;
  if (t) {
    let i = n.node(r).maybeChild(n.indexAfter(r));
    for (; i && !i.isLeaf; )
      i = i.firstChild, s++;
  }
  return s;
}
function Zb(n, e, t, r, s) {
  let i = n.findDiffStart(e, t);
  if (i == null)
    return null;
  let { a: o, b: a } = n.findDiffEnd(e, t + n.size, t + e.size);
  if (s == "end") {
    let l = Math.max(0, i - Math.min(o, a));
    r -= o + l - i;
  }
  if (o < i && n.size < e.size) {
    let l = r <= i && r >= o ? i - r : 0;
    i -= l, i && i < e.size && Kd(e.textBetween(i - 1, i + 1)) && (i += l ? 1 : -1), a = i + (a - o), o = i;
  } else if (a < i) {
    let l = r <= i && r >= a ? i - r : 0;
    i -= l, i && i < n.size && Kd(n.textBetween(i - 1, i + 1)) && (i += l ? 1 : -1), o = i + (o - a), a = i;
  }
  return { start: i, endA: o, endB: a };
}
function Kd(n) {
  if (n.length != 2)
    return !1;
  let e = n.charCodeAt(0), t = n.charCodeAt(1);
  return e >= 56320 && e <= 57343 && t >= 55296 && t <= 56319;
}
class Vb {
  /**
  Create a view. `place` may be a DOM node that the editor should
  be appended to, a function that will place it into the document,
  or an object whose `mount` property holds the node to use as the
  document container. If it is `null`, the editor will not be
  added to the document.
  */
  constructor(e, t) {
    this._root = null, this.focused = !1, this.trackWrites = null, this.mounted = !1, this.markCursor = null, this.cursorWrapper = null, this.lastSelectedViewDesc = void 0, this.input = new ib(), this.prevDirectPlugins = [], this.pluginViews = [], this.requiresGeckoHackNode = !1, this.dragging = null, this._props = t, this.state = t.state, this.directPlugins = t.plugins || [], this.directPlugins.forEach(Qd), this.dispatch = this.dispatch.bind(this), this.dom = e && e.mount || document.createElement("div"), e && (e.appendChild ? e.appendChild(this.dom) : typeof e == "function" ? e(this.dom) : e.mount && (this.mounted = !0)), this.editable = Gd(this), Jd(this), this.nodeViews = Yd(this), this.docView = Od(this.state.doc, qd(this), Zo(this), this.dom, this), this.domObserver = new Tb(this, (r, s, i, o) => Lb(this, r, s, i, o)), this.domObserver.start(), ob(this), this.updatePluginViews();
  }
  /**
  Holds `true` when a
  [composition](https://w3c.github.io/uievents/#events-compositionevents)
  is active.
  */
  get composing() {
    return this.input.composing;
  }
  /**
  The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
  */
  get props() {
    if (this._props.state != this.state) {
      let e = this._props;
      this._props = {};
      for (let t in e)
        this._props[t] = e[t];
      this._props.state = this.state;
    }
    return this._props;
  }
  /**
  Update the view's props. Will immediately cause an update to
  the DOM.
  */
  update(e) {
    e.handleDOMEvents != this._props.handleDOMEvents && Oa(this);
    let t = this._props;
    this._props = e, e.plugins && (e.plugins.forEach(Qd), this.directPlugins = e.plugins), this.updateStateInner(e.state, t);
  }
  /**
  Update the view by updating existing props object with the object
  given as argument. Equivalent to `view.update(Object.assign({},
  view.props, props))`.
  */
  setProps(e) {
    let t = {};
    for (let r in this._props)
      t[r] = this._props[r];
    t.state = this.state;
    for (let r in e)
      t[r] = e[r];
    this.update(t);
  }
  /**
  Update the editor's `state` prop, without touching any of the
  other props.
  */
  updateState(e) {
    this.updateStateInner(e, this._props);
  }
  updateStateInner(e, t) {
    var r;
    let s = this.state, i = !1, o = !1;
    e.storedMarks && this.composing && (Y0(this), o = !0), this.state = e;
    let a = s.plugins != e.plugins || this._props.plugins != t.plugins;
    if (a || this._props.plugins != t.plugins || this._props.nodeViews != t.nodeViews) {
      let p = Yd(this);
      jb(p, this.nodeViews) && (this.nodeViews = p, i = !0);
    }
    (a || t.handleDOMEvents != this._props.handleDOMEvents) && Oa(this), this.editable = Gd(this), Jd(this);
    let l = Zo(this), c = qd(this), d = s.plugins != e.plugins && !s.doc.eq(e.doc) ? "reset" : e.scrollToSelection > s.scrollToSelection ? "to selection" : "preserve", f = i || !this.docView.matchesNode(e.doc, c, l);
    (f || !e.selection.eq(s.selection)) && (o = !0);
    let h = d == "preserve" && o && this.dom.style.overflowAnchor == null && k4(this);
    if (o) {
      this.domObserver.stop();
      let p = f && (at || Ye) && !this.composing && !s.selection.empty && !e.selection.empty && zb(s.selection, e.selection);
      if (f) {
        let m = Ye ? this.trackWrites = this.domSelectionRange().focusNode : null;
        this.composing && (this.input.compositionNode = vb(this)), (i || !this.docView.update(e.doc, c, l, this)) && (this.docView.updateOuterDeco(c), this.docView.destroy(), this.docView = Od(e.doc, c, l, this.dom, this)), m && !this.trackWrites && (p = !0);
      }
      p || !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) && W4(this)) ? Qt(this, p) : ($0(this, e.selection), this.domObserver.setCurSelection()), this.domObserver.start();
    }
    this.updatePluginViews(s), !((r = this.dragging) === null || r === void 0) && r.node && !s.doc.eq(e.doc) && this.updateDraggedNode(this.dragging, s), d == "reset" ? this.dom.scrollTop = 0 : d == "to selection" ? this.scrollToSelection() : h && w4(h);
  }
  /**
  @internal
  */
  scrollToSelection() {
    let e = this.domSelectionRange().focusNode;
    if (!this.someProp("handleScrollToSelection", (t) => t(this))) if (this.state.selection instanceof ne) {
      let t = this.docView.domAfterPos(this.state.selection.from);
      t.nodeType == 1 && wd(this, t.getBoundingClientRect(), e);
    } else
      wd(this, this.coordsAtPos(this.state.selection.head, 1), e);
  }
  destroyPluginViews() {
    let e;
    for (; e = this.pluginViews.pop(); )
      e.destroy && e.destroy();
  }
  updatePluginViews(e) {
    if (!e || e.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
      this.prevDirectPlugins = this.directPlugins, this.destroyPluginViews();
      for (let t = 0; t < this.directPlugins.length; t++) {
        let r = this.directPlugins[t];
        r.spec.view && this.pluginViews.push(r.spec.view(this));
      }
      for (let t = 0; t < this.state.plugins.length; t++) {
        let r = this.state.plugins[t];
        r.spec.view && this.pluginViews.push(r.spec.view(this));
      }
    } else
      for (let t = 0; t < this.pluginViews.length; t++) {
        let r = this.pluginViews[t];
        r.update && r.update(this, e);
      }
  }
  updateDraggedNode(e, t) {
    let r = e.node, s = -1;
    if (this.state.doc.nodeAt(r.from) == r.node)
      s = r.from;
    else {
      let i = r.from + (this.state.doc.content.size - t.doc.content.size);
      (i > 0 && this.state.doc.nodeAt(i)) == r.node && (s = i);
    }
    this.dragging = new X0(e.slice, e.move, s < 0 ? void 0 : ne.create(this.state.doc, s));
  }
  someProp(e, t) {
    let r = this._props && this._props[e], s;
    if (r != null && (s = t ? t(r) : r))
      return s;
    for (let o = 0; o < this.directPlugins.length; o++) {
      let a = this.directPlugins[o].props[e];
      if (a != null && (s = t ? t(a) : a))
        return s;
    }
    let i = this.state.plugins;
    if (i)
      for (let o = 0; o < i.length; o++) {
        let a = i[o].props[e];
        if (a != null && (s = t ? t(a) : a))
          return s;
      }
  }
  /**
  Query whether the view has focus.
  */
  hasFocus() {
    if (at) {
      let e = this.root.activeElement;
      if (e == this.dom)
        return !0;
      if (!e || !this.dom.contains(e))
        return !1;
      for (; e && this.dom != e && this.dom.contains(e); ) {
        if (e.contentEditable == "false")
          return !1;
        e = e.parentElement;
      }
      return !0;
    }
    return this.root.activeElement == this.dom;
  }
  /**
  Focus the editor.
  */
  focus() {
    this.domObserver.stop(), this.editable && E4(this.dom), Qt(this), this.domObserver.start();
  }
  /**
  Get the document root in which the editor exists. This will
  usually be the top-level `document`, but might be a [shadow
  DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
  root if the editor is inside one.
  */
  get root() {
    let e = this._root;
    if (e == null) {
      for (let t = this.dom.parentNode; t; t = t.parentNode)
        if (t.nodeType == 9 || t.nodeType == 11 && t.host)
          return t.getSelection || (Object.getPrototypeOf(t).getSelection = () => t.ownerDocument.getSelection()), this._root = t;
    }
    return e || document;
  }
  /**
  When an existing editor view is moved to a new document or
  shadow tree, call this to make it recompute its root.
  */
  updateRoot() {
    this._root = null;
  }
  /**
  Given a pair of viewport coordinates, return the document
  position that corresponds to them. May return null if the given
  coordinates aren't inside of the editor. When an object is
  returned, its `pos` property is the position nearest to the
  coordinates, and its `inside` property holds the position of the
  inner node that the position falls inside of, or -1 if it is at
  the top level, not in any node.
  */
  posAtCoords(e) {
    return O4(this, e);
  }
  /**
  Returns the viewport rectangle at a given document position.
  `left` and `right` will be the same number, as this returns a
  flat cursor-ish rectangle. If the position is between two things
  that aren't directly adjacent, `side` determines which element
  is used. When < 0, the element before the position is used,
  otherwise the element after.
  */
  coordsAtPos(e, t = 1) {
    return N0(this, e, t);
  }
  /**
  Find the DOM position that corresponds to the given document
  position. When `side` is negative, find the position as close as
  possible to the content before the position. When positive,
  prefer positions close to the content after the position. When
  zero, prefer as shallow a position as possible.
  
  Note that you should **not** mutate the editor's internal DOM,
  only inspect it (and even that is usually not necessary).
  */
  domAtPos(e, t = 0) {
    return this.docView.domFromPos(e, t);
  }
  /**
  Find the DOM node that represents the document node after the
  given position. May return `null` when the position doesn't point
  in front of a node or if the node is inside an opaque node view.
  
  This is intended to be able to call things like
  `getBoundingClientRect` on that DOM node. Do **not** mutate the
  editor DOM directly, or add styling this way, since that will be
  immediately overriden by the editor as it redraws the node.
  */
  nodeDOM(e) {
    let t = this.docView.descAt(e);
    return t ? t.nodeDOM : null;
  }
  /**
  Find the document position that corresponds to a given DOM
  position. (Whenever possible, it is preferable to inspect the
  document structure directly, rather than poking around in the
  DOM, but sometimes—for example when interpreting an event
  target—you don't have a choice.)
  
  The `bias` parameter can be used to influence which side of a DOM
  node to use when the position is inside a leaf node.
  */
  posAtDOM(e, t, r = -1) {
    let s = this.docView.posFromDOM(e, t, r);
    if (s == null)
      throw new RangeError("DOM position not inside the editor");
    return s;
  }
  /**
  Find out whether the selection is at the end of a textblock when
  moving in a given direction. When, for example, given `"left"`,
  it will return true if moving left from the current cursor
  position would leave that position's parent textblock. Will apply
  to the view's current state by default, but it is possible to
  pass a different state.
  */
  endOfTextblock(e, t) {
    return I4(this, t || this.state, e);
  }
  /**
  Run the editor's paste logic with the given HTML string. The
  `event`, if given, will be passed to the
  [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
  */
  pasteHTML(e, t) {
    return us(this, "", e, !1, t || new ClipboardEvent("paste"));
  }
  /**
  Run the editor's paste logic with the given plain-text input.
  */
  pasteText(e, t) {
    return us(this, e, null, !0, t || new ClipboardEvent("paste"));
  }
  /**
  Removes the editor from the DOM and destroys all [node
  views](https://prosemirror.net/docs/ref/#view.NodeView).
  */
  destroy() {
    this.docView && (ab(this), this.destroyPluginViews(), this.mounted ? (this.docView.update(this.state.doc, [], Zo(this), this), this.dom.textContent = "") : this.dom.parentNode && this.dom.parentNode.removeChild(this.dom), this.docView.destroy(), this.docView = null, d4());
  }
  /**
  This is true when the view has been
  [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
  used anymore).
  */
  get isDestroyed() {
    return this.docView == null;
  }
  /**
  Used for testing.
  */
  dispatchEvent(e) {
    return cb(this, e);
  }
  /**
  Dispatch a transaction. Will call
  [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
  when given, and otherwise defaults to applying the transaction to
  the current state and calling
  [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
  This method is bound to the view instance, so that it can be
  easily passed around.
  */
  dispatch(e) {
    let t = this._props.dispatchTransaction;
    t ? t.call(this, e) : this.updateState(this.state.apply(e));
  }
  /**
  @internal
  */
  domSelectionRange() {
    let e = this.domSelection();
    return e ? tt && this.root.nodeType === 11 && m4(this.dom.ownerDocument) == this.dom && _b(this, e) || e : { focusNode: null, focusOffset: 0, anchorNode: null, anchorOffset: 0 };
  }
  /**
  @internal
  */
  domSelection() {
    return this.root.getSelection();
  }
}
function qd(n) {
  let e = /* @__PURE__ */ Object.create(null);
  return e.class = "ProseMirror", e.contenteditable = String(n.editable), n.someProp("attributes", (t) => {
    if (typeof t == "function" && (t = t(n.state)), t)
      for (let r in t)
        r == "class" ? e.class += " " + t[r] : r == "style" ? e.style = (e.style ? e.style + ";" : "") + t[r] : !e[r] && r != "contenteditable" && r != "nodeName" && (e[r] = String(t[r]));
  }), e.translate || (e.translate = "no"), [kt.node(0, n.state.doc.content.size, e)];
}
function Jd(n) {
  if (n.markCursor) {
    let e = document.createElement("img");
    e.className = "ProseMirror-separator", e.setAttribute("mark-placeholder", "true"), e.setAttribute("alt", ""), n.cursorWrapper = { dom: e, deco: kt.widget(n.state.selection.from, e, { raw: !0, marks: n.markCursor }) };
  } else
    n.cursorWrapper = null;
}
function Gd(n) {
  return !n.someProp("editable", (e) => e(n.state) === !1);
}
function zb(n, e) {
  let t = Math.min(n.$anchor.sharedDepth(n.head), e.$anchor.sharedDepth(e.head));
  return n.$anchor.start(t) != e.$anchor.start(t);
}
function Yd(n) {
  let e = /* @__PURE__ */ Object.create(null);
  function t(r) {
    for (let s in r)
      Object.prototype.hasOwnProperty.call(e, s) || (e[s] = r[s]);
  }
  return n.someProp("nodeViews", t), n.someProp("markViews", t), e;
}
function jb(n, e) {
  let t = 0, r = 0;
  for (let s in n) {
    if (n[s] != e[s])
      return !0;
    t++;
  }
  for (let s in e)
    r++;
  return t != r;
}
function Qd(n) {
  if (n.spec.state || n.spec.filterTransaction || n.spec.appendTransaction)
    throw new RangeError("Plugins passed directly to the view must not have a state component");
}
var kn = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
}, gi = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
}, Fb = typeof navigator < "u" && /Mac/.test(navigator.platform), Bb = typeof navigator < "u" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
for (var Ke = 0; Ke < 10; Ke++) kn[48 + Ke] = kn[96 + Ke] = String(Ke);
for (var Ke = 1; Ke <= 24; Ke++) kn[Ke + 111] = "F" + Ke;
for (var Ke = 65; Ke <= 90; Ke++)
  kn[Ke] = String.fromCharCode(Ke + 32), gi[Ke] = String.fromCharCode(Ke);
for (var zo in kn) gi.hasOwnProperty(zo) || (gi[zo] = kn[zo]);
function Wb(n) {
  var e = Fb && n.metaKey && n.shiftKey && !n.ctrlKey && !n.altKey || Bb && n.shiftKey && n.key && n.key.length == 1 || n.key == "Unidentified", t = !e && n.key || (n.shiftKey ? gi : kn)[n.keyCode] || n.key || "Unidentified";
  return t == "Esc" && (t = "Escape"), t == "Del" && (t = "Delete"), t == "Left" && (t = "ArrowLeft"), t == "Up" && (t = "ArrowUp"), t == "Right" && (t = "ArrowRight"), t == "Down" && (t = "ArrowDown"), t;
}
const Ub = typeof navigator < "u" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : !1;
function Kb(n) {
  let e = n.split(/-(?!$)/), t = e[e.length - 1];
  t == "Space" && (t = " ");
  let r, s, i, o;
  for (let a = 0; a < e.length - 1; a++) {
    let l = e[a];
    if (/^(cmd|meta|m)$/i.test(l))
      o = !0;
    else if (/^a(lt)?$/i.test(l))
      r = !0;
    else if (/^(c|ctrl|control)$/i.test(l))
      s = !0;
    else if (/^s(hift)?$/i.test(l))
      i = !0;
    else if (/^mod$/i.test(l))
      Ub ? o = !0 : s = !0;
    else
      throw new Error("Unrecognized modifier name: " + l);
  }
  return r && (t = "Alt-" + t), s && (t = "Ctrl-" + t), o && (t = "Meta-" + t), i && (t = "Shift-" + t), t;
}
function qb(n) {
  let e = /* @__PURE__ */ Object.create(null);
  for (let t in n)
    e[Kb(t)] = n[t];
  return e;
}
function jo(n, e, t = !0) {
  return e.altKey && (n = "Alt-" + n), e.ctrlKey && (n = "Ctrl-" + n), e.metaKey && (n = "Meta-" + n), t && e.shiftKey && (n = "Shift-" + n), n;
}
function Jb(n) {
  return new it({ props: { handleKeyDown: sh(n) } });
}
function sh(n) {
  let e = qb(n);
  return function(t, r) {
    let s = Wb(r), i, o = e[jo(s, r)];
    if (o && o(t.state, t.dispatch, t))
      return !0;
    if (s.length == 1 && s != " ") {
      if (r.shiftKey) {
        let a = e[jo(s, r, !1)];
        if (a && a(t.state, t.dispatch, t))
          return !0;
      }
      if ((r.shiftKey || r.altKey || r.metaKey || s.charCodeAt(0) > 127) && (i = kn[r.keyCode]) && i != s) {
        let a = e[jo(i, r)];
        if (a && a(t.state, t.dispatch, t))
          return !0;
      }
    }
    return !1;
  };
}
const Gb = (n, e) => n.selection.empty ? !1 : (e && e(n.tr.deleteSelection().scrollIntoView()), !0);
function ih(n, e) {
  let { $cursor: t } = n.selection;
  return !t || (e ? !e.endOfTextblock("backward", n) : t.parentOffset > 0) ? null : t;
}
const Yb = (n, e, t) => {
  let r = ih(n, t);
  if (!r)
    return !1;
  let s = pl(r);
  if (!s) {
    let o = r.blockRange(), a = o && $r(o);
    return a == null ? !1 : (e && e(n.tr.lift(o, a).scrollIntoView()), !0);
  }
  let i = s.nodeBefore;
  if (!i.type.spec.isolating && ch(n, s, e))
    return !0;
  if (r.parent.content.size == 0 && (_r(i, "end") || ne.isSelectable(i))) {
    let o = ao(n.doc, r.before(), r.after(), W.empty);
    if (o && o.slice.size < o.to - o.from) {
      if (e) {
        let a = n.tr.step(o);
        a.setSelection(_r(i, "end") ? ue.findFrom(a.doc.resolve(a.mapping.map(s.pos, -1)), -1) : ne.create(a.doc, s.pos - i.nodeSize)), e(a.scrollIntoView());
      }
      return !0;
    }
  }
  return i.isAtom && s.depth == r.depth - 1 ? (e && e(n.tr.delete(s.pos - i.nodeSize, s.pos).scrollIntoView()), !0) : !1;
}, Qb = (n, e, t) => {
  let r = ih(n, t);
  if (!r)
    return !1;
  let s = pl(r);
  return s ? oh(n, s, e) : !1;
}, Xb = (n, e, t) => {
  let r = ah(n, t);
  if (!r)
    return !1;
  let s = ml(r);
  return s ? oh(n, s, e) : !1;
};
function oh(n, e, t) {
  let r = e.nodeBefore, s = r, i = e.pos - 1;
  for (; !s.isTextblock; i--) {
    if (s.type.spec.isolating)
      return !1;
    let d = s.lastChild;
    if (!d)
      return !1;
    s = d;
  }
  let o = e.nodeAfter, a = o, l = e.pos + 1;
  for (; !a.isTextblock; l++) {
    if (a.type.spec.isolating)
      return !1;
    let d = a.firstChild;
    if (!d)
      return !1;
    a = d;
  }
  let c = ao(n.doc, i, l, W.empty);
  if (!c || c.from != i || c instanceof Ve && c.slice.size >= l - i)
    return !1;
  if (t) {
    let d = n.tr.step(c);
    d.setSelection(le.create(d.doc, i)), t(d.scrollIntoView());
  }
  return !0;
}
function _r(n, e, t = !1) {
  for (let r = n; r; r = e == "start" ? r.firstChild : r.lastChild) {
    if (r.isTextblock)
      return !0;
    if (t && r.childCount != 1)
      return !1;
  }
  return !1;
}
const ev = (n, e, t) => {
  let { $head: r, empty: s } = n.selection, i = r;
  if (!s)
    return !1;
  if (r.parent.isTextblock) {
    if (t ? !t.endOfTextblock("backward", n) : r.parentOffset > 0)
      return !1;
    i = pl(r);
  }
  let o = i && i.nodeBefore;
  return !o || !ne.isSelectable(o) ? !1 : (e && e(n.tr.setSelection(ne.create(n.doc, i.pos - o.nodeSize)).scrollIntoView()), !0);
};
function pl(n) {
  if (!n.parent.type.spec.isolating)
    for (let e = n.depth - 1; e >= 0; e--) {
      if (n.index(e) > 0)
        return n.doc.resolve(n.before(e + 1));
      if (n.node(e).type.spec.isolating)
        break;
    }
  return null;
}
function ah(n, e) {
  let { $cursor: t } = n.selection;
  return !t || (e ? !e.endOfTextblock("forward", n) : t.parentOffset < t.parent.content.size) ? null : t;
}
const tv = (n, e, t) => {
  let r = ah(n, t);
  if (!r)
    return !1;
  let s = ml(r);
  if (!s)
    return !1;
  let i = s.nodeAfter;
  if (ch(n, s, e))
    return !0;
  if (r.parent.content.size == 0 && (_r(i, "start") || ne.isSelectable(i))) {
    let o = ao(n.doc, r.before(), r.after(), W.empty);
    if (o && o.slice.size < o.to - o.from) {
      if (e) {
        let a = n.tr.step(o);
        a.setSelection(_r(i, "start") ? ue.findFrom(a.doc.resolve(a.mapping.map(s.pos)), 1) : ne.create(a.doc, a.mapping.map(s.pos))), e(a.scrollIntoView());
      }
      return !0;
    }
  }
  return i.isAtom && s.depth == r.depth - 1 ? (e && e(n.tr.delete(s.pos, s.pos + i.nodeSize).scrollIntoView()), !0) : !1;
}, nv = (n, e, t) => {
  let { $head: r, empty: s } = n.selection, i = r;
  if (!s)
    return !1;
  if (r.parent.isTextblock) {
    if (t ? !t.endOfTextblock("forward", n) : r.parentOffset < r.parent.content.size)
      return !1;
    i = ml(r);
  }
  let o = i && i.nodeAfter;
  return !o || !ne.isSelectable(o) ? !1 : (e && e(n.tr.setSelection(ne.create(n.doc, i.pos)).scrollIntoView()), !0);
};
function ml(n) {
  if (!n.parent.type.spec.isolating)
    for (let e = n.depth - 1; e >= 0; e--) {
      let t = n.node(e);
      if (n.index(e) + 1 < t.childCount)
        return n.doc.resolve(n.after(e + 1));
      if (t.type.spec.isolating)
        break;
    }
  return null;
}
const rv = (n, e) => {
  let t = n.selection, r = t instanceof ne, s;
  if (r) {
    if (t.node.isTextblock || !On(n.doc, t.from))
      return !1;
    s = t.from;
  } else if (s = oo(n.doc, t.from, -1), s == null)
    return !1;
  if (e) {
    let i = n.tr.join(s);
    r && i.setSelection(ne.create(i.doc, s - n.doc.resolve(s).nodeBefore.nodeSize)), e(i.scrollIntoView());
  }
  return !0;
}, sv = (n, e) => {
  let t = n.selection, r;
  if (t instanceof ne) {
    if (t.node.isTextblock || !On(n.doc, t.to))
      return !1;
    r = t.to;
  } else if (r = oo(n.doc, t.to, 1), r == null)
    return !1;
  return e && e(n.tr.join(r).scrollIntoView()), !0;
}, iv = (n, e) => {
  let { $from: t, $to: r } = n.selection, s = t.blockRange(r), i = s && $r(s);
  return i == null ? !1 : (e && e(n.tr.lift(s, i).scrollIntoView()), !0);
}, ov = (n, e) => {
  let { $head: t, $anchor: r } = n.selection;
  return !t.parent.type.spec.code || !t.sameParent(r) ? !1 : (e && e(n.tr.insertText(`
`).scrollIntoView()), !0);
};
function lh(n) {
  for (let e = 0; e < n.edgeCount; e++) {
    let { type: t } = n.edge(e);
    if (t.isTextblock && !t.hasRequiredAttrs())
      return t;
  }
  return null;
}
const av = (n, e) => {
  let { $head: t, $anchor: r } = n.selection;
  if (!t.parent.type.spec.code || !t.sameParent(r))
    return !1;
  let s = t.node(-1), i = t.indexAfter(-1), o = lh(s.contentMatchAt(i));
  if (!o || !s.canReplaceWith(i, i, o))
    return !1;
  if (e) {
    let a = t.after(), l = n.tr.replaceWith(a, a, o.createAndFill());
    l.setSelection(ue.near(l.doc.resolve(a), 1)), e(l.scrollIntoView());
  }
  return !0;
}, lv = (n, e) => {
  let t = n.selection, { $from: r, $to: s } = t;
  if (t instanceof Ot || r.parent.inlineContent || s.parent.inlineContent)
    return !1;
  let i = lh(s.parent.contentMatchAt(s.indexAfter()));
  if (!i || !i.isTextblock)
    return !1;
  if (e) {
    let o = (!r.parentOffset && s.index() < s.parent.childCount ? r : s).pos, a = n.tr.insert(o, i.createAndFill());
    a.setSelection(le.create(a.doc, o + 1)), e(a.scrollIntoView());
  }
  return !0;
}, cv = (n, e) => {
  let { $cursor: t } = n.selection;
  if (!t || t.parent.content.size)
    return !1;
  if (t.depth > 1 && t.after() != t.end(-1)) {
    let i = t.before();
    if (wr(n.doc, i))
      return e && e(n.tr.split(i).scrollIntoView()), !0;
  }
  let r = t.blockRange(), s = r && $r(r);
  return s == null ? !1 : (e && e(n.tr.lift(r, s).scrollIntoView()), !0);
}, dv = (n, e) => {
  let { $from: t, to: r } = n.selection, s, i = t.sharedDepth(r);
  return i == 0 ? !1 : (s = t.before(i), e && e(n.tr.setSelection(ne.create(n.doc, s))), !0);
};
function uv(n, e, t) {
  let r = e.nodeBefore, s = e.nodeAfter, i = e.index();
  return !r || !s || !r.type.compatibleContent(s.type) ? !1 : !r.content.size && e.parent.canReplace(i - 1, i) ? (t && t(n.tr.delete(e.pos - r.nodeSize, e.pos).scrollIntoView()), !0) : !e.parent.canReplace(i, i + 1) || !(s.isTextblock || On(n.doc, e.pos)) ? !1 : (t && t(n.tr.clearIncompatible(e.pos, r.type, r.contentMatchAt(r.childCount)).join(e.pos).scrollIntoView()), !0);
}
function ch(n, e, t) {
  let r = e.nodeBefore, s = e.nodeAfter, i, o;
  if (r.type.spec.isolating || s.type.spec.isolating)
    return !1;
  if (uv(n, e, t))
    return !0;
  let a = e.parent.canReplace(e.index(), e.index() + 1);
  if (a && (i = (o = r.contentMatchAt(r.childCount)).findWrapping(s.type)) && o.matchType(i[0] || s.type).validEnd) {
    if (t) {
      let f = e.pos + s.nodeSize, h = L.empty;
      for (let b = i.length - 1; b >= 0; b--)
        h = L.from(i[b].create(null, h));
      h = L.from(r.copy(h));
      let p = n.tr.step(new je(e.pos - 1, f, e.pos, f, new W(h, 1, 0), i.length, !0)), m = f + 2 * i.length;
      On(p.doc, m) && p.join(m), t(p.scrollIntoView());
    }
    return !0;
  }
  let l = ue.findFrom(e, 1), c = l && l.$from.blockRange(l.$to), d = c && $r(c);
  if (d != null && d >= e.depth)
    return t && t(n.tr.lift(c, d).scrollIntoView()), !0;
  if (a && _r(s, "start", !0) && _r(r, "end")) {
    let f = r, h = [];
    for (; h.push(f), !f.isTextblock; )
      f = f.lastChild;
    let p = s, m = 1;
    for (; !p.isTextblock; p = p.firstChild)
      m++;
    if (f.canReplace(f.childCount, f.childCount, p.content)) {
      if (t) {
        let b = L.empty;
        for (let w = h.length - 1; w >= 0; w--)
          b = L.from(h[w].copy(b));
        let v = n.tr.step(new je(e.pos - h.length, e.pos + s.nodeSize, e.pos + m, e.pos + s.nodeSize - m, new W(b, h.length, 0), 0, !0));
        t(v.scrollIntoView());
      }
      return !0;
    }
  }
  return !1;
}
function dh(n) {
  return function(e, t) {
    let r = e.selection, s = n < 0 ? r.$from : r.$to, i = s.depth;
    for (; s.node(i).isInline; ) {
      if (!i)
        return !1;
      i--;
    }
    return s.node(i).isTextblock ? (t && t(e.tr.setSelection(le.create(e.doc, n < 0 ? s.start(i) : s.end(i)))), !0) : !1;
  };
}
const fv = dh(-1), hv = dh(1);
function pv(n, e = null) {
  return function(t, r) {
    let { $from: s, $to: i } = t.selection, o = s.blockRange(i), a = o && sl(o, n, e);
    return a ? (r && r(t.tr.wrap(o, a).scrollIntoView()), !0) : !1;
  };
}
function Xd(n, e = null) {
  return function(t, r) {
    let s = !1;
    for (let i = 0; i < t.selection.ranges.length && !s; i++) {
      let { $from: { pos: o }, $to: { pos: a } } = t.selection.ranges[i];
      t.doc.nodesBetween(o, a, (l, c) => {
        if (s)
          return !1;
        if (!(!l.isTextblock || l.hasMarkup(n, e)))
          if (l.type == n)
            s = !0;
          else {
            let d = t.doc.resolve(c), f = d.index();
            s = d.parent.canReplaceWith(f, f + 1, n);
          }
      });
    }
    if (!s)
      return !1;
    if (r) {
      let i = t.tr;
      for (let o = 0; o < t.selection.ranges.length; o++) {
        let { $from: { pos: a }, $to: { pos: l } } = t.selection.ranges[o];
        i.setBlockType(a, l, n, e);
      }
      r(i.scrollIntoView());
    }
    return !0;
  };
}
typeof navigator < "u" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : typeof os < "u" && os.platform && os.platform() == "darwin";
function mv(n, e = null) {
  return function(t, r) {
    let { $from: s, $to: i } = t.selection, o = s.blockRange(i), a = !1, l = o;
    if (!o)
      return !1;
    if (o.depth >= 2 && s.node(o.depth - 1).type.compatibleContent(n) && o.startIndex == 0) {
      if (s.index(o.depth - 1) == 0)
        return !1;
      let d = t.doc.resolve(o.start - 2);
      l = new li(d, d, o.depth), o.endIndex < o.parent.childCount && (o = new li(s, t.doc.resolve(i.end(o.depth)), o.depth)), a = !0;
    }
    let c = sl(l, n, e, o);
    return c ? (r && r(gv(t.tr, o, c, a, n).scrollIntoView()), !0) : !1;
  };
}
function gv(n, e, t, r, s) {
  let i = L.empty;
  for (let d = t.length - 1; d >= 0; d--)
    i = L.from(t[d].type.create(t[d].attrs, i));
  n.step(new je(e.start - (r ? 2 : 0), e.end, e.start, e.end, new W(i, 0, 0), t.length, !0));
  let o = 0;
  for (let d = 0; d < t.length; d++)
    t[d].type == s && (o = d + 1);
  let a = t.length - o, l = e.start + t.length - (r ? 2 : 0), c = e.parent;
  for (let d = e.startIndex, f = e.endIndex, h = !0; d < f; d++, h = !1)
    !h && wr(n.doc, l, a) && (n.split(l, a), l += 2 * a), l += c.child(d).nodeSize;
  return n;
}
function yv(n) {
  return function(e, t) {
    let { $from: r, $to: s } = e.selection, i = r.blockRange(s, (o) => o.childCount > 0 && o.firstChild.type == n);
    return i ? t ? r.node(i.depth - 1).type == n ? bv(e, t, n, i) : vv(e, t, i) : !0 : !1;
  };
}
function bv(n, e, t, r) {
  let s = n.tr, i = r.end, o = r.$to.end(r.depth);
  i < o && (s.step(new je(i - 1, o, i, o, new W(L.from(t.create(null, r.parent.copy())), 1, 0), 1, !0)), r = new li(s.doc.resolve(r.$from.pos), s.doc.resolve(o), r.depth));
  const a = $r(r);
  if (a == null)
    return !1;
  s.lift(r, a);
  let l = s.mapping.map(i, -1) - 1;
  return On(s.doc, l) && s.join(l), e(s.scrollIntoView()), !0;
}
function vv(n, e, t) {
  let r = n.tr, s = t.parent;
  for (let p = t.end, m = t.endIndex - 1, b = t.startIndex; m > b; m--)
    p -= s.child(m).nodeSize, r.delete(p - 1, p + 1);
  let i = r.doc.resolve(t.start), o = i.nodeAfter;
  if (r.mapping.map(t.end) != t.start + i.nodeAfter.nodeSize)
    return !1;
  let a = t.startIndex == 0, l = t.endIndex == s.childCount, c = i.node(-1), d = i.index(-1);
  if (!c.canReplace(d + (a ? 0 : 1), d + 1, o.content.append(l ? L.empty : L.from(s))))
    return !1;
  let f = i.pos, h = f + o.nodeSize;
  return r.step(new je(f - (a ? 1 : 0), h + (l ? 1 : 0), f + 1, h - 1, new W((a ? L.empty : L.from(s.copy(L.empty))).append(l ? L.empty : L.from(s.copy(L.empty))), a ? 0 : 1, l ? 0 : 1), a ? 0 : 1)), e(r.scrollIntoView()), !0;
}
function xv(n) {
  return function(e, t) {
    let { $from: r, $to: s } = e.selection, i = r.blockRange(s, (c) => c.childCount > 0 && c.firstChild.type == n);
    if (!i)
      return !1;
    let o = i.startIndex;
    if (o == 0)
      return !1;
    let a = i.parent, l = a.child(o - 1);
    if (l.type != n)
      return !1;
    if (t) {
      let c = l.lastChild && l.lastChild.type == a.type, d = L.from(c ? n.create() : null), f = new W(L.from(n.create(null, L.from(a.type.create(null, d)))), c ? 3 : 1, 0), h = i.start, p = i.end;
      t(e.tr.step(new je(h - (c ? 3 : 1), p, h, p, f, 1, !0)).scrollIntoView());
    }
    return !0;
  };
}
function ho(n) {
  const { state: e, transaction: t } = n;
  let { selection: r } = t, { doc: s } = t, { storedMarks: i } = t;
  return {
    ...e,
    apply: e.apply.bind(e),
    applyTransaction: e.applyTransaction.bind(e),
    plugins: e.plugins,
    schema: e.schema,
    reconfigure: e.reconfigure.bind(e),
    toJSON: e.toJSON.bind(e),
    get storedMarks() {
      return i;
    },
    get selection() {
      return r;
    },
    get doc() {
      return s;
    },
    get tr() {
      return r = t.selection, s = t.doc, i = t.storedMarks, t;
    }
  };
}
class po {
  constructor(e) {
    this.editor = e.editor, this.rawCommands = this.editor.extensionManager.commands, this.customState = e.state;
  }
  get hasCustomState() {
    return !!this.customState;
  }
  get state() {
    return this.customState || this.editor.state;
  }
  get commands() {
    const { rawCommands: e, editor: t, state: r } = this, { view: s } = t, { tr: i } = r, o = this.buildProps(i);
    return Object.fromEntries(Object.entries(e).map(([a, l]) => [a, (...d) => {
      const f = l(...d)(o);
      return !i.getMeta("preventDispatch") && !this.hasCustomState && s.dispatch(i), f;
    }]));
  }
  get chain() {
    return () => this.createChain();
  }
  get can() {
    return () => this.createCan();
  }
  createChain(e, t = !0) {
    const { rawCommands: r, editor: s, state: i } = this, { view: o } = s, a = [], l = !!e, c = e || i.tr, d = () => (!l && t && !c.getMeta("preventDispatch") && !this.hasCustomState && o.dispatch(c), a.every((h) => h === !0)), f = {
      ...Object.fromEntries(Object.entries(r).map(([h, p]) => [h, (...b) => {
        const v = this.buildProps(c, t), w = p(...b)(v);
        return a.push(w), f;
      }])),
      run: d
    };
    return f;
  }
  createCan(e) {
    const { rawCommands: t, state: r } = this, s = !1, i = e || r.tr, o = this.buildProps(i, s);
    return {
      ...Object.fromEntries(Object.entries(t).map(([l, c]) => [l, (...d) => c(...d)({ ...o, dispatch: void 0 })])),
      chain: () => this.createChain(i, s)
    };
  }
  buildProps(e, t = !0) {
    const { rawCommands: r, editor: s, state: i } = this, { view: o } = s, a = {
      tr: e,
      editor: s,
      view: o,
      state: ho({
        state: i,
        transaction: e
      }),
      dispatch: t ? () => {
      } : void 0,
      chain: () => this.createChain(e, t),
      can: () => this.createCan(e),
      get commands() {
        return Object.fromEntries(Object.entries(r).map(([l, c]) => [l, (...d) => c(...d)(a)]));
      }
    };
    return a;
  }
}
class kv {
  constructor() {
    this.callbacks = {};
  }
  on(e, t) {
    return this.callbacks[e] || (this.callbacks[e] = []), this.callbacks[e].push(t), this;
  }
  emit(e, ...t) {
    const r = this.callbacks[e];
    return r && r.forEach((s) => s.apply(this, t)), this;
  }
  off(e, t) {
    const r = this.callbacks[e];
    return r && (t ? this.callbacks[e] = r.filter((s) => s !== t) : delete this.callbacks[e]), this;
  }
  removeAllListeners() {
    this.callbacks = {};
  }
}
function Y(n, e, t) {
  return n.config[e] === void 0 && n.parent ? Y(n.parent, e, t) : typeof n.config[e] == "function" ? n.config[e].bind({
    ...t,
    parent: n.parent ? Y(n.parent, e, t) : null
  }) : n.config[e];
}
function mo(n) {
  const e = n.filter((s) => s.type === "extension"), t = n.filter((s) => s.type === "node"), r = n.filter((s) => s.type === "mark");
  return {
    baseExtensions: e,
    nodeExtensions: t,
    markExtensions: r
  };
}
function uh(n) {
  const e = [], { nodeExtensions: t, markExtensions: r } = mo(n), s = [...t, ...r], i = {
    default: null,
    rendered: !0,
    renderHTML: null,
    parseHTML: null,
    keepOnSplit: !0,
    isRequired: !1
  };
  return n.forEach((o) => {
    const a = {
      name: o.name,
      options: o.options,
      storage: o.storage,
      extensions: s
    }, l = Y(o, "addGlobalAttributes", a);
    if (!l)
      return;
    l().forEach((d) => {
      d.types.forEach((f) => {
        Object.entries(d.attributes).forEach(([h, p]) => {
          e.push({
            type: f,
            name: h,
            attribute: {
              ...i,
              ...p
            }
          });
        });
      });
    });
  }), s.forEach((o) => {
    const a = {
      name: o.name,
      options: o.options,
      storage: o.storage
    }, l = Y(o, "addAttributes", a);
    if (!l)
      return;
    const c = l();
    Object.entries(c).forEach(([d, f]) => {
      const h = {
        ...i,
        ...f
      };
      typeof (h == null ? void 0 : h.default) == "function" && (h.default = h.default()), h != null && h.isRequired && (h == null ? void 0 : h.default) === void 0 && delete h.default, e.push({
        type: o.name,
        name: d,
        attribute: h
      });
    });
  }), e;
}
function Be(n, e) {
  if (typeof n == "string") {
    if (!e.nodes[n])
      throw Error(`There is no node type named '${n}'. Maybe you forgot to add the extension?`);
    return e.nodes[n];
  }
  return n;
}
function Ne(...n) {
  return n.filter((e) => !!e).reduce((e, t) => {
    const r = { ...e };
    return Object.entries(t).forEach(([s, i]) => {
      if (!r[s]) {
        r[s] = i;
        return;
      }
      if (s === "class") {
        const a = i ? i.split(" ") : [], l = r[s] ? r[s].split(" ") : [], c = a.filter((d) => !l.includes(d));
        r[s] = [...l, ...c].join(" ");
      } else s === "style" ? r[s] = [r[s], i].join("; ") : r[s] = i;
    }), r;
  }, {});
}
function Ta(n, e) {
  return e.filter((t) => t.attribute.rendered).map((t) => t.attribute.renderHTML ? t.attribute.renderHTML(n.attrs) || {} : {
    [t.name]: n.attrs[t.name]
  }).reduce((t, r) => Ne(t, r), {});
}
function fh(n) {
  return typeof n == "function";
}
function pe(n, e = void 0, ...t) {
  return fh(n) ? e ? n.bind(e)(...t) : n(...t) : n;
}
function wv(n = {}) {
  return Object.keys(n).length === 0 && n.constructor === Object;
}
function Ev(n) {
  return typeof n != "string" ? n : n.match(/^[+-]?(?:\d*\.)?\d+$/) ? Number(n) : n === "true" ? !0 : n === "false" ? !1 : n;
}
function eu(n, e) {
  return "style" in n ? n : {
    ...n,
    getAttrs: (t) => {
      const r = n.getAttrs ? n.getAttrs(t) : n.attrs;
      if (r === !1)
        return !1;
      const s = e.reduce((i, o) => {
        const a = o.attribute.parseHTML ? o.attribute.parseHTML(t) : Ev(t.getAttribute(o.name));
        return a == null ? i : {
          ...i,
          [o.name]: a
        };
      }, {});
      return { ...r, ...s };
    }
  };
}
function tu(n) {
  return Object.fromEntries(
    // @ts-ignore
    Object.entries(n).filter(([e, t]) => e === "attrs" && wv(t) ? !1 : t != null)
  );
}
function Mv(n, e) {
  var t;
  const r = uh(n), { nodeExtensions: s, markExtensions: i } = mo(n), o = (t = s.find((c) => Y(c, "topNode"))) === null || t === void 0 ? void 0 : t.name, a = Object.fromEntries(s.map((c) => {
    const d = r.filter((w) => w.type === c.name), f = {
      name: c.name,
      options: c.options,
      storage: c.storage,
      editor: e
    }, h = n.reduce((w, H) => {
      const z = Y(H, "extendNodeSchema", f);
      return {
        ...w,
        ...z ? z(c) : {}
      };
    }, {}), p = tu({
      ...h,
      content: pe(Y(c, "content", f)),
      marks: pe(Y(c, "marks", f)),
      group: pe(Y(c, "group", f)),
      inline: pe(Y(c, "inline", f)),
      atom: pe(Y(c, "atom", f)),
      selectable: pe(Y(c, "selectable", f)),
      draggable: pe(Y(c, "draggable", f)),
      code: pe(Y(c, "code", f)),
      whitespace: pe(Y(c, "whitespace", f)),
      defining: pe(Y(c, "defining", f)),
      isolating: pe(Y(c, "isolating", f)),
      attrs: Object.fromEntries(d.map((w) => {
        var H;
        return [w.name, { default: (H = w == null ? void 0 : w.attribute) === null || H === void 0 ? void 0 : H.default }];
      }))
    }), m = pe(Y(c, "parseHTML", f));
    m && (p.parseDOM = m.map((w) => eu(w, d)));
    const b = Y(c, "renderHTML", f);
    b && (p.toDOM = (w) => b({
      node: w,
      HTMLAttributes: Ta(w, d)
    }));
    const v = Y(c, "renderText", f);
    return v && (p.toText = v), [c.name, p];
  })), l = Object.fromEntries(i.map((c) => {
    const d = r.filter((v) => v.type === c.name), f = {
      name: c.name,
      options: c.options,
      storage: c.storage,
      editor: e
    }, h = n.reduce((v, w) => {
      const H = Y(w, "extendMarkSchema", f);
      return {
        ...v,
        ...H ? H(c) : {}
      };
    }, {}), p = tu({
      ...h,
      inclusive: pe(Y(c, "inclusive", f)),
      excludes: pe(Y(c, "excludes", f)),
      group: pe(Y(c, "group", f)),
      spanning: pe(Y(c, "spanning", f)),
      code: pe(Y(c, "code", f)),
      attrs: Object.fromEntries(d.map((v) => {
        var w;
        return [v.name, { default: (w = v == null ? void 0 : v.attribute) === null || w === void 0 ? void 0 : w.default }];
      }))
    }), m = pe(Y(c, "parseHTML", f));
    m && (p.parseDOM = m.map((v) => eu(v, d)));
    const b = Y(c, "renderHTML", f);
    return b && (p.toDOM = (v) => b({
      mark: v,
      HTMLAttributes: Ta(v, d)
    })), [c.name, p];
  }));
  return new o0({
    topNode: o,
    nodes: a,
    marks: l
  });
}
function Fo(n, e) {
  return e.nodes[n] || e.marks[n] || null;
}
function nu(n, e) {
  return Array.isArray(e) ? e.some((t) => (typeof t == "string" ? t : t.name) === n.name) : e;
}
const Sv = (n, e = 500) => {
  let t = "";
  const r = n.parentOffset;
  return n.parent.nodesBetween(Math.max(0, r - e), r, (s, i, o, a) => {
    var l, c;
    const d = ((c = (l = s.type.spec).toText) === null || c === void 0 ? void 0 : c.call(l, {
      node: s,
      pos: i,
      parent: o,
      index: a
    })) || s.textContent || "%leaf%";
    t += s.isAtom && !s.isText ? d : d.slice(0, Math.max(0, r - i));
  }), t;
};
function gl(n) {
  return Object.prototype.toString.call(n) === "[object RegExp]";
}
class go {
  constructor(e) {
    this.find = e.find, this.handler = e.handler;
  }
}
const Av = (n, e) => {
  if (gl(e))
    return e.exec(n);
  const t = e(n);
  if (!t)
    return null;
  const r = [t.text];
  return r.index = t.index, r.input = n, r.data = t.data, t.replaceWith && (t.text.includes(t.replaceWith) || console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".'), r.push(t.replaceWith)), r;
};
function js(n) {
  var e;
  const { editor: t, from: r, to: s, text: i, rules: o, plugin: a } = n, { view: l } = t;
  if (l.composing)
    return !1;
  const c = l.state.doc.resolve(r);
  if (
    // check for code node
    c.parent.type.spec.code || !((e = c.nodeBefore || c.nodeAfter) === null || e === void 0) && e.marks.find((h) => h.type.spec.code)
  )
    return !1;
  let d = !1;
  const f = Sv(c) + i;
  return o.forEach((h) => {
    if (d)
      return;
    const p = Av(f, h.find);
    if (!p)
      return;
    const m = l.state.tr, b = ho({
      state: l.state,
      transaction: m
    }), v = {
      from: r - (p[0].length - i.length),
      to: s
    }, { commands: w, chain: H, can: z } = new po({
      editor: t,
      state: b
    });
    h.handler({
      state: b,
      range: v,
      match: p,
      commands: w,
      chain: H,
      can: z
    }) === null || !m.steps.length || (m.setMeta(a, {
      transform: m,
      from: r,
      to: s,
      text: i
    }), l.dispatch(m), d = !0);
  }), d;
}
function Cv(n) {
  const { editor: e, rules: t } = n, r = new it({
    state: {
      init() {
        return null;
      },
      apply(s, i) {
        const o = s.getMeta(r);
        if (o)
          return o;
        const a = s.getMeta("applyInputRules");
        return !!a && setTimeout(() => {
          const { from: c, text: d } = a, f = c + d.length;
          js({
            editor: e,
            from: c,
            to: f,
            text: d,
            rules: t,
            plugin: r
          });
        }), s.selectionSet || s.docChanged ? null : i;
      }
    },
    props: {
      handleTextInput(s, i, o, a) {
        return js({
          editor: e,
          from: i,
          to: o,
          text: a,
          rules: t,
          plugin: r
        });
      },
      handleDOMEvents: {
        compositionend: (s) => (setTimeout(() => {
          const { $cursor: i } = s.state.selection;
          i && js({
            editor: e,
            from: i.pos,
            to: i.pos,
            text: "",
            rules: t,
            plugin: r
          });
        }), !1)
      },
      // add support for input rules to trigger on enter
      // this is useful for example for code blocks
      handleKeyDown(s, i) {
        if (i.key !== "Enter")
          return !1;
        const { $cursor: o } = s.state.selection;
        return o ? js({
          editor: e,
          from: o.pos,
          to: o.pos,
          text: `
`,
          rules: t,
          plugin: r
        }) : !1;
      }
    },
    // @ts-ignore
    isInputRules: !0
  });
  return r;
}
function Ov(n) {
  return typeof n == "number";
}
class Tv {
  constructor(e) {
    this.find = e.find, this.handler = e.handler;
  }
}
const Nv = (n, e, t) => {
  if (gl(e))
    return [...n.matchAll(e)];
  const r = e(n, t);
  return r ? r.map((s) => {
    const i = [s.text];
    return i.index = s.index, i.input = n, i.data = s.data, s.replaceWith && (s.text.includes(s.replaceWith) || console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".'), i.push(s.replaceWith)), i;
  }) : [];
};
function _v(n) {
  const { editor: e, state: t, from: r, to: s, rule: i, pasteEvent: o, dropEvent: a } = n, { commands: l, chain: c, can: d } = new po({
    editor: e,
    state: t
  }), f = [];
  return t.doc.nodesBetween(r, s, (p, m) => {
    if (!p.isTextblock || p.type.spec.code)
      return;
    const b = Math.max(r, m), v = Math.min(s, m + p.content.size), w = p.textBetween(b - m, v - m, void 0, "￼");
    Nv(w, i.find, o).forEach((z) => {
      if (z.index === void 0)
        return;
      const F = b + z.index + 1, q = F + z[0].length, A = {
        from: t.tr.mapping.map(F),
        to: t.tr.mapping.map(q)
      }, $ = i.handler({
        state: t,
        range: A,
        match: z,
        commands: l,
        chain: c,
        can: d,
        pasteEvent: o,
        dropEvent: a
      });
      f.push($);
    });
  }), f.every((p) => p !== null);
}
const Hv = (n) => {
  var e;
  const t = new ClipboardEvent("paste", {
    clipboardData: new DataTransfer()
  });
  return (e = t.clipboardData) === null || e === void 0 || e.setData("text/html", n), t;
};
function Iv(n) {
  const { editor: e, rules: t } = n;
  let r = null, s = !1, i = !1, o = typeof ClipboardEvent < "u" ? new ClipboardEvent("paste") : null, a = typeof DragEvent < "u" ? new DragEvent("drop") : null;
  const l = ({ state: d, from: f, to: h, rule: p, pasteEvt: m }) => {
    const b = d.tr, v = ho({
      state: d,
      transaction: b
    });
    if (!(!_v({
      editor: e,
      state: v,
      from: Math.max(f - 1, 0),
      to: h.b - 1,
      rule: p,
      pasteEvent: m,
      dropEvent: a
    }) || !b.steps.length))
      return a = typeof DragEvent < "u" ? new DragEvent("drop") : null, o = typeof ClipboardEvent < "u" ? new ClipboardEvent("paste") : null, b;
  };
  return t.map((d) => new it({
    // we register a global drag handler to track the current drag source element
    view(f) {
      const h = (p) => {
        var m;
        r = !((m = f.dom.parentElement) === null || m === void 0) && m.contains(p.target) ? f.dom.parentElement : null;
      };
      return window.addEventListener("dragstart", h), {
        destroy() {
          window.removeEventListener("dragstart", h);
        }
      };
    },
    props: {
      handleDOMEvents: {
        drop: (f, h) => (i = r === f.dom.parentElement, a = h, !1),
        paste: (f, h) => {
          var p;
          const m = (p = h.clipboardData) === null || p === void 0 ? void 0 : p.getData("text/html");
          return o = h, s = !!(m != null && m.includes("data-pm-slice")), !1;
        }
      }
    },
    appendTransaction: (f, h, p) => {
      const m = f[0], b = m.getMeta("uiEvent") === "paste" && !s, v = m.getMeta("uiEvent") === "drop" && !i, w = m.getMeta("applyPasteRules"), H = !!w;
      if (!b && !v && !H)
        return;
      if (H) {
        const { from: q, text: A } = w, $ = q + A.length, x = Hv(A);
        return l({
          rule: d,
          state: p,
          from: q,
          to: { b: $ },
          pasteEvt: x
        });
      }
      const z = h.doc.content.findDiffStart(p.doc.content), F = h.doc.content.findDiffEnd(p.doc.content);
      if (!(!Ov(z) || !F || z === F.b))
        return l({
          rule: d,
          state: p,
          from: z,
          to: F,
          pasteEvt: o
        });
    }
  }));
}
function Rv(n) {
  const e = n.filter((t, r) => n.indexOf(t) !== r);
  return Array.from(new Set(e));
}
class br {
  constructor(e, t) {
    this.splittableMarks = [], this.editor = t, this.extensions = br.resolve(e), this.schema = Mv(this.extensions, t), this.setupExtensions();
  }
  /**
   * Returns a flattened and sorted extension list while
   * also checking for duplicated extensions and warns the user.
   * @param extensions An array of Tiptap extensions
   * @returns An flattened and sorted array of Tiptap extensions
   */
  static resolve(e) {
    const t = br.sort(br.flatten(e)), r = Rv(t.map((s) => s.name));
    return r.length && console.warn(`[tiptap warn]: Duplicate extension names found: [${r.map((s) => `'${s}'`).join(", ")}]. This can lead to issues.`), t;
  }
  /**
   * Create a flattened array of extensions by traversing the `addExtensions` field.
   * @param extensions An array of Tiptap extensions
   * @returns A flattened array of Tiptap extensions
   */
  static flatten(e) {
    return e.map((t) => {
      const r = {
        name: t.name,
        options: t.options,
        storage: t.storage
      }, s = Y(t, "addExtensions", r);
      return s ? [t, ...this.flatten(s())] : t;
    }).flat(10);
  }
  /**
   * Sort extensions by priority.
   * @param extensions An array of Tiptap extensions
   * @returns A sorted array of Tiptap extensions by priority
   */
  static sort(e) {
    return e.sort((r, s) => {
      const i = Y(r, "priority") || 100, o = Y(s, "priority") || 100;
      return i > o ? -1 : i < o ? 1 : 0;
    });
  }
  /**
   * Get all commands from the extensions.
   * @returns An object with all commands where the key is the command name and the value is the command function
   */
  get commands() {
    return this.extensions.reduce((e, t) => {
      const r = {
        name: t.name,
        options: t.options,
        storage: t.storage,
        editor: this.editor,
        type: Fo(t.name, this.schema)
      }, s = Y(t, "addCommands", r);
      return s ? {
        ...e,
        ...s()
      } : e;
    }, {});
  }
  /**
   * Get all registered Prosemirror plugins from the extensions.
   * @returns An array of Prosemirror plugins
   */
  get plugins() {
    const { editor: e } = this, t = br.sort([...this.extensions].reverse()), r = [], s = [], i = t.map((o) => {
      const a = {
        name: o.name,
        options: o.options,
        storage: o.storage,
        editor: e,
        type: Fo(o.name, this.schema)
      }, l = [], c = Y(o, "addKeyboardShortcuts", a);
      let d = {};
      if (o.type === "mark" && Y(o, "exitable", a) && (d.ArrowRight = () => ft.handleExit({ editor: e, mark: o })), c) {
        const b = Object.fromEntries(Object.entries(c()).map(([v, w]) => [v, () => w({ editor: e })]));
        d = { ...d, ...b };
      }
      const f = Jb(d);
      l.push(f);
      const h = Y(o, "addInputRules", a);
      nu(o, e.options.enableInputRules) && h && r.push(...h());
      const p = Y(o, "addPasteRules", a);
      nu(o, e.options.enablePasteRules) && p && s.push(...p());
      const m = Y(o, "addProseMirrorPlugins", a);
      if (m) {
        const b = m();
        l.push(...b);
      }
      return l;
    }).flat();
    return [
      Cv({
        editor: e,
        rules: r
      }),
      ...Iv({
        editor: e,
        rules: s
      }),
      ...i
    ];
  }
  /**
   * Get all attributes from the extensions.
   * @returns An array of attributes
   */
  get attributes() {
    return uh(this.extensions);
  }
  /**
   * Get all node views from the extensions.
   * @returns An object with all node views where the key is the node name and the value is the node view function
   */
  get nodeViews() {
    const { editor: e } = this, { nodeExtensions: t } = mo(this.extensions);
    return Object.fromEntries(t.filter((r) => !!Y(r, "addNodeView")).map((r) => {
      const s = this.attributes.filter((l) => l.type === r.name), i = {
        name: r.name,
        options: r.options,
        storage: r.storage,
        editor: e,
        type: Be(r.name, this.schema)
      }, o = Y(r, "addNodeView", i);
      if (!o)
        return [];
      const a = (l, c, d, f) => {
        const h = Ta(l, s);
        return o()({
          editor: e,
          node: l,
          getPos: d,
          decorations: f,
          HTMLAttributes: h,
          extension: r
        });
      };
      return [r.name, a];
    }));
  }
  /**
   * Go through all extensions, create extension storages & setup marks
   * & bind editor event listener.
   */
  setupExtensions() {
    this.extensions.forEach((e) => {
      var t;
      this.editor.extensionStorage[e.name] = e.storage;
      const r = {
        name: e.name,
        options: e.options,
        storage: e.storage,
        editor: this.editor,
        type: Fo(e.name, this.schema)
      };
      e.type === "mark" && (!((t = pe(Y(e, "keepOnSplit", r))) !== null && t !== void 0) || t) && this.splittableMarks.push(e.name);
      const s = Y(e, "onBeforeCreate", r), i = Y(e, "onCreate", r), o = Y(e, "onUpdate", r), a = Y(e, "onSelectionUpdate", r), l = Y(e, "onTransaction", r), c = Y(e, "onFocus", r), d = Y(e, "onBlur", r), f = Y(e, "onDestroy", r);
      s && this.editor.on("beforeCreate", s), i && this.editor.on("create", i), o && this.editor.on("update", o), a && this.editor.on("selectionUpdate", a), l && this.editor.on("transaction", l), c && this.editor.on("focus", c), d && this.editor.on("blur", d), f && this.editor.on("destroy", f);
    });
  }
}
function Dv(n) {
  return Object.prototype.toString.call(n).slice(8, -1);
}
function Fs(n) {
  return Dv(n) !== "Object" ? !1 : n.constructor === Object && Object.getPrototypeOf(n) === Object.prototype;
}
function yo(n, e) {
  const t = { ...n };
  return Fs(n) && Fs(e) && Object.keys(e).forEach((r) => {
    Fs(e[r]) && Fs(n[r]) ? t[r] = yo(n[r], e[r]) : t[r] = e[r];
  }), t;
}
class lt {
  constructor(e = {}) {
    this.type = "extension", this.name = "extension", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...e
    }, this.name = this.config.name, e.defaultOptions && Object.keys(e.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = pe(Y(this, "addOptions", {
      name: this.name
    }))), this.storage = pe(Y(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(e = {}) {
    return new lt(e);
  }
  configure(e = {}) {
    const t = this.extend({
      ...this.config,
      addOptions: () => yo(this.options, e)
    });
    return t.name = this.name, t.parent = this.parent, t;
  }
  extend(e = {}) {
    const t = new lt({ ...this.config, ...e });
    return t.parent = this, this.child = t, t.name = e.name ? e.name : t.parent.name, e.defaultOptions && Object.keys(e.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${t.name}".`), t.options = pe(Y(t, "addOptions", {
      name: t.name
    })), t.storage = pe(Y(t, "addStorage", {
      name: t.name,
      options: t.options
    })), t;
  }
}
function hh(n, e, t) {
  const { from: r, to: s } = e, { blockSeparator: i = `

`, textSerializers: o = {} } = t || {};
  let a = "";
  return n.nodesBetween(r, s, (l, c, d, f) => {
    var h;
    l.isBlock && c > r && (a += i);
    const p = o == null ? void 0 : o[l.type.name];
    if (p)
      return d && (a += p({
        node: l,
        pos: c,
        parent: d,
        index: f,
        range: e
      })), !1;
    l.isText && (a += (h = l == null ? void 0 : l.text) === null || h === void 0 ? void 0 : h.slice(Math.max(r, c) - c, s - c));
  }), a;
}
function ph(n) {
  return Object.fromEntries(Object.entries(n.nodes).filter(([, e]) => e.spec.toText).map(([e, t]) => [e, t.spec.toText]));
}
const Lv = lt.create({
  name: "clipboardTextSerializer",
  addOptions() {
    return {
      blockSeparator: void 0
    };
  },
  addProseMirrorPlugins() {
    return [
      new it({
        key: new Ht("clipboardTextSerializer"),
        props: {
          clipboardTextSerializer: () => {
            const { editor: n } = this, { state: e, schema: t } = n, { doc: r, selection: s } = e, { ranges: i } = s, o = Math.min(...i.map((d) => d.$from.pos)), a = Math.max(...i.map((d) => d.$to.pos)), l = ph(t);
            return hh(r, { from: o, to: a }, {
              ...this.options.blockSeparator !== void 0 ? { blockSeparator: this.options.blockSeparator } : {},
              textSerializers: l
            });
          }
        }
      })
    ];
  }
}), Pv = () => ({ editor: n, view: e }) => (requestAnimationFrame(() => {
  var t;
  n.isDestroyed || (e.dom.blur(), (t = window == null ? void 0 : window.getSelection()) === null || t === void 0 || t.removeAllRanges());
}), !0), $v = (n = !1) => ({ commands: e }) => e.setContent("", n), Zv = () => ({ state: n, tr: e, dispatch: t }) => {
  const { selection: r } = e, { ranges: s } = r;
  return t && s.forEach(({ $from: i, $to: o }) => {
    n.doc.nodesBetween(i.pos, o.pos, (a, l) => {
      if (a.type.isText)
        return;
      const { doc: c, mapping: d } = e, f = c.resolve(d.map(l)), h = c.resolve(d.map(l + a.nodeSize)), p = f.blockRange(h);
      if (!p)
        return;
      const m = $r(p);
      if (a.type.isTextblock) {
        const { defaultType: b } = f.parent.contentMatchAt(f.index());
        e.setNodeMarkup(p.start, b);
      }
      (m || m === 0) && e.lift(p, m);
    });
  }), !0;
}, Vv = (n) => (e) => n(e), zv = () => ({ state: n, dispatch: e }) => lv(n, e), jv = (n, e) => ({ editor: t, tr: r }) => {
  const { state: s } = t, i = s.doc.slice(n.from, n.to);
  r.deleteRange(n.from, n.to);
  const o = r.mapping.map(e);
  return r.insert(o, i.content), r.setSelection(new le(r.doc.resolve(o - 1))), !0;
}, Fv = () => ({ tr: n, dispatch: e }) => {
  const { selection: t } = n, r = t.$anchor.node();
  if (r.content.size > 0)
    return !1;
  const s = n.selection.$anchor;
  for (let i = s.depth; i > 0; i -= 1)
    if (s.node(i).type === r.type) {
      if (e) {
        const a = s.before(i), l = s.after(i);
        n.delete(a, l).scrollIntoView();
      }
      return !0;
    }
  return !1;
}, Bv = (n) => ({ tr: e, state: t, dispatch: r }) => {
  const s = Be(n, t.schema), i = e.selection.$anchor;
  for (let o = i.depth; o > 0; o -= 1)
    if (i.node(o).type === s) {
      if (r) {
        const l = i.before(o), c = i.after(o);
        e.delete(l, c).scrollIntoView();
      }
      return !0;
    }
  return !1;
}, Wv = (n) => ({ tr: e, dispatch: t }) => {
  const { from: r, to: s } = n;
  return t && e.delete(r, s), !0;
}, Uv = () => ({ state: n, dispatch: e }) => Gb(n, e), Kv = () => ({ commands: n }) => n.keyboardShortcut("Enter"), qv = () => ({ state: n, dispatch: e }) => av(n, e);
function yi(n, e, t = { strict: !0 }) {
  const r = Object.keys(e);
  return r.length ? r.every((s) => t.strict ? e[s] === n[s] : gl(e[s]) ? e[s].test(n[s]) : e[s] === n[s]) : !0;
}
function Na(n, e, t = {}) {
  return n.find((r) => r.type === e && yi(r.attrs, t));
}
function Jv(n, e, t = {}) {
  return !!Na(n, e, t);
}
function yl(n, e, t = {}) {
  if (!n || !e)
    return;
  let r = n.parent.childAfter(n.parentOffset);
  if (n.parentOffset === r.offset && r.offset !== 0 && (r = n.parent.childBefore(n.parentOffset)), !r.node)
    return;
  const s = Na([...r.node.marks], e, t);
  if (!s)
    return;
  let i = r.index, o = n.start() + r.offset, a = i + 1, l = o + r.node.nodeSize;
  for (Na([...r.node.marks], e, t); i > 0 && s.isInSet(n.parent.child(i - 1).marks); )
    i -= 1, o -= n.parent.child(i).nodeSize;
  for (; a < n.parent.childCount && Jv([...n.parent.child(a).marks], e, t); )
    l += n.parent.child(a).nodeSize, a += 1;
  return {
    from: o,
    to: l
  };
}
function Nn(n, e) {
  if (typeof n == "string") {
    if (!e.marks[n])
      throw Error(`There is no mark type named '${n}'. Maybe you forgot to add the extension?`);
    return e.marks[n];
  }
  return n;
}
const Gv = (n, e = {}) => ({ tr: t, state: r, dispatch: s }) => {
  const i = Nn(n, r.schema), { doc: o, selection: a } = t, { $from: l, from: c, to: d } = a;
  if (s) {
    const f = yl(l, i, e);
    if (f && f.from <= c && f.to >= d) {
      const h = le.create(o, f.from, f.to);
      t.setSelection(h);
    }
  }
  return !0;
}, Yv = (n) => (e) => {
  const t = typeof n == "function" ? n(e) : n;
  for (let r = 0; r < t.length; r += 1)
    if (t[r](e))
      return !0;
  return !1;
};
function mh(n) {
  return n instanceof le;
}
function $n(n = 0, e = 0, t = 0) {
  return Math.min(Math.max(n, e), t);
}
function gh(n, e = null) {
  if (!e)
    return null;
  const t = ue.atStart(n), r = ue.atEnd(n);
  if (e === "start" || e === !0)
    return t;
  if (e === "end")
    return r;
  const s = t.from, i = r.to;
  return e === "all" ? le.create(n, $n(0, s, i), $n(n.content.size, s, i)) : le.create(n, $n(e, s, i), $n(e, s, i));
}
function bl() {
  return [
    "iPad Simulator",
    "iPhone Simulator",
    "iPod Simulator",
    "iPad",
    "iPhone",
    "iPod"
  ].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
const Qv = (n = null, e = {}) => ({ editor: t, view: r, tr: s, dispatch: i }) => {
  e = {
    scrollIntoView: !0,
    ...e
  };
  const o = () => {
    bl() && r.dom.focus(), requestAnimationFrame(() => {
      t.isDestroyed || (r.focus(), e != null && e.scrollIntoView && t.commands.scrollIntoView());
    });
  };
  if (r.hasFocus() && n === null || n === !1)
    return !0;
  if (i && n === null && !mh(t.state.selection))
    return o(), !0;
  const a = gh(s.doc, n) || t.state.selection, l = t.state.selection.eq(a);
  return i && (l || s.setSelection(a), l && s.storedMarks && s.setStoredMarks(s.storedMarks), o()), !0;
}, Xv = (n, e) => (t) => n.every((r, s) => e(r, { ...t, index: s })), ex = (n, e) => ({ tr: t, commands: r }) => r.insertContentAt({ from: t.selection.from, to: t.selection.to }, n, e), yh = (n) => {
  const e = n.childNodes;
  for (let t = e.length - 1; t >= 0; t -= 1) {
    const r = e[t];
    r.nodeType === 3 && r.nodeValue && /^(\n\s\s|\n)$/.test(r.nodeValue) ? n.removeChild(r) : r.nodeType === 1 && yh(r);
  }
  return n;
};
function Bs(n) {
  const e = `<body>${n}</body>`, t = new window.DOMParser().parseFromString(e, "text/html").body;
  return yh(t);
}
function bi(n, e, t) {
  t = {
    slice: !0,
    parseOptions: {},
    ...t
  };
  const r = typeof n == "object" && n !== null, s = typeof n == "string";
  if (r)
    try {
      if (Array.isArray(n) && n.length > 0)
        return L.fromArray(n.map((a) => e.nodeFromJSON(a)));
      const o = e.nodeFromJSON(n);
      return t.errorOnInvalidContent && o.check(), o;
    } catch (i) {
      if (t.errorOnInvalidContent)
        throw new Error("[tiptap error]: Invalid JSON content", { cause: i });
      return console.warn("[tiptap warn]: Invalid content.", "Passed value:", n, "Error:", i), bi("", e, t);
    }
  if (s) {
    if (t.errorOnInvalidContent) {
      let o = !1, a = "";
      const l = new o0({
        topNode: e.spec.topNode,
        marks: e.spec.marks,
        // Prosemirror's schemas are executed such that: the last to execute, matches last
        // This means that we can add a catch-all node at the end of the schema to catch any content that we don't know how to handle
        nodes: e.spec.nodes.append({
          __tiptap__private__unknown__catch__all__node: {
            content: "inline*",
            group: "block",
            parseDOM: [
              {
                tag: "*",
                getAttrs: (c) => (o = !0, a = typeof c == "string" ? c : c.outerHTML, null)
              }
            ]
          }
        })
      });
      if (t.slice ? yn.fromSchema(l).parseSlice(Bs(n), t.parseOptions) : yn.fromSchema(l).parse(Bs(n), t.parseOptions), t.errorOnInvalidContent && o)
        throw new Error("[tiptap error]: Invalid HTML content", { cause: new Error(`Invalid element found: ${a}`) });
    }
    const i = yn.fromSchema(e);
    return t.slice ? i.parseSlice(Bs(n), t.parseOptions).content : i.parse(Bs(n), t.parseOptions);
  }
  return bi("", e, t);
}
function tx(n, e, t) {
  const r = n.steps.length - 1;
  if (r < e)
    return;
  const s = n.steps[r];
  if (!(s instanceof Ve || s instanceof je))
    return;
  const i = n.mapping.maps[r];
  let o = 0;
  i.forEach((a, l, c, d) => {
    o === 0 && (o = d);
  }), n.setSelection(ue.near(n.doc.resolve(o), t));
}
const nx = (n) => !("type" in n), rx = (n, e, t) => ({ tr: r, dispatch: s, editor: i }) => {
  var o;
  if (s) {
    t = {
      parseOptions: {},
      updateSelection: !0,
      applyInputRules: !1,
      applyPasteRules: !1,
      ...t
    };
    let a;
    try {
      a = bi(e, i.schema, {
        parseOptions: {
          preserveWhitespace: "full",
          ...t.parseOptions
        },
        errorOnInvalidContent: (o = t.errorOnInvalidContent) !== null && o !== void 0 ? o : i.options.enableContentCheck
      });
    } catch (m) {
      return i.emit("contentError", {
        editor: i,
        error: m,
        disableCollaboration: () => {
          console.error("[tiptap error]: Unable to disable collaboration at this point in time");
        }
      }), !1;
    }
    let { from: l, to: c } = typeof n == "number" ? { from: n, to: n } : { from: n.from, to: n.to }, d = !0, f = !0;
    if ((nx(a) ? a : [a]).forEach((m) => {
      m.check(), d = d ? m.isText && m.marks.length === 0 : !1, f = f ? m.isBlock : !1;
    }), l === c && f) {
      const { parent: m } = r.doc.resolve(l);
      m.isTextblock && !m.type.spec.code && !m.childCount && (l -= 1, c += 1);
    }
    let p;
    d ? (Array.isArray(e) ? p = e.map((m) => m.text || "").join("") : typeof e == "object" && e && e.text ? p = e.text : p = e, r.insertText(p, l, c)) : (p = a, r.replaceWith(l, c, p)), t.updateSelection && tx(r, r.steps.length - 1, -1), t.applyInputRules && r.setMeta("applyInputRules", { from: l, text: p }), t.applyPasteRules && r.setMeta("applyPasteRules", { from: l, text: p });
  }
  return !0;
}, sx = () => ({ state: n, dispatch: e }) => rv(n, e), ix = () => ({ state: n, dispatch: e }) => sv(n, e), ox = () => ({ state: n, dispatch: e }) => Yb(n, e), ax = () => ({ state: n, dispatch: e }) => tv(n, e), lx = () => ({ state: n, dispatch: e, tr: t }) => {
  try {
    const r = oo(n.doc, n.selection.$from.pos, -1);
    return r == null ? !1 : (t.join(r, 2), e && e(t), !0);
  } catch {
    return !1;
  }
}, cx = () => ({ state: n, dispatch: e, tr: t }) => {
  try {
    const r = oo(n.doc, n.selection.$from.pos, 1);
    return r == null ? !1 : (t.join(r, 2), e && e(t), !0);
  } catch {
    return !1;
  }
}, dx = () => ({ state: n, dispatch: e }) => Qb(n, e), ux = () => ({ state: n, dispatch: e }) => Xb(n, e);
function bh() {
  return typeof navigator < "u" ? /Mac/.test(navigator.platform) : !1;
}
function fx(n) {
  const e = n.split(/-(?!$)/);
  let t = e[e.length - 1];
  t === "Space" && (t = " ");
  let r, s, i, o;
  for (let a = 0; a < e.length - 1; a += 1) {
    const l = e[a];
    if (/^(cmd|meta|m)$/i.test(l))
      o = !0;
    else if (/^a(lt)?$/i.test(l))
      r = !0;
    else if (/^(c|ctrl|control)$/i.test(l))
      s = !0;
    else if (/^s(hift)?$/i.test(l))
      i = !0;
    else if (/^mod$/i.test(l))
      bl() || bh() ? o = !0 : s = !0;
    else
      throw new Error(`Unrecognized modifier name: ${l}`);
  }
  return r && (t = `Alt-${t}`), s && (t = `Ctrl-${t}`), o && (t = `Meta-${t}`), i && (t = `Shift-${t}`), t;
}
const hx = (n) => ({ editor: e, view: t, tr: r, dispatch: s }) => {
  const i = fx(n).split(/-(?!$)/), o = i.find((c) => !["Alt", "Ctrl", "Meta", "Shift"].includes(c)), a = new KeyboardEvent("keydown", {
    key: o === "Space" ? " " : o,
    altKey: i.includes("Alt"),
    ctrlKey: i.includes("Ctrl"),
    metaKey: i.includes("Meta"),
    shiftKey: i.includes("Shift"),
    bubbles: !0,
    cancelable: !0
  }), l = e.captureTransaction(() => {
    t.someProp("handleKeyDown", (c) => c(t, a));
  });
  return l == null || l.steps.forEach((c) => {
    const d = c.map(r.mapping);
    d && s && r.maybeStep(d);
  }), !0;
};
function hs(n, e, t = {}) {
  const { from: r, to: s, empty: i } = n.selection, o = e ? Be(e, n.schema) : null, a = [];
  n.doc.nodesBetween(r, s, (f, h) => {
    if (f.isText)
      return;
    const p = Math.max(r, h), m = Math.min(s, h + f.nodeSize);
    a.push({
      node: f,
      from: p,
      to: m
    });
  });
  const l = s - r, c = a.filter((f) => o ? o.name === f.node.type.name : !0).filter((f) => yi(f.node.attrs, t, { strict: !1 }));
  return i ? !!c.length : c.reduce((f, h) => f + h.to - h.from, 0) >= l;
}
const px = (n, e = {}) => ({ state: t, dispatch: r }) => {
  const s = Be(n, t.schema);
  return hs(t, s, e) ? iv(t, r) : !1;
}, mx = () => ({ state: n, dispatch: e }) => cv(n, e), gx = (n) => ({ state: e, dispatch: t }) => {
  const r = Be(n, e.schema);
  return yv(r)(e, t);
}, yx = () => ({ state: n, dispatch: e }) => ov(n, e);
function bo(n, e) {
  return e.nodes[n] ? "node" : e.marks[n] ? "mark" : null;
}
function ru(n, e) {
  const t = typeof e == "string" ? [e] : e;
  return Object.keys(n).reduce((r, s) => (t.includes(s) || (r[s] = n[s]), r), {});
}
const bx = (n, e) => ({ tr: t, state: r, dispatch: s }) => {
  let i = null, o = null;
  const a = bo(typeof n == "string" ? n : n.name, r.schema);
  return a ? (a === "node" && (i = Be(n, r.schema)), a === "mark" && (o = Nn(n, r.schema)), s && t.selection.ranges.forEach((l) => {
    r.doc.nodesBetween(l.$from.pos, l.$to.pos, (c, d) => {
      i && i === c.type && t.setNodeMarkup(d, void 0, ru(c.attrs, e)), o && c.marks.length && c.marks.forEach((f) => {
        o === f.type && t.addMark(d, d + c.nodeSize, o.create(ru(f.attrs, e)));
      });
    });
  }), !0) : !1;
}, vx = () => ({ tr: n, dispatch: e }) => (e && n.scrollIntoView(), !0), xx = () => ({ tr: n, commands: e }) => e.setTextSelection({
  from: 0,
  to: n.doc.content.size
}), kx = () => ({ state: n, dispatch: e }) => ev(n, e), wx = () => ({ state: n, dispatch: e }) => nv(n, e), Ex = () => ({ state: n, dispatch: e }) => dv(n, e), Mx = () => ({ state: n, dispatch: e }) => hv(n, e), Sx = () => ({ state: n, dispatch: e }) => fv(n, e);
function _a(n, e, t = {}, r = {}) {
  return bi(n, e, {
    slice: !1,
    parseOptions: t,
    errorOnInvalidContent: r.errorOnInvalidContent
  });
}
const Ax = (n, e = !1, t = {}, r = {}) => ({ editor: s, tr: i, dispatch: o, commands: a }) => {
  var l, c;
  const { doc: d } = i;
  if (t.preserveWhitespace !== "full") {
    const f = _a(n, s.schema, t, {
      errorOnInvalidContent: (l = r.errorOnInvalidContent) !== null && l !== void 0 ? l : s.options.enableContentCheck
    });
    return o && i.replaceWith(0, d.content.size, f).setMeta("preventUpdate", !e), !0;
  }
  return o && i.setMeta("preventUpdate", !e), a.insertContentAt({ from: 0, to: d.content.size }, n, {
    parseOptions: t,
    errorOnInvalidContent: (c = r.errorOnInvalidContent) !== null && c !== void 0 ? c : s.options.enableContentCheck
  });
};
function vo(n, e) {
  const t = Nn(e, n.schema), { from: r, to: s, empty: i } = n.selection, o = [];
  i ? (n.storedMarks && o.push(...n.storedMarks), o.push(...n.selection.$head.marks())) : n.doc.nodesBetween(r, s, (l) => {
    o.push(...l.marks);
  });
  const a = o.find((l) => l.type.name === t.name);
  return a ? { ...a.attrs } : {};
}
function Cx(n, e) {
  const t = new k0(n);
  return e.forEach((r) => {
    r.steps.forEach((s) => {
      t.step(s);
    });
  }), t;
}
function Ox(n) {
  for (let e = 0; e < n.edgeCount; e += 1) {
    const { type: t } = n.edge(e);
    if (t.isTextblock && !t.hasRequiredAttrs())
      return t;
  }
  return null;
}
function Tx(n, e, t) {
  const r = [];
  return n.nodesBetween(e.from, e.to, (s, i) => {
    t(s) && r.push({
      node: s,
      pos: i
    });
  }), r;
}
function Nx(n, e) {
  for (let t = n.depth; t > 0; t -= 1) {
    const r = n.node(t);
    if (e(r))
      return {
        pos: t > 0 ? n.before(t) : 0,
        start: n.start(t),
        depth: t,
        node: r
      };
  }
}
function vl(n) {
  return (e) => Nx(e.$from, n);
}
function _x(n, e) {
  const t = or.fromSchema(e).serializeFragment(n), s = document.implementation.createHTMLDocument().createElement("div");
  return s.appendChild(t), s.innerHTML;
}
function Hx(n, e) {
  const t = {
    from: 0,
    to: n.content.size
  };
  return hh(n, t, e);
}
function Ix(n, e) {
  const t = Be(e, n.schema), { from: r, to: s } = n.selection, i = [];
  n.doc.nodesBetween(r, s, (a) => {
    i.push(a);
  });
  const o = i.reverse().find((a) => a.type.name === t.name);
  return o ? { ...o.attrs } : {};
}
function vh(n, e) {
  const t = bo(typeof e == "string" ? e : e.name, n.schema);
  return t === "node" ? Ix(n, e) : t === "mark" ? vo(n, e) : {};
}
function Rx(n, e = JSON.stringify) {
  const t = {};
  return n.filter((r) => {
    const s = e(r);
    return Object.prototype.hasOwnProperty.call(t, s) ? !1 : t[s] = !0;
  });
}
function Dx(n) {
  const e = Rx(n);
  return e.length === 1 ? e : e.filter((t, r) => !e.filter((i, o) => o !== r).some((i) => t.oldRange.from >= i.oldRange.from && t.oldRange.to <= i.oldRange.to && t.newRange.from >= i.newRange.from && t.newRange.to <= i.newRange.to));
}
function Lx(n) {
  const { mapping: e, steps: t } = n, r = [];
  return e.maps.forEach((s, i) => {
    const o = [];
    if (s.ranges.length)
      s.forEach((a, l) => {
        o.push({ from: a, to: l });
      });
    else {
      const { from: a, to: l } = t[i];
      if (a === void 0 || l === void 0)
        return;
      o.push({ from: a, to: l });
    }
    o.forEach(({ from: a, to: l }) => {
      const c = e.slice(i).map(a, -1), d = e.slice(i).map(l), f = e.invert().map(c, -1), h = e.invert().map(d);
      r.push({
        oldRange: {
          from: f,
          to: h
        },
        newRange: {
          from: c,
          to: d
        }
      });
    });
  }), Dx(r);
}
function xl(n, e, t) {
  const r = [];
  return n === e ? t.resolve(n).marks().forEach((s) => {
    const i = t.resolve(n), o = yl(i, s.type);
    o && r.push({
      mark: s,
      ...o
    });
  }) : t.nodesBetween(n, e, (s, i) => {
    !s || (s == null ? void 0 : s.nodeSize) === void 0 || r.push(...s.marks.map((o) => ({
      from: i,
      to: i + s.nodeSize,
      mark: o
    })));
  }), r;
}
function Qs(n, e, t) {
  return Object.fromEntries(Object.entries(t).filter(([r]) => {
    const s = n.find((i) => i.type === e && i.name === r);
    return s ? s.attribute.keepOnSplit : !1;
  }));
}
function Ha(n, e, t = {}) {
  const { empty: r, ranges: s } = n.selection, i = e ? Nn(e, n.schema) : null;
  if (r)
    return !!(n.storedMarks || n.selection.$from.marks()).filter((f) => i ? i.name === f.type.name : !0).find((f) => yi(f.attrs, t, { strict: !1 }));
  let o = 0;
  const a = [];
  if (s.forEach(({ $from: f, $to: h }) => {
    const p = f.pos, m = h.pos;
    n.doc.nodesBetween(p, m, (b, v) => {
      if (!b.isText && !b.marks.length)
        return;
      const w = Math.max(p, v), H = Math.min(m, v + b.nodeSize), z = H - w;
      o += z, a.push(...b.marks.map((F) => ({
        mark: F,
        from: w,
        to: H
      })));
    });
  }), o === 0)
    return !1;
  const l = a.filter((f) => i ? i.name === f.mark.type.name : !0).filter((f) => yi(f.mark.attrs, t, { strict: !1 })).reduce((f, h) => f + h.to - h.from, 0), c = a.filter((f) => i ? f.mark.type !== i && f.mark.type.excludes(i) : !0).reduce((f, h) => f + h.to - h.from, 0);
  return (l > 0 ? l + c : l) >= o;
}
function Px(n, e, t = {}) {
  if (!e)
    return hs(n, null, t) || Ha(n, null, t);
  const r = bo(e, n.schema);
  return r === "node" ? hs(n, e, t) : r === "mark" ? Ha(n, e, t) : !1;
}
function su(n, e) {
  const { nodeExtensions: t } = mo(e), r = t.find((o) => o.name === n);
  if (!r)
    return !1;
  const s = {
    name: r.name,
    options: r.options,
    storage: r.storage
  }, i = pe(Y(r, "group", s));
  return typeof i != "string" ? !1 : i.split(" ").includes("list");
}
function xh(n, { checkChildren: e = !0, ignoreWhitespace: t = !1 } = {}) {
  var r;
  if (t) {
    if (n.type.name === "hardBreak")
      return !0;
    if (n.isText)
      return /^\s*$/m.test((r = n.text) !== null && r !== void 0 ? r : "");
  }
  if (n.isText)
    return !n.text;
  if (n.isAtom || n.isLeaf)
    return !1;
  if (n.content.childCount === 0)
    return !0;
  if (e) {
    let s = !0;
    return n.content.forEach((i) => {
      s !== !1 && (xh(i, { ignoreWhitespace: t, checkChildren: e }) || (s = !1));
    }), s;
  }
  return !1;
}
function $x(n) {
  return n instanceof ne;
}
function Zx(n, e, t) {
  var r;
  const { selection: s } = e;
  let i = null;
  if (mh(s) && (i = s.$cursor), i) {
    const a = (r = n.storedMarks) !== null && r !== void 0 ? r : i.marks();
    return !!t.isInSet(a) || !a.some((l) => l.type.excludes(t));
  }
  const { ranges: o } = s;
  return o.some(({ $from: a, $to: l }) => {
    let c = a.depth === 0 ? n.doc.inlineContent && n.doc.type.allowsMarkType(t) : !1;
    return n.doc.nodesBetween(a.pos, l.pos, (d, f, h) => {
      if (c)
        return !1;
      if (d.isInline) {
        const p = !h || h.type.allowsMarkType(t), m = !!t.isInSet(d.marks) || !d.marks.some((b) => b.type.excludes(t));
        c = p && m;
      }
      return !c;
    }), c;
  });
}
const Vx = (n, e = {}) => ({ tr: t, state: r, dispatch: s }) => {
  const { selection: i } = t, { empty: o, ranges: a } = i, l = Nn(n, r.schema);
  if (s)
    if (o) {
      const c = vo(r, l);
      t.addStoredMark(l.create({
        ...c,
        ...e
      }));
    } else
      a.forEach((c) => {
        const d = c.$from.pos, f = c.$to.pos;
        r.doc.nodesBetween(d, f, (h, p) => {
          const m = Math.max(p, d), b = Math.min(p + h.nodeSize, f);
          h.marks.find((w) => w.type === l) ? h.marks.forEach((w) => {
            l === w.type && t.addMark(m, b, l.create({
              ...w.attrs,
              ...e
            }));
          }) : t.addMark(m, b, l.create(e));
        });
      });
  return Zx(r, t, l);
}, zx = (n, e) => ({ tr: t }) => (t.setMeta(n, e), !0), jx = (n, e = {}) => ({ state: t, dispatch: r, chain: s }) => {
  const i = Be(n, t.schema);
  return i.isTextblock ? s().command(({ commands: o }) => Xd(i, e)(t) ? !0 : o.clearNodes()).command(({ state: o }) => Xd(i, e)(o, r)).run() : (console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.'), !1);
}, Fx = (n) => ({ tr: e, dispatch: t }) => {
  if (t) {
    const { doc: r } = e, s = $n(n, 0, r.content.size), i = ne.create(r, s);
    e.setSelection(i);
  }
  return !0;
}, Bx = (n) => ({ tr: e, dispatch: t }) => {
  if (t) {
    const { doc: r } = e, { from: s, to: i } = typeof n == "number" ? { from: n, to: n } : n, o = le.atStart(r).from, a = le.atEnd(r).to, l = $n(s, o, a), c = $n(i, o, a), d = le.create(r, l, c);
    e.setSelection(d);
  }
  return !0;
}, Wx = (n) => ({ state: e, dispatch: t }) => {
  const r = Be(n, e.schema);
  return xv(r)(e, t);
};
function iu(n, e) {
  const t = n.storedMarks || n.selection.$to.parentOffset && n.selection.$from.marks();
  if (t) {
    const r = t.filter((s) => e == null ? void 0 : e.includes(s.type.name));
    n.tr.ensureMarks(r);
  }
}
const Ux = ({ keepMarks: n = !0 } = {}) => ({ tr: e, state: t, dispatch: r, editor: s }) => {
  const { selection: i, doc: o } = e, { $from: a, $to: l } = i, c = s.extensionManager.attributes, d = Qs(c, a.node().type.name, a.node().attrs);
  if (i instanceof ne && i.node.isBlock)
    return !a.parentOffset || !wr(o, a.pos) ? !1 : (r && (n && iu(t, s.extensionManager.splittableMarks), e.split(a.pos).scrollIntoView()), !0);
  if (!a.parent.isBlock)
    return !1;
  const f = l.parentOffset === l.parent.content.size, h = a.depth === 0 ? void 0 : Ox(a.node(-1).contentMatchAt(a.indexAfter(-1)));
  let p = f && h ? [
    {
      type: h,
      attrs: d
    }
  ] : void 0, m = wr(e.doc, e.mapping.map(a.pos), 1, p);
  if (!p && !m && wr(e.doc, e.mapping.map(a.pos), 1, h ? [{ type: h }] : void 0) && (m = !0, p = h ? [
    {
      type: h,
      attrs: d
    }
  ] : void 0), r) {
    if (m && (i instanceof le && e.deleteSelection(), e.split(e.mapping.map(a.pos), 1, p), h && !f && !a.parentOffset && a.parent.type !== h)) {
      const b = e.mapping.map(a.before()), v = e.doc.resolve(b);
      a.node(-1).canReplaceWith(v.index(), v.index() + 1, h) && e.setNodeMarkup(e.mapping.map(a.before()), h);
    }
    n && iu(t, s.extensionManager.splittableMarks), e.scrollIntoView();
  }
  return m;
}, Kx = (n, e = {}) => ({ tr: t, state: r, dispatch: s, editor: i }) => {
  var o;
  const a = Be(n, r.schema), { $from: l, $to: c } = r.selection, d = r.selection.node;
  if (d && d.isBlock || l.depth < 2 || !l.sameParent(c))
    return !1;
  const f = l.node(-1);
  if (f.type !== a)
    return !1;
  const h = i.extensionManager.attributes;
  if (l.parent.content.size === 0 && l.node(-1).childCount === l.indexAfter(-1)) {
    if (l.depth === 2 || l.node(-3).type !== a || l.index(-2) !== l.node(-2).childCount - 1)
      return !1;
    if (s) {
      let w = L.empty;
      const H = l.index(-1) ? 1 : l.index(-2) ? 2 : 3;
      for (let x = l.depth - H; x >= l.depth - 3; x -= 1)
        w = L.from(l.node(x).copy(w));
      const z = l.indexAfter(-1) < l.node(-2).childCount ? 1 : l.indexAfter(-2) < l.node(-3).childCount ? 2 : 3, F = {
        ...Qs(h, l.node().type.name, l.node().attrs),
        ...e
      }, q = ((o = a.contentMatch.defaultType) === null || o === void 0 ? void 0 : o.createAndFill(F)) || void 0;
      w = w.append(L.from(a.createAndFill(null, q) || void 0));
      const A = l.before(l.depth - (H - 1));
      t.replace(A, l.after(-z), new W(w, 4 - H, 0));
      let $ = -1;
      t.doc.nodesBetween(A, t.doc.content.size, (x, y) => {
        if ($ > -1)
          return !1;
        x.isTextblock && x.content.size === 0 && ($ = y + 1);
      }), $ > -1 && t.setSelection(le.near(t.doc.resolve($))), t.scrollIntoView();
    }
    return !0;
  }
  const p = c.pos === l.end() ? f.contentMatchAt(0).defaultType : null, m = {
    ...Qs(h, f.type.name, f.attrs),
    ...e
  }, b = {
    ...Qs(h, l.node().type.name, l.node().attrs),
    ...e
  };
  t.delete(l.pos, c.pos);
  const v = p ? [
    { type: a, attrs: m },
    { type: p, attrs: b }
  ] : [{ type: a, attrs: m }];
  if (!wr(t.doc, l.pos, 2))
    return !1;
  if (s) {
    const { selection: w, storedMarks: H } = r, { splittableMarks: z } = i.extensionManager, F = H || w.$to.parentOffset && w.$from.marks();
    if (t.split(l.pos, 2, v).scrollIntoView(), !F || !s)
      return !0;
    const q = F.filter((A) => z.includes(A.type.name));
    t.ensureMarks(q);
  }
  return !0;
}, Bo = (n, e) => {
  const t = vl((o) => o.type === e)(n.selection);
  if (!t)
    return !0;
  const r = n.doc.resolve(Math.max(0, t.pos - 1)).before(t.depth);
  if (r === void 0)
    return !0;
  const s = n.doc.nodeAt(r);
  return t.node.type === (s == null ? void 0 : s.type) && On(n.doc, t.pos) && n.join(t.pos), !0;
}, Wo = (n, e) => {
  const t = vl((o) => o.type === e)(n.selection);
  if (!t)
    return !0;
  const r = n.doc.resolve(t.start).after(t.depth);
  if (r === void 0)
    return !0;
  const s = n.doc.nodeAt(r);
  return t.node.type === (s == null ? void 0 : s.type) && On(n.doc, r) && n.join(r), !0;
}, qx = (n, e, t, r = {}) => ({ editor: s, tr: i, state: o, dispatch: a, chain: l, commands: c, can: d }) => {
  const { extensions: f, splittableMarks: h } = s.extensionManager, p = Be(n, o.schema), m = Be(e, o.schema), { selection: b, storedMarks: v } = o, { $from: w, $to: H } = b, z = w.blockRange(H), F = v || b.$to.parentOffset && b.$from.marks();
  if (!z)
    return !1;
  const q = vl((A) => su(A.type.name, f))(b);
  if (z.depth >= 1 && q && z.depth - q.depth <= 1) {
    if (q.node.type === p)
      return c.liftListItem(m);
    if (su(q.node.type.name, f) && p.validContent(q.node.content) && a)
      return l().command(() => (i.setNodeMarkup(q.pos, p), !0)).command(() => Bo(i, p)).command(() => Wo(i, p)).run();
  }
  return !t || !F || !a ? l().command(() => d().wrapInList(p, r) ? !0 : c.clearNodes()).wrapInList(p, r).command(() => Bo(i, p)).command(() => Wo(i, p)).run() : l().command(() => {
    const A = d().wrapInList(p, r), $ = F.filter((x) => h.includes(x.type.name));
    return i.ensureMarks($), A ? !0 : c.clearNodes();
  }).wrapInList(p, r).command(() => Bo(i, p)).command(() => Wo(i, p)).run();
}, Jx = (n, e = {}, t = {}) => ({ state: r, commands: s }) => {
  const { extendEmptyMarkRange: i = !1 } = t, o = Nn(n, r.schema);
  return Ha(r, o, e) ? s.unsetMark(o, { extendEmptyMarkRange: i }) : s.setMark(o, e);
}, Gx = (n, e, t = {}) => ({ state: r, commands: s }) => {
  const i = Be(n, r.schema), o = Be(e, r.schema);
  return hs(r, i, t) ? s.setNode(o) : s.setNode(i, t);
}, Yx = (n, e = {}) => ({ state: t, commands: r }) => {
  const s = Be(n, t.schema);
  return hs(t, s, e) ? r.lift(s) : r.wrapIn(s, e);
}, Qx = () => ({ state: n, dispatch: e }) => {
  const t = n.plugins;
  for (let r = 0; r < t.length; r += 1) {
    const s = t[r];
    let i;
    if (s.spec.isInputRules && (i = s.getState(n))) {
      if (e) {
        const o = n.tr, a = i.transform;
        for (let l = a.steps.length - 1; l >= 0; l -= 1)
          o.step(a.steps[l].invert(a.docs[l]));
        if (i.text) {
          const l = o.doc.resolve(i.from).marks();
          o.replaceWith(i.from, i.to, n.schema.text(i.text, l));
        } else
          o.delete(i.from, i.to);
      }
      return !0;
    }
  }
  return !1;
}, Xx = () => ({ tr: n, dispatch: e }) => {
  const { selection: t } = n, { empty: r, ranges: s } = t;
  return r || e && s.forEach((i) => {
    n.removeMark(i.$from.pos, i.$to.pos);
  }), !0;
}, ek = (n, e = {}) => ({ tr: t, state: r, dispatch: s }) => {
  var i;
  const { extendEmptyMarkRange: o = !1 } = e, { selection: a } = t, l = Nn(n, r.schema), { $from: c, empty: d, ranges: f } = a;
  if (!s)
    return !0;
  if (d && o) {
    let { from: h, to: p } = a;
    const m = (i = c.marks().find((v) => v.type === l)) === null || i === void 0 ? void 0 : i.attrs, b = yl(c, l, m);
    b && (h = b.from, p = b.to), t.removeMark(h, p, l);
  } else
    f.forEach((h) => {
      t.removeMark(h.$from.pos, h.$to.pos, l);
    });
  return t.removeStoredMark(l), !0;
}, tk = (n, e = {}) => ({ tr: t, state: r, dispatch: s }) => {
  let i = null, o = null;
  const a = bo(typeof n == "string" ? n : n.name, r.schema);
  return a ? (a === "node" && (i = Be(n, r.schema)), a === "mark" && (o = Nn(n, r.schema)), s && t.selection.ranges.forEach((l) => {
    const c = l.$from.pos, d = l.$to.pos;
    r.doc.nodesBetween(c, d, (f, h) => {
      i && i === f.type && t.setNodeMarkup(h, void 0, {
        ...f.attrs,
        ...e
      }), o && f.marks.length && f.marks.forEach((p) => {
        if (o === p.type) {
          const m = Math.max(h, c), b = Math.min(h + f.nodeSize, d);
          t.addMark(m, b, o.create({
            ...p.attrs,
            ...e
          }));
        }
      });
    });
  }), !0) : !1;
}, nk = (n, e = {}) => ({ state: t, dispatch: r }) => {
  const s = Be(n, t.schema);
  return pv(s, e)(t, r);
}, rk = (n, e = {}) => ({ state: t, dispatch: r }) => {
  const s = Be(n, t.schema);
  return mv(s, e)(t, r);
};
var sk = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  blur: Pv,
  clearContent: $v,
  clearNodes: Zv,
  command: Vv,
  createParagraphNear: zv,
  cut: jv,
  deleteCurrentNode: Fv,
  deleteNode: Bv,
  deleteRange: Wv,
  deleteSelection: Uv,
  enter: Kv,
  exitCode: qv,
  extendMarkRange: Gv,
  first: Yv,
  focus: Qv,
  forEach: Xv,
  insertContent: ex,
  insertContentAt: rx,
  joinBackward: ox,
  joinDown: ix,
  joinForward: ax,
  joinItemBackward: lx,
  joinItemForward: cx,
  joinTextblockBackward: dx,
  joinTextblockForward: ux,
  joinUp: sx,
  keyboardShortcut: hx,
  lift: px,
  liftEmptyBlock: mx,
  liftListItem: gx,
  newlineInCode: yx,
  resetAttributes: bx,
  scrollIntoView: vx,
  selectAll: xx,
  selectNodeBackward: kx,
  selectNodeForward: wx,
  selectParentNode: Ex,
  selectTextblockEnd: Mx,
  selectTextblockStart: Sx,
  setContent: Ax,
  setMark: Vx,
  setMeta: zx,
  setNode: jx,
  setNodeSelection: Fx,
  setTextSelection: Bx,
  sinkListItem: Wx,
  splitBlock: Ux,
  splitListItem: Kx,
  toggleList: qx,
  toggleMark: Jx,
  toggleNode: Gx,
  toggleWrap: Yx,
  undoInputRule: Qx,
  unsetAllMarks: Xx,
  unsetMark: ek,
  updateAttributes: tk,
  wrapIn: nk,
  wrapInList: rk
});
const ik = lt.create({
  name: "commands",
  addCommands() {
    return {
      ...sk
    };
  }
}), ok = lt.create({
  name: "editable",
  addProseMirrorPlugins() {
    return [
      new it({
        key: new Ht("editable"),
        props: {
          editable: () => this.editor.options.editable
        }
      })
    ];
  }
}), ak = lt.create({
  name: "focusEvents",
  addProseMirrorPlugins() {
    const { editor: n } = this;
    return [
      new it({
        key: new Ht("focusEvents"),
        props: {
          handleDOMEvents: {
            focus: (e, t) => {
              n.isFocused = !0;
              const r = n.state.tr.setMeta("focus", { event: t }).setMeta("addToHistory", !1);
              return e.dispatch(r), !1;
            },
            blur: (e, t) => {
              n.isFocused = !1;
              const r = n.state.tr.setMeta("blur", { event: t }).setMeta("addToHistory", !1);
              return e.dispatch(r), !1;
            }
          }
        }
      })
    ];
  }
}), lk = lt.create({
  name: "keymap",
  addKeyboardShortcuts() {
    const n = () => this.editor.commands.first(({ commands: o }) => [
      () => o.undoInputRule(),
      // maybe convert first text block node to default node
      () => o.command(({ tr: a }) => {
        const { selection: l, doc: c } = a, { empty: d, $anchor: f } = l, { pos: h, parent: p } = f, m = f.parent.isTextblock && h > 0 ? a.doc.resolve(h - 1) : f, b = m.parent.type.spec.isolating, v = f.pos - f.parentOffset, w = b && m.parent.childCount === 1 ? v === f.pos : ue.atStart(c).from === h;
        return !d || !p.type.isTextblock || p.textContent.length || !w || w && f.parent.type.name === "paragraph" ? !1 : o.clearNodes();
      }),
      () => o.deleteSelection(),
      () => o.joinBackward(),
      () => o.selectNodeBackward()
    ]), e = () => this.editor.commands.first(({ commands: o }) => [
      () => o.deleteSelection(),
      () => o.deleteCurrentNode(),
      () => o.joinForward(),
      () => o.selectNodeForward()
    ]), r = {
      Enter: () => this.editor.commands.first(({ commands: o }) => [
        () => o.newlineInCode(),
        () => o.createParagraphNear(),
        () => o.liftEmptyBlock(),
        () => o.splitBlock()
      ]),
      "Mod-Enter": () => this.editor.commands.exitCode(),
      Backspace: n,
      "Mod-Backspace": n,
      "Shift-Backspace": n,
      Delete: e,
      "Mod-Delete": e,
      "Mod-a": () => this.editor.commands.selectAll()
    }, s = {
      ...r
    }, i = {
      ...r,
      "Ctrl-h": n,
      "Alt-Backspace": n,
      "Ctrl-d": e,
      "Ctrl-Alt-Backspace": e,
      "Alt-Delete": e,
      "Alt-d": e,
      "Ctrl-a": () => this.editor.commands.selectTextblockStart(),
      "Ctrl-e": () => this.editor.commands.selectTextblockEnd()
    };
    return bl() || bh() ? i : s;
  },
  addProseMirrorPlugins() {
    return [
      // With this plugin we check if the whole document was selected and deleted.
      // In this case we will additionally call `clearNodes()` to convert e.g. a heading
      // to a paragraph if necessary.
      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well
      // with many other commands.
      new it({
        key: new Ht("clearDocument"),
        appendTransaction: (n, e, t) => {
          if (!(n.some((m) => m.docChanged) && !e.doc.eq(t.doc)))
            return;
          const { empty: s, from: i, to: o } = e.selection, a = ue.atStart(e.doc).from, l = ue.atEnd(e.doc).to;
          if (s || !(i === a && o === l) || !(t.doc.textBetween(0, t.doc.content.size, " ", " ").length === 0))
            return;
          const f = t.tr, h = ho({
            state: t,
            transaction: f
          }), { commands: p } = new po({
            editor: this.editor,
            state: h
          });
          if (p.clearNodes(), !!f.steps.length)
            return f;
        }
      })
    ];
  }
}), ck = lt.create({
  name: "tabindex",
  addProseMirrorPlugins() {
    return [
      new it({
        key: new Ht("tabindex"),
        props: {
          attributes: () => this.editor.isEditable ? { tabindex: "0" } : {}
        }
      })
    ];
  }
});
class Dn {
  get name() {
    return this.node.type.name;
  }
  constructor(e, t, r = !1, s = null) {
    this.currentNode = null, this.actualDepth = null, this.isBlock = r, this.resolvedPos = e, this.editor = t, this.currentNode = s;
  }
  get node() {
    return this.currentNode || this.resolvedPos.node();
  }
  get element() {
    return this.editor.view.domAtPos(this.pos).node;
  }
  get depth() {
    var e;
    return (e = this.actualDepth) !== null && e !== void 0 ? e : this.resolvedPos.depth;
  }
  get pos() {
    return this.resolvedPos.pos;
  }
  get content() {
    return this.node.content;
  }
  set content(e) {
    let t = this.from, r = this.to;
    if (this.isBlock) {
      if (this.content.size === 0) {
        console.error(`You can’t set content on a block node. Tried to set content on ${this.name} at ${this.pos}`);
        return;
      }
      t = this.from + 1, r = this.to - 1;
    }
    this.editor.commands.insertContentAt({ from: t, to: r }, e);
  }
  get attributes() {
    return this.node.attrs;
  }
  get textContent() {
    return this.node.textContent;
  }
  get size() {
    return this.node.nodeSize;
  }
  get from() {
    return this.isBlock ? this.pos : this.resolvedPos.start(this.resolvedPos.depth);
  }
  get range() {
    return {
      from: this.from,
      to: this.to
    };
  }
  get to() {
    return this.isBlock ? this.pos + this.size : this.resolvedPos.end(this.resolvedPos.depth) + (this.node.isText ? 0 : 1);
  }
  get parent() {
    if (this.depth === 0)
      return null;
    const e = this.resolvedPos.start(this.resolvedPos.depth - 1), t = this.resolvedPos.doc.resolve(e);
    return new Dn(t, this.editor);
  }
  get before() {
    let e = this.resolvedPos.doc.resolve(this.from - (this.isBlock ? 1 : 2));
    return e.depth !== this.depth && (e = this.resolvedPos.doc.resolve(this.from - 3)), new Dn(e, this.editor);
  }
  get after() {
    let e = this.resolvedPos.doc.resolve(this.to + (this.isBlock ? 2 : 1));
    return e.depth !== this.depth && (e = this.resolvedPos.doc.resolve(this.to + 3)), new Dn(e, this.editor);
  }
  get children() {
    const e = [];
    return this.node.content.forEach((t, r) => {
      const s = t.isBlock && !t.isTextblock, i = this.pos + r + 1, o = this.resolvedPos.doc.resolve(i);
      if (!s && o.depth <= this.depth)
        return;
      const a = new Dn(o, this.editor, s, s ? t : null);
      s && (a.actualDepth = this.depth + 1), e.push(new Dn(o, this.editor, s, s ? t : null));
    }), e;
  }
  get firstChild() {
    return this.children[0] || null;
  }
  get lastChild() {
    const e = this.children;
    return e[e.length - 1] || null;
  }
  closest(e, t = {}) {
    let r = null, s = this.parent;
    for (; s && !r; ) {
      if (s.node.type.name === e)
        if (Object.keys(t).length > 0) {
          const i = s.node.attrs, o = Object.keys(t);
          for (let a = 0; a < o.length; a += 1) {
            const l = o[a];
            if (i[l] !== t[l])
              break;
          }
        } else
          r = s;
      s = s.parent;
    }
    return r;
  }
  querySelector(e, t = {}) {
    return this.querySelectorAll(e, t, !0)[0] || null;
  }
  querySelectorAll(e, t = {}, r = !1) {
    let s = [];
    if (!this.children || this.children.length === 0)
      return s;
    const i = Object.keys(t);
    return this.children.forEach((o) => {
      r && s.length > 0 || (o.node.type.name === e && i.every((l) => t[l] === o.node.attrs[l]) && s.push(o), !(r && s.length > 0) && (s = s.concat(o.querySelectorAll(e, t, r))));
    }), s;
  }
  setAttribute(e) {
    const t = this.editor.state.selection;
    this.editor.chain().setTextSelection(this.from).updateAttributes(this.node.type.name, e).setTextSelection(t.from).run();
  }
}
const dk = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror [contenteditable="false"] {
  white-space: normal;
}

.ProseMirror [contenteditable="false"] [contenteditable="true"] {
  white-space: pre-wrap;
}

.ProseMirror pre {
  white-space: pre-wrap;
}

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
  width: 0 !important;
  height: 0 !important;
}

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
  margin: 0;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection * {
  caret-color: transparent;
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}

.tippy-box[data-animation=fade][data-state=hidden] {
  opacity: 0
}`;
function uk(n, e, t) {
  const r = document.querySelector("style[data-tiptap-style]");
  if (r !== null)
    return r;
  const s = document.createElement("style");
  return e && s.setAttribute("nonce", e), s.setAttribute("data-tiptap-style", ""), s.innerHTML = n, document.getElementsByTagName("head")[0].appendChild(s), s;
}
class fk extends kv {
  constructor(e = {}) {
    super(), this.isFocused = !1, this.isInitialized = !1, this.extensionStorage = {}, this.options = {
      element: document.createElement("div"),
      content: "",
      injectCSS: !0,
      injectNonce: void 0,
      extensions: [],
      autofocus: !1,
      editable: !0,
      editorProps: {},
      parseOptions: {},
      coreExtensionOptions: {},
      enableInputRules: !0,
      enablePasteRules: !0,
      enableCoreExtensions: !0,
      enableContentCheck: !1,
      onBeforeCreate: () => null,
      onCreate: () => null,
      onUpdate: () => null,
      onSelectionUpdate: () => null,
      onTransaction: () => null,
      onFocus: () => null,
      onBlur: () => null,
      onDestroy: () => null,
      onContentError: ({ error: t }) => {
        throw t;
      }
    }, this.isCapturingTransaction = !1, this.capturedTransaction = null, this.setOptions(e), this.createExtensionManager(), this.createCommandManager(), this.createSchema(), this.on("beforeCreate", this.options.onBeforeCreate), this.emit("beforeCreate", { editor: this }), this.on("contentError", this.options.onContentError), this.createView(), this.injectCSS(), this.on("create", this.options.onCreate), this.on("update", this.options.onUpdate), this.on("selectionUpdate", this.options.onSelectionUpdate), this.on("transaction", this.options.onTransaction), this.on("focus", this.options.onFocus), this.on("blur", this.options.onBlur), this.on("destroy", this.options.onDestroy), window.setTimeout(() => {
      this.isDestroyed || (this.commands.focus(this.options.autofocus), this.emit("create", { editor: this }), this.isInitialized = !0);
    }, 0);
  }
  /**
   * Returns the editor storage.
   */
  get storage() {
    return this.extensionStorage;
  }
  /**
   * An object of all registered commands.
   */
  get commands() {
    return this.commandManager.commands;
  }
  /**
   * Create a command chain to call multiple commands at once.
   */
  chain() {
    return this.commandManager.chain();
  }
  /**
   * Check if a command or a command chain can be executed. Without executing it.
   */
  can() {
    return this.commandManager.can();
  }
  /**
   * Inject CSS styles.
   */
  injectCSS() {
    this.options.injectCSS && document && (this.css = uk(dk, this.options.injectNonce));
  }
  /**
   * Update editor options.
   *
   * @param options A list of options
   */
  setOptions(e = {}) {
    this.options = {
      ...this.options,
      ...e
    }, !(!this.view || !this.state || this.isDestroyed) && (this.options.editorProps && this.view.setProps(this.options.editorProps), this.view.updateState(this.state));
  }
  /**
   * Update editable state of the editor.
   */
  setEditable(e, t = !0) {
    this.setOptions({ editable: e }), t && this.emit("update", { editor: this, transaction: this.state.tr });
  }
  /**
   * Returns whether the editor is editable.
   */
  get isEditable() {
    return this.options.editable && this.view && this.view.editable;
  }
  /**
   * Returns the editor state.
   */
  get state() {
    return this.view.state;
  }
  /**
   * Register a ProseMirror plugin.
   *
   * @param plugin A ProseMirror plugin
   * @param handlePlugins Control how to merge the plugin into the existing plugins.
   */
  registerPlugin(e, t) {
    const r = fh(t) ? t(e, [...this.state.plugins]) : [...this.state.plugins, e], s = this.state.reconfigure({ plugins: r });
    this.view.updateState(s);
  }
  /**
   * Unregister a ProseMirror plugin.
   *
   * @param nameOrPluginKey The plugins name
   */
  unregisterPlugin(e) {
    if (this.isDestroyed)
      return;
    const t = typeof e == "string" ? `${e}$` : e.key, r = this.state.reconfigure({
      // @ts-ignore
      plugins: this.state.plugins.filter((s) => !s.key.startsWith(t))
    });
    this.view.updateState(r);
  }
  /**
   * Creates an extension manager.
   */
  createExtensionManager() {
    var e, t;
    const s = [...this.options.enableCoreExtensions ? [
      ok,
      Lv.configure({
        blockSeparator: (t = (e = this.options.coreExtensionOptions) === null || e === void 0 ? void 0 : e.clipboardTextSerializer) === null || t === void 0 ? void 0 : t.blockSeparator
      }),
      ik,
      ak,
      lk,
      ck
    ] : [], ...this.options.extensions].filter((i) => ["extension", "node", "mark"].includes(i == null ? void 0 : i.type));
    this.extensionManager = new br(s, this);
  }
  /**
   * Creates an command manager.
   */
  createCommandManager() {
    this.commandManager = new po({
      editor: this
    });
  }
  /**
   * Creates a ProseMirror schema.
   */
  createSchema() {
    this.schema = this.extensionManager.schema;
  }
  /**
   * Creates a ProseMirror view.
   */
  createView() {
    let e;
    try {
      e = _a(this.options.content, this.schema, this.options.parseOptions, { errorOnInvalidContent: this.options.enableContentCheck });
    } catch (i) {
      if (!(i instanceof Error) || !["[tiptap error]: Invalid JSON content", "[tiptap error]: Invalid HTML content"].includes(i.message))
        throw i;
      this.emit("contentError", {
        editor: this,
        error: i,
        disableCollaboration: () => {
          this.options.extensions = this.options.extensions.filter((o) => o.name !== "collaboration"), this.createExtensionManager();
        }
      }), e = _a(this.options.content, this.schema, this.options.parseOptions, { errorOnInvalidContent: !1 });
    }
    const t = gh(e, this.options.autofocus);
    this.view = new Vb(this.options.element, {
      ...this.options.editorProps,
      dispatchTransaction: this.dispatchTransaction.bind(this),
      state: yr.create({
        doc: e,
        selection: t || void 0
      })
    });
    const r = this.state.reconfigure({
      plugins: this.extensionManager.plugins
    });
    this.view.updateState(r), this.createNodeViews(), this.prependClass();
    const s = this.view.dom;
    s.editor = this;
  }
  /**
   * Creates all node views.
   */
  createNodeViews() {
    this.view.isDestroyed || this.view.setProps({
      nodeViews: this.extensionManager.nodeViews
    });
  }
  /**
   * Prepend class name to element.
   */
  prependClass() {
    this.view.dom.className = `tiptap ${this.view.dom.className}`;
  }
  captureTransaction(e) {
    this.isCapturingTransaction = !0, e(), this.isCapturingTransaction = !1;
    const t = this.capturedTransaction;
    return this.capturedTransaction = null, t;
  }
  /**
   * The callback over which to send transactions (state updates) produced by the view.
   *
   * @param transaction An editor state transaction
   */
  dispatchTransaction(e) {
    if (this.view.isDestroyed)
      return;
    if (this.isCapturingTransaction) {
      if (!this.capturedTransaction) {
        this.capturedTransaction = e;
        return;
      }
      e.steps.forEach((o) => {
        var a;
        return (a = this.capturedTransaction) === null || a === void 0 ? void 0 : a.step(o);
      });
      return;
    }
    const t = this.state.apply(e), r = !this.state.selection.eq(t.selection);
    this.emit("beforeTransaction", {
      editor: this,
      transaction: e,
      nextState: t
    }), this.view.updateState(t), this.emit("transaction", {
      editor: this,
      transaction: e
    }), r && this.emit("selectionUpdate", {
      editor: this,
      transaction: e
    });
    const s = e.getMeta("focus"), i = e.getMeta("blur");
    s && this.emit("focus", {
      editor: this,
      event: s.event,
      transaction: e
    }), i && this.emit("blur", {
      editor: this,
      event: i.event,
      transaction: e
    }), !(!e.docChanged || e.getMeta("preventUpdate")) && this.emit("update", {
      editor: this,
      transaction: e
    });
  }
  /**
   * Get attributes of the currently selected node or mark.
   */
  getAttributes(e) {
    return vh(this.state, e);
  }
  isActive(e, t) {
    const r = typeof e == "string" ? e : null, s = typeof e == "string" ? t : e;
    return Px(this.state, r, s);
  }
  /**
   * Get the document as JSON.
   */
  getJSON() {
    return this.state.doc.toJSON();
  }
  /**
   * Get the document as HTML.
   */
  getHTML() {
    return _x(this.state.doc.content, this.schema);
  }
  /**
   * Get the document as text.
   */
  getText(e) {
    const { blockSeparator: t = `

`, textSerializers: r = {} } = e || {};
    return Hx(this.state.doc, {
      blockSeparator: t,
      textSerializers: {
        ...ph(this.schema),
        ...r
      }
    });
  }
  /**
   * Check if there is no content.
   */
  get isEmpty() {
    return xh(this.state.doc);
  }
  /**
   * Get the number of characters for the current document.
   *
   * @deprecated
   */
  getCharacterCount() {
    return console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.'), this.state.doc.content.size - 2;
  }
  /**
   * Destroy the editor.
   */
  destroy() {
    this.emit("destroy"), this.view && this.view.destroy(), this.removeAllListeners();
  }
  /**
   * Check if the editor is already destroyed.
   */
  get isDestroyed() {
    var e;
    return !(!((e = this.view) === null || e === void 0) && e.docView);
  }
  $node(e, t) {
    var r;
    return ((r = this.$doc) === null || r === void 0 ? void 0 : r.querySelector(e, t)) || null;
  }
  $nodes(e, t) {
    var r;
    return ((r = this.$doc) === null || r === void 0 ? void 0 : r.querySelectorAll(e, t)) || null;
  }
  $pos(e) {
    const t = this.state.doc.resolve(e);
    return new Dn(t, this);
  }
  get $doc() {
    return this.$pos(0);
  }
}
function er(n) {
  return new go({
    find: n.find,
    handler: ({ state: e, range: t, match: r }) => {
      const s = pe(n.getAttributes, void 0, r);
      if (s === !1 || s === null)
        return null;
      const { tr: i } = e, o = r[r.length - 1], a = r[0];
      if (o) {
        const l = a.search(/\S/), c = t.from + a.indexOf(o), d = c + o.length;
        if (xl(t.from, t.to, e.doc).filter((p) => p.mark.type.excluded.find((b) => b === n.type && b !== p.mark.type)).filter((p) => p.to > c).length)
          return null;
        d < t.to && i.delete(d, t.to), c > t.from && i.delete(t.from + l, c);
        const h = t.from + l + o.length;
        i.addMark(t.from + l, h, n.type.create(s || {})), i.removeStoredMark(n.type);
      }
    }
  });
}
function kh(n) {
  return new go({
    find: n.find,
    handler: ({ state: e, range: t, match: r }) => {
      const s = pe(n.getAttributes, void 0, r) || {}, { tr: i } = e, o = t.from;
      let a = t.to;
      const l = n.type.create(s);
      if (r[1]) {
        const c = r[0].lastIndexOf(r[1]);
        let d = o + c;
        d > a ? d = a : a = d + r[1].length;
        const f = r[0][r[0].length - 1];
        i.insertText(f, o + r[0].length - 1), i.replaceWith(d, a, l);
      } else if (r[0]) {
        const c = n.type.isInline ? o : o - 1;
        i.insert(c, n.type.create(s)).delete(i.mapping.map(o), i.mapping.map(a));
      }
      i.scrollIntoView();
    }
  });
}
function Ia(n) {
  return new go({
    find: n.find,
    handler: ({ state: e, range: t, match: r }) => {
      const s = e.doc.resolve(t.from), i = pe(n.getAttributes, void 0, r) || {};
      if (!s.node(-1).canReplaceWith(s.index(-1), s.indexAfter(-1), n.type))
        return null;
      e.tr.delete(t.from, t.to).setBlockType(t.from, t.from, n.type, i);
    }
  });
}
function ps(n) {
  return new go({
    find: n.find,
    handler: ({ state: e, range: t, match: r, chain: s }) => {
      const i = pe(n.getAttributes, void 0, r) || {}, o = e.tr.delete(t.from, t.to), l = o.doc.resolve(t.from).blockRange(), c = l && sl(l, n.type, i);
      if (!c)
        return null;
      if (o.wrap(l, c), n.keepMarks && n.editor) {
        const { selection: f, storedMarks: h } = e, { splittableMarks: p } = n.editor.extensionManager, m = h || f.$to.parentOffset && f.$from.marks();
        if (m) {
          const b = m.filter((v) => p.includes(v.type.name));
          o.ensureMarks(b);
        }
      }
      if (n.keepAttributes) {
        const f = n.type.name === "bulletList" || n.type.name === "orderedList" ? "listItem" : "taskList";
        s().updateAttributes(f, i).run();
      }
      const d = o.doc.resolve(t.from - 1).nodeBefore;
      d && d.type === n.type && On(o.doc, t.from - 1) && (!n.joinPredicate || n.joinPredicate(r, d)) && o.join(t.from - 1);
    }
  });
}
class ft {
  constructor(e = {}) {
    this.type = "mark", this.name = "mark", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...e
    }, this.name = this.config.name, e.defaultOptions && Object.keys(e.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = pe(Y(this, "addOptions", {
      name: this.name
    }))), this.storage = pe(Y(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(e = {}) {
    return new ft(e);
  }
  configure(e = {}) {
    const t = this.extend({
      ...this.config,
      addOptions: () => yo(this.options, e)
    });
    return t.name = this.name, t.parent = this.parent, t;
  }
  extend(e = {}) {
    const t = new ft(e);
    return t.parent = this, this.child = t, t.name = e.name ? e.name : t.parent.name, e.defaultOptions && Object.keys(e.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${t.name}".`), t.options = pe(Y(t, "addOptions", {
      name: t.name
    })), t.storage = pe(Y(t, "addStorage", {
      name: t.name,
      options: t.options
    })), t;
  }
  static handleExit({ editor: e, mark: t }) {
    const { tr: r } = e.state, s = e.state.selection.$from;
    if (s.pos === s.end()) {
      const o = s.marks();
      if (!!!o.find((c) => (c == null ? void 0 : c.type.name) === t.name))
        return !1;
      const l = o.find((c) => (c == null ? void 0 : c.type.name) === t.name);
      return l && r.removeStoredMark(l), r.insertText(" ", s.pos), e.view.dispatch(r), !0;
    }
    return !1;
  }
}
class qe {
  constructor(e = {}) {
    this.type = "node", this.name = "node", this.parent = null, this.child = null, this.config = {
      name: this.name,
      defaultOptions: {}
    }, this.config = {
      ...this.config,
      ...e
    }, this.name = this.config.name, e.defaultOptions && Object.keys(e.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`), this.options = this.config.defaultOptions, this.config.addOptions && (this.options = pe(Y(this, "addOptions", {
      name: this.name
    }))), this.storage = pe(Y(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(e = {}) {
    return new qe(e);
  }
  configure(e = {}) {
    const t = this.extend({
      ...this.config,
      addOptions: () => yo(this.options, e)
    });
    return t.name = this.name, t.parent = this.parent, t;
  }
  extend(e = {}) {
    const t = new qe(e);
    return t.parent = this, this.child = t, t.name = e.name ? e.name : t.parent.name, e.defaultOptions && Object.keys(e.defaultOptions).length > 0 && console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${t.name}".`), t.options = pe(Y(t, "addOptions", {
      name: t.name
    })), t.storage = pe(Y(t, "addStorage", {
      name: t.name,
      options: t.options
    })), t;
  }
}
function wn(n) {
  return new Tv({
    find: n.find,
    handler: ({ state: e, range: t, match: r, pasteEvent: s }) => {
      const i = pe(n.getAttributes, void 0, r, s);
      if (i === !1 || i === null)
        return null;
      const { tr: o } = e, a = r[r.length - 1], l = r[0];
      let c = t.to;
      if (a) {
        const d = l.search(/\S/), f = t.from + l.indexOf(a), h = f + a.length;
        if (xl(t.from, t.to, e.doc).filter((m) => m.mark.type.excluded.find((v) => v === n.type && v !== m.mark.type)).filter((m) => m.to > f).length)
          return null;
        h < t.to && o.delete(h, t.to), f > t.from && o.delete(t.from + d, f), c = t.from + d + a.length, o.addMark(t.from + d, c, n.type.create(i || {})), o.removeStoredMark(n.type);
      }
    }
  });
}
const hk = /(?:^|\s)(==(?!\s+==)((?:[^=]+))==(?!\s+==))$/, pk = /(?:^|\s)(==(?!\s+==)((?:[^=]+))==(?!\s+==))/g, mk = ft.create({
  name: "highlight",
  addOptions() {
    return {
      multicolor: !1,
      HTMLAttributes: {}
    };
  },
  addAttributes() {
    return this.options.multicolor ? {
      color: {
        default: null,
        parseHTML: (n) => n.getAttribute("data-color") || n.style.backgroundColor,
        renderHTML: (n) => n.color ? {
          "data-color": n.color,
          style: `background-color: ${n.color}; color: inherit`
        } : {}
      }
    } : {};
  },
  parseHTML() {
    return [
      {
        tag: "mark"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["mark", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setHighlight: (n) => ({ commands: e }) => e.setMark(this.name, n),
      toggleHighlight: (n) => ({ commands: e }) => e.toggleMark(this.name, n),
      unsetHighlight: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-h": () => this.editor.commands.toggleHighlight()
    };
  },
  addInputRules() {
    return [
      er({
        find: hk,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      wn({
        find: pk,
        type: this.type
      })
    ];
  }
}), gk = /(?:^|\s)(!\[(.+|:?)]\((\S+)(?:(?:\s+)["'](\S+)["'])?\))$/, yk = qe.create({
  name: "image",
  addOptions() {
    return {
      inline: !1,
      allowBase64: !1,
      HTMLAttributes: {}
    };
  },
  inline() {
    return this.options.inline;
  },
  group() {
    return this.options.inline ? "inline" : "block";
  },
  draggable: !0,
  addAttributes() {
    return {
      src: {
        default: null
      },
      alt: {
        default: null
      },
      title: {
        default: null
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: this.options.allowBase64 ? "img[src]" : 'img[src]:not([src^="data:"])'
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["img", Ne(this.options.HTMLAttributes, n)];
  },
  addCommands() {
    return {
      setImage: (n) => ({ commands: e }) => e.insertContent({
        type: this.name,
        attrs: n
      })
    };
  },
  addInputRules() {
    return [
      kh({
        find: gk,
        type: this.type,
        getAttributes: (n) => {
          const [, , e, t, r] = n;
          return { src: t, alt: e, title: r };
        }
      })
    ];
  }
}), bk = "aaa1rp3bb0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4vianca6w0s2x0a2z0ure5ba0by2idu3namex3narepublic11d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re3c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y3k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0cast4mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking4l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dabur3d1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t1u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d1tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0ardian6cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0els3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1ndle4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster6d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic4v1w1x1y1z2na0b1goya4me2tura4vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rton4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9dnavy5lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0a1b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp2w2ell3ia1ksha5oes2p0ping5uji3w3i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lvo3te1ing3o2yage5u2wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4finity6ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2", vk = "ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2", Hr = (n, e) => {
  for (const t in e)
    n[t] = e[t];
  return n;
}, Ra = "numeric", Da = "ascii", La = "alpha", Xs = "asciinumeric", Ws = "alphanumeric", Pa = "domain", wh = "emoji", xk = "scheme", kk = "slashscheme", ou = "whitespace";
function wk(n, e) {
  return n in e || (e[n] = []), e[n];
}
function Zn(n, e, t) {
  e[Ra] && (e[Xs] = !0, e[Ws] = !0), e[Da] && (e[Xs] = !0, e[La] = !0), e[Xs] && (e[Ws] = !0), e[La] && (e[Ws] = !0), e[Ws] && (e[Pa] = !0), e[wh] && (e[Pa] = !0);
  for (const r in e) {
    const s = wk(r, t);
    s.indexOf(n) < 0 && s.push(n);
  }
}
function Ek(n, e) {
  const t = {};
  for (const r in e)
    e[r].indexOf(n) >= 0 && (t[r] = !0);
  return t;
}
function ot(n) {
  n === void 0 && (n = null), this.j = {}, this.jr = [], this.jd = null, this.t = n;
}
ot.groups = {};
ot.prototype = {
  accepts() {
    return !!this.t;
  },
  /**
   * Follow an existing transition from the given input to the next state.
   * Does not mutate.
   * @param {string} input character or token type to transition on
   * @returns {?State<T>} the next state, if any
   */
  go(n) {
    const e = this, t = e.j[n];
    if (t)
      return t;
    for (let r = 0; r < e.jr.length; r++) {
      const s = e.jr[r][0], i = e.jr[r][1];
      if (i && s.test(n))
        return i;
    }
    return e.jd;
  },
  /**
   * Whether the state has a transition for the given input. Set the second
   * argument to true to only look for an exact match (and not a default or
   * regular-expression-based transition)
   * @param {string} input
   * @param {boolean} exactOnly
   */
  has(n, e) {
    return e === void 0 && (e = !1), e ? n in this.j : !!this.go(n);
  },
  /**
   * Short for "transition all"; create a transition from the array of items
   * in the given list to the same final resulting state.
   * @param {string | string[]} inputs Group of inputs to transition on
   * @param {Transition<T> | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   */
  ta(n, e, t, r) {
    for (let s = 0; s < n.length; s++)
      this.tt(n[s], e, t, r);
  },
  /**
   * Short for "take regexp transition"; defines a transition for this state
   * when it encounters a token which matches the given regular expression
   * @param {RegExp} regexp Regular expression transition (populate first)
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  tr(n, e, t, r) {
    r = r || ot.groups;
    let s;
    return e && e.j ? s = e : (s = new ot(e), t && r && Zn(e, t, r)), this.jr.push([n, s]), s;
  },
  /**
   * Short for "take transitions", will take as many sequential transitions as
   * the length of the given input and returns the
   * resulting final state.
   * @param {string | string[]} input
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  ts(n, e, t, r) {
    let s = this;
    const i = n.length;
    if (!i)
      return s;
    for (let o = 0; o < i - 1; o++)
      s = s.tt(n[o]);
    return s.tt(n[i - 1], e, t, r);
  },
  /**
   * Short for "take transition", this is a method for building/working with
   * state machines.
   *
   * If a state already exists for the given input, returns it.
   *
   * If a token is specified, that state will emit that token when reached by
   * the linkify engine.
   *
   * If no state exists, it will be initialized with some default transitions
   * that resemble existing default transitions.
   *
   * If a state is given for the second argument, that state will be
   * transitioned to on the given input regardless of what that input
   * previously did.
   *
   * Specify a token group flags to define groups that this token belongs to.
   * The token will be added to corresponding entires in the given groups
   * object.
   *
   * @param {string} input character, token type to transition on
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of groups
   * @returns {State<T>} taken after the given input
   */
  tt(n, e, t, r) {
    r = r || ot.groups;
    const s = this;
    if (e && e.j)
      return s.j[n] = e, e;
    const i = e;
    let o, a = s.go(n);
    if (a ? (o = new ot(), Hr(o.j, a.j), o.jr.push.apply(o.jr, a.jr), o.jd = a.jd, o.t = a.t) : o = new ot(), i) {
      if (r)
        if (o.t && typeof o.t == "string") {
          const l = Hr(Ek(o.t, r), t);
          Zn(i, l, r);
        } else t && Zn(i, t, r);
      o.t = i;
    }
    return s.j[n] = o, o;
  }
};
const fe = (n, e, t, r, s) => n.ta(e, t, r, s), bt = (n, e, t, r, s) => n.tr(e, t, r, s), au = (n, e, t, r, s) => n.ts(e, t, r, s), j = (n, e, t, r, s) => n.tt(e, t, r, s), Jt = "WORD", $a = "UWORD", ms = "LOCALHOST", Za = "TLD", Va = "UTLD", ei = "SCHEME", pr = "SLASH_SCHEME", kl = "NUM", Eh = "WS", wl = "NL", es = "OPENBRACE", ts = "CLOSEBRACE", vi = "OPENBRACKET", xi = "CLOSEBRACKET", ki = "OPENPAREN", wi = "CLOSEPAREN", Ei = "OPENANGLEBRACKET", Mi = "CLOSEANGLEBRACKET", Si = "FULLWIDTHLEFTPAREN", Ai = "FULLWIDTHRIGHTPAREN", Ci = "LEFTCORNERBRACKET", Oi = "RIGHTCORNERBRACKET", Ti = "LEFTWHITECORNERBRACKET", Ni = "RIGHTWHITECORNERBRACKET", _i = "FULLWIDTHLESSTHAN", Hi = "FULLWIDTHGREATERTHAN", Ii = "AMPERSAND", Ri = "APOSTROPHE", Di = "ASTERISK", cn = "AT", Li = "BACKSLASH", Pi = "BACKTICK", $i = "CARET", fn = "COLON", El = "COMMA", Zi = "DOLLAR", Rt = "DOT", Vi = "EQUALS", Ml = "EXCLAMATION", Dt = "HYPHEN", zi = "PERCENT", ji = "PIPE", Fi = "PLUS", Bi = "POUND", Wi = "QUERY", Sl = "QUOTE", Al = "SEMI", Lt = "SLASH", ns = "TILDE", Ui = "UNDERSCORE", Mh = "EMOJI", Ki = "SYM";
var Sh = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  WORD: Jt,
  UWORD: $a,
  LOCALHOST: ms,
  TLD: Za,
  UTLD: Va,
  SCHEME: ei,
  SLASH_SCHEME: pr,
  NUM: kl,
  WS: Eh,
  NL: wl,
  OPENBRACE: es,
  CLOSEBRACE: ts,
  OPENBRACKET: vi,
  CLOSEBRACKET: xi,
  OPENPAREN: ki,
  CLOSEPAREN: wi,
  OPENANGLEBRACKET: Ei,
  CLOSEANGLEBRACKET: Mi,
  FULLWIDTHLEFTPAREN: Si,
  FULLWIDTHRIGHTPAREN: Ai,
  LEFTCORNERBRACKET: Ci,
  RIGHTCORNERBRACKET: Oi,
  LEFTWHITECORNERBRACKET: Ti,
  RIGHTWHITECORNERBRACKET: Ni,
  FULLWIDTHLESSTHAN: _i,
  FULLWIDTHGREATERTHAN: Hi,
  AMPERSAND: Ii,
  APOSTROPHE: Ri,
  ASTERISK: Di,
  AT: cn,
  BACKSLASH: Li,
  BACKTICK: Pi,
  CARET: $i,
  COLON: fn,
  COMMA: El,
  DOLLAR: Zi,
  DOT: Rt,
  EQUALS: Vi,
  EXCLAMATION: Ml,
  HYPHEN: Dt,
  PERCENT: zi,
  PIPE: ji,
  PLUS: Fi,
  POUND: Bi,
  QUERY: Wi,
  QUOTE: Sl,
  SEMI: Al,
  SLASH: Lt,
  TILDE: ns,
  UNDERSCORE: Ui,
  EMOJI: Mh,
  SYM: Ki
});
const dr = /[a-z]/, Uo = new RegExp("\\p{L}", "u"), Ko = new RegExp("\\p{Emoji}", "u"), qo = /\d/, lu = /\s/, cu = `
`, Mk = "️", Sk = "‍";
let Us = null, Ks = null;
function Ak(n) {
  n === void 0 && (n = []);
  const e = {};
  ot.groups = e;
  const t = new ot();
  Us == null && (Us = du(bk)), Ks == null && (Ks = du(vk)), j(t, "'", Ri), j(t, "{", es), j(t, "}", ts), j(t, "[", vi), j(t, "]", xi), j(t, "(", ki), j(t, ")", wi), j(t, "<", Ei), j(t, ">", Mi), j(t, "（", Si), j(t, "）", Ai), j(t, "「", Ci), j(t, "」", Oi), j(t, "『", Ti), j(t, "』", Ni), j(t, "＜", _i), j(t, "＞", Hi), j(t, "&", Ii), j(t, "*", Di), j(t, "@", cn), j(t, "`", Pi), j(t, "^", $i), j(t, ":", fn), j(t, ",", El), j(t, "$", Zi), j(t, ".", Rt), j(t, "=", Vi), j(t, "!", Ml), j(t, "-", Dt), j(t, "%", zi), j(t, "|", ji), j(t, "+", Fi), j(t, "#", Bi), j(t, "?", Wi), j(t, '"', Sl), j(t, "/", Lt), j(t, ";", Al), j(t, "~", ns), j(t, "_", Ui), j(t, "\\", Li);
  const r = bt(t, qo, kl, {
    [Ra]: !0
  });
  bt(r, qo, r);
  const s = bt(t, dr, Jt, {
    [Da]: !0
  });
  bt(s, dr, s);
  const i = bt(t, Uo, $a, {
    [La]: !0
  });
  bt(i, dr), bt(i, Uo, i);
  const o = bt(t, lu, Eh, {
    [ou]: !0
  });
  j(t, cu, wl, {
    [ou]: !0
  }), j(o, cu), bt(o, lu, o);
  const a = bt(t, Ko, Mh, {
    [wh]: !0
  });
  bt(a, Ko, a), j(a, Mk, a);
  const l = j(a, Sk);
  bt(l, Ko, a);
  const c = [[dr, s]], d = [[dr, null], [Uo, i]];
  for (let f = 0; f < Us.length; f++)
    on(t, Us[f], Za, Jt, c);
  for (let f = 0; f < Ks.length; f++)
    on(t, Ks[f], Va, $a, d);
  Zn(Za, {
    tld: !0,
    ascii: !0
  }, e), Zn(Va, {
    utld: !0,
    alpha: !0
  }, e), on(t, "file", ei, Jt, c), on(t, "mailto", ei, Jt, c), on(t, "http", pr, Jt, c), on(t, "https", pr, Jt, c), on(t, "ftp", pr, Jt, c), on(t, "ftps", pr, Jt, c), Zn(ei, {
    scheme: !0,
    ascii: !0
  }, e), Zn(pr, {
    slashscheme: !0,
    ascii: !0
  }, e), n = n.sort((f, h) => f[0] > h[0] ? 1 : -1);
  for (let f = 0; f < n.length; f++) {
    const h = n[f][0], m = n[f][1] ? {
      [xk]: !0
    } : {
      [kk]: !0
    };
    h.indexOf("-") >= 0 ? m[Pa] = !0 : dr.test(h) ? qo.test(h) ? m[Xs] = !0 : m[Da] = !0 : m[Ra] = !0, au(t, h, h, m);
  }
  return au(t, "localhost", ms, {
    ascii: !0
  }), t.jd = new ot(Ki), {
    start: t,
    tokens: Hr({
      groups: e
    }, Sh)
  };
}
function Ck(n, e) {
  const t = Ok(e.replace(/[A-Z]/g, (a) => a.toLowerCase())), r = t.length, s = [];
  let i = 0, o = 0;
  for (; o < r; ) {
    let a = n, l = null, c = 0, d = null, f = -1, h = -1;
    for (; o < r && (l = a.go(t[o])); )
      a = l, a.accepts() ? (f = 0, h = 0, d = a) : f >= 0 && (f += t[o].length, h++), c += t[o].length, i += t[o].length, o++;
    i -= f, o -= h, c -= f, s.push({
      t: d.t,
      // token type/name
      v: e.slice(i - c, i),
      // string value
      s: i - c,
      // start index
      e: i
      // end index (excluding)
    });
  }
  return s;
}
function Ok(n) {
  const e = [], t = n.length;
  let r = 0;
  for (; r < t; ) {
    let s = n.charCodeAt(r), i, o = s < 55296 || s > 56319 || r + 1 === t || (i = n.charCodeAt(r + 1)) < 56320 || i > 57343 ? n[r] : n.slice(r, r + 2);
    e.push(o), r += o.length;
  }
  return e;
}
function on(n, e, t, r, s) {
  let i;
  const o = e.length;
  for (let a = 0; a < o - 1; a++) {
    const l = e[a];
    n.j[l] ? i = n.j[l] : (i = new ot(r), i.jr = s.slice(), n.j[l] = i), n = i;
  }
  return i = new ot(t), i.jr = s.slice(), n.j[e[o - 1]] = i, i;
}
function du(n) {
  const e = [], t = [];
  let r = 0, s = "0123456789";
  for (; r < n.length; ) {
    let i = 0;
    for (; s.indexOf(n[r + i]) >= 0; )
      i++;
    if (i > 0) {
      e.push(t.join(""));
      for (let o = parseInt(n.substring(r, r + i), 10); o > 0; o--)
        t.pop();
      r += i;
    } else
      t.push(n[r]), r++;
  }
  return e;
}
const gs = {
  defaultProtocol: "http",
  events: null,
  format: uu,
  formatHref: uu,
  nl2br: !1,
  tagName: "a",
  target: null,
  rel: null,
  validate: !0,
  truncate: 1 / 0,
  className: null,
  attributes: null,
  ignoreTags: [],
  render: null
};
function Cl(n, e) {
  e === void 0 && (e = null);
  let t = Hr({}, gs);
  n && (t = Hr(t, n instanceof Cl ? n.o : n));
  const r = t.ignoreTags, s = [];
  for (let i = 0; i < r.length; i++)
    s.push(r[i].toUpperCase());
  this.o = t, e && (this.defaultRender = e), this.ignoreTags = s;
}
Cl.prototype = {
  o: gs,
  /**
   * @type string[]
   */
  ignoreTags: [],
  /**
   * @param {IntermediateRepresentation} ir
   * @returns {any}
   */
  defaultRender(n) {
    return n;
  },
  /**
   * Returns true or false based on whether a token should be displayed as a
   * link based on the user options.
   * @param {MultiToken} token
   * @returns {boolean}
   */
  check(n) {
    return this.get("validate", n.toString(), n);
  },
  // Private methods
  /**
   * Resolve an option's value based on the value of the option and the given
   * params. If operator and token are specified and the target option is
   * callable, automatically calls the function with the given argument.
   * @template {keyof Opts} K
   * @param {K} key Name of option to use
   * @param {string} [operator] will be passed to the target option if it's a
   * function. If not specified, RAW function value gets returned
   * @param {MultiToken} [token] The token from linkify.tokenize
   * @returns {Opts[K] | any}
   */
  get(n, e, t) {
    const r = e != null;
    let s = this.o[n];
    return s && (typeof s == "object" ? (s = t.t in s ? s[t.t] : gs[n], typeof s == "function" && r && (s = s(e, t))) : typeof s == "function" && r && (s = s(e, t.t, t)), s);
  },
  /**
   * @template {keyof Opts} L
   * @param {L} key Name of options object to use
   * @param {string} [operator]
   * @param {MultiToken} [token]
   * @returns {Opts[L] | any}
   */
  getObj(n, e, t) {
    let r = this.o[n];
    return typeof r == "function" && e != null && (r = r(e, t.t, t)), r;
  },
  /**
   * Convert the given token to a rendered element that may be added to the
   * calling-interface's DOM
   * @param {MultiToken} token Token to render to an HTML element
   * @returns {any} Render result; e.g., HTML string, DOM element, React
   *   Component, etc.
   */
  render(n) {
    const e = n.render(this);
    return (this.get("render", null, n) || this.defaultRender)(e, n.t, n);
  }
};
function uu(n) {
  return n;
}
function Ah(n, e) {
  this.t = "token", this.v = n, this.tk = e;
}
Ah.prototype = {
  isLink: !1,
  /**
   * Return the string this token represents.
   * @return {string}
   */
  toString() {
    return this.v;
  },
  /**
   * What should the value for this token be in the `href` HTML attribute?
   * Returns the `.toString` value by default.
   * @param {string} [scheme]
   * @return {string}
  */
  toHref(n) {
    return this.toString();
  },
  /**
   * @param {Options} options Formatting options
   * @returns {string}
   */
  toFormattedString(n) {
    const e = this.toString(), t = n.get("truncate", e, this), r = n.get("format", e, this);
    return t && r.length > t ? r.substring(0, t) + "…" : r;
  },
  /**
   *
   * @param {Options} options
   * @returns {string}
   */
  toFormattedHref(n) {
    return n.get("formatHref", this.toHref(n.get("defaultProtocol")), this);
  },
  /**
   * The start index of this token in the original input string
   * @returns {number}
   */
  startIndex() {
    return this.tk[0].s;
  },
  /**
   * The end index of this token in the original input string (up to this
   * index but not including it)
   * @returns {number}
   */
  endIndex() {
    return this.tk[this.tk.length - 1].e;
  },
  /**
  	Returns an object  of relevant values for this token, which includes keys
  	* type - Kind of token ('url', 'email', etc.)
  	* value - Original text
  	* href - The value that should be added to the anchor tag's href
  		attribute
  		@method toObject
  	@param {string} [protocol] `'http'` by default
  */
  toObject(n) {
    return n === void 0 && (n = gs.defaultProtocol), {
      type: this.t,
      value: this.toString(),
      isLink: this.isLink,
      href: this.toHref(n),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   *
   * @param {Options} options Formatting option
   */
  toFormattedObject(n) {
    return {
      type: this.t,
      value: this.toFormattedString(n),
      isLink: this.isLink,
      href: this.toFormattedHref(n),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   * Whether this token should be rendered as a link according to the given options
   * @param {Options} options
   * @returns {boolean}
   */
  validate(n) {
    return n.get("validate", this.toString(), this);
  },
  /**
   * Return an object that represents how this link should be rendered.
   * @param {Options} options Formattinng options
   */
  render(n) {
    const e = this, t = this.toHref(n.get("defaultProtocol")), r = n.get("formatHref", t, this), s = n.get("tagName", t, e), i = this.toFormattedString(n), o = {}, a = n.get("className", t, e), l = n.get("target", t, e), c = n.get("rel", t, e), d = n.getObj("attributes", t, e), f = n.getObj("events", t, e);
    return o.href = r, a && (o.class = a), l && (o.target = l), c && (o.rel = c), d && Hr(o, d), {
      tagName: s,
      attributes: o,
      content: i,
      eventListeners: f
    };
  }
};
function xo(n, e) {
  class t extends Ah {
    constructor(s, i) {
      super(s, i), this.t = n;
    }
  }
  for (const r in e)
    t.prototype[r] = e[r];
  return t.t = n, t;
}
const fu = xo("email", {
  isLink: !0,
  toHref() {
    return "mailto:" + this.toString();
  }
}), hu = xo("text"), Tk = xo("nl"), qs = xo("url", {
  isLink: !0,
  /**
  	Lowercases relevant parts of the domain and adds the protocol if
  	required. Note that this will not escape unsafe HTML characters in the
  	URL.
  		@param {string} [scheme] default scheme (e.g., 'https')
  	@return {string} the full href
  */
  toHref(n) {
    return n === void 0 && (n = gs.defaultProtocol), this.hasProtocol() ? this.v : `${n}://${this.v}`;
  },
  /**
   * Check whether this URL token has a protocol
   * @return {boolean}
   */
  hasProtocol() {
    const n = this.tk;
    return n.length >= 2 && n[0].t !== ms && n[1].t === fn;
  }
}), vt = (n) => new ot(n);
function Nk(n) {
  let {
    groups: e
  } = n;
  const t = e.domain.concat([Ii, Di, cn, Li, Pi, $i, Zi, Vi, Dt, kl, zi, ji, Fi, Bi, Lt, Ki, ns, Ui]), r = [Ri, fn, El, Rt, Ml, Wi, Sl, Al, Ei, Mi, es, ts, xi, vi, ki, wi, Si, Ai, Ci, Oi, Ti, Ni, _i, Hi], s = [Ii, Ri, Di, Li, Pi, $i, Zi, Vi, Dt, es, ts, zi, ji, Fi, Bi, Wi, Lt, Ki, ns, Ui], i = vt(), o = j(i, ns);
  fe(o, s, o), fe(o, e.domain, o);
  const a = vt(), l = vt(), c = vt();
  fe(i, e.domain, a), fe(i, e.scheme, l), fe(i, e.slashscheme, c), fe(a, s, o), fe(a, e.domain, a);
  const d = j(a, cn);
  j(o, cn, d), j(l, cn, d), j(c, cn, d);
  const f = j(o, Rt);
  fe(f, s, o), fe(f, e.domain, o);
  const h = vt();
  fe(d, e.domain, h), fe(h, e.domain, h);
  const p = j(h, Rt);
  fe(p, e.domain, h);
  const m = vt(fu);
  fe(p, e.tld, m), fe(p, e.utld, m), j(d, ms, m);
  const b = j(h, Dt);
  fe(b, e.domain, h), fe(m, e.domain, h), j(m, Rt, p), j(m, Dt, b);
  const v = j(m, fn);
  fe(v, e.numeric, fu);
  const w = j(a, Dt), H = j(a, Rt);
  fe(w, e.domain, a), fe(H, s, o), fe(H, e.domain, a);
  const z = vt(qs);
  fe(H, e.tld, z), fe(H, e.utld, z), fe(z, e.domain, a), fe(z, s, o), j(z, Rt, H), j(z, Dt, w), j(z, cn, d);
  const F = j(z, fn), q = vt(qs);
  fe(F, e.numeric, q);
  const A = vt(qs), $ = vt();
  fe(A, t, A), fe(A, r, $), fe($, t, A), fe($, r, $), j(z, Lt, A), j(q, Lt, A);
  const x = j(l, fn), y = j(c, fn), E = j(y, Lt), O = j(E, Lt);
  fe(l, e.domain, a), j(l, Rt, H), j(l, Dt, w), fe(c, e.domain, a), j(c, Rt, H), j(c, Dt, w), fe(x, e.domain, A), j(x, Lt, A), fe(O, e.domain, A), fe(O, t, A), j(O, Lt, A);
  const _ = [
    [es, ts],
    // {}
    [vi, xi],
    // []
    [ki, wi],
    // ()
    [Ei, Mi],
    // <>
    [Si, Ai],
    // （）
    [Ci, Oi],
    // 「」
    [Ti, Ni],
    // 『』
    [_i, Hi]
    // ＜＞
  ];
  for (let Q = 0; Q < _.length; Q++) {
    const [R, D] = _[Q], C = j(A, R);
    j($, R, C), j(C, D, A);
    const M = vt(qs);
    fe(C, t, M);
    const N = vt();
    fe(C, r), fe(M, t, M), fe(M, r, N), fe(N, t, M), fe(N, r, N), j(M, D, A), j(N, D, A);
  }
  return j(i, ms, z), j(i, wl, Tk), {
    start: i,
    tokens: Sh
  };
}
function _k(n, e, t) {
  let r = t.length, s = 0, i = [], o = [];
  for (; s < r; ) {
    let a = n, l = null, c = null, d = 0, f = null, h = -1;
    for (; s < r && !(l = a.go(t[s].t)); )
      o.push(t[s++]);
    for (; s < r && (c = l || a.go(t[s].t)); )
      l = null, a = c, a.accepts() ? (h = 0, f = a) : h >= 0 && h++, s++, d++;
    if (h < 0)
      s -= d, s < r && (o.push(t[s]), s++);
    else {
      o.length > 0 && (i.push(Jo(hu, e, o)), o = []), s -= h, d -= h;
      const p = f.t, m = t.slice(s - d, s);
      i.push(Jo(p, e, m));
    }
  }
  return o.length > 0 && i.push(Jo(hu, e, o)), i;
}
function Jo(n, e, t) {
  const r = t[0].s, s = t[t.length - 1].e, i = e.slice(r, s);
  return new n(i, t);
}
const Hk = typeof console < "u" && console && console.warn || (() => {
}), Ik = "until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.", He = {
  scanner: null,
  parser: null,
  tokenQueue: [],
  pluginQueue: [],
  customSchemes: [],
  initialized: !1
};
function Rk() {
  ot.groups = {}, He.scanner = null, He.parser = null, He.tokenQueue = [], He.pluginQueue = [], He.customSchemes = [], He.initialized = !1;
}
function pu(n, e) {
  if (e === void 0 && (e = !1), He.initialized && Hk(`linkifyjs: already initialized - will not register custom scheme "${n}" ${Ik}`), !/^[0-9a-z]+(-[0-9a-z]+)*$/.test(n))
    throw new Error(`linkifyjs: incorrect scheme format.
1. Must only contain digits, lowercase ASCII letters or "-"
2. Cannot start or end with "-"
3. "-" cannot repeat`);
  He.customSchemes.push([n, e]);
}
function Dk() {
  He.scanner = Ak(He.customSchemes);
  for (let n = 0; n < He.tokenQueue.length; n++)
    He.tokenQueue[n][1]({
      scanner: He.scanner
    });
  He.parser = Nk(He.scanner.tokens);
  for (let n = 0; n < He.pluginQueue.length; n++)
    He.pluginQueue[n][1]({
      scanner: He.scanner,
      parser: He.parser
    });
  He.initialized = !0;
}
function Ch(n) {
  return He.initialized || Dk(), _k(He.parser.start, n, Ck(He.scanner.start, n));
}
function Oh(n, e, t) {
  if (e === void 0 && (e = null), t === void 0 && (t = null), e && typeof e == "object") {
    if (t)
      throw Error(`linkifyjs: Invalid link type ${e}; must be a string`);
    t = e, e = null;
  }
  const r = new Cl(t), s = Ch(n), i = [];
  for (let o = 0; o < s.length; o++) {
    const a = s[o];
    a.isLink && (!e || a.t === e) && r.check(a) && i.push(a.toFormattedObject(r));
  }
  return i;
}
function Lk(n) {
  return n.length === 1 ? n[0].isLink : n.length === 3 && n[1].isLink ? ["()", "[]"].includes(n[0].value + n[2].value) : !1;
}
function Pk(n) {
  return new it({
    key: new Ht("autolink"),
    appendTransaction: (e, t, r) => {
      const s = e.some((c) => c.docChanged) && !t.doc.eq(r.doc), i = e.some((c) => c.getMeta("preventAutolink"));
      if (!s || i)
        return;
      const { tr: o } = r, a = Cx(t.doc, [...e]);
      if (Lx(a).forEach(({ newRange: c }) => {
        const d = Tx(r.doc, c, (p) => p.isTextblock);
        let f, h;
        if (d.length > 1 ? (f = d[0], h = r.doc.textBetween(f.pos, f.pos + f.node.nodeSize, void 0, " ")) : d.length && r.doc.textBetween(c.from, c.to, " ", " ").endsWith(" ") && (f = d[0], h = r.doc.textBetween(f.pos, c.to, void 0, " ")), f && h) {
          const p = h.split(" ").filter((w) => w !== "");
          if (p.length <= 0)
            return !1;
          const m = p[p.length - 1], b = f.pos + h.lastIndexOf(m);
          if (!m)
            return !1;
          const v = Ch(m).map((w) => w.toObject(n.defaultProtocol));
          if (!Lk(v))
            return !1;
          v.filter((w) => w.isLink).map((w) => ({
            ...w,
            from: b + w.start + 1,
            to: b + w.end + 1
          })).filter((w) => r.schema.marks.code ? !r.doc.rangeHasMark(w.from, w.to, r.schema.marks.code) : !0).filter((w) => n.validate(w.value)).forEach((w) => {
            xl(w.from, w.to, r.doc).some((H) => H.mark.type === n.type) || o.addMark(w.from, w.to, n.type.create({
              href: w.href
            }));
          });
        }
      }), !!o.steps.length)
        return o;
    }
  });
}
function $k(n) {
  return new it({
    key: new Ht("handleClickLink"),
    props: {
      handleClick: (e, t, r) => {
        var s, i;
        if (r.button !== 0 || !e.editable)
          return !1;
        let o = r.target;
        const a = [];
        for (; o.nodeName !== "DIV"; )
          a.push(o), o = o.parentNode;
        if (!a.find((h) => h.nodeName === "A"))
          return !1;
        const l = vh(e.state, n.type.name), c = r.target, d = (s = c == null ? void 0 : c.href) !== null && s !== void 0 ? s : l.href, f = (i = c == null ? void 0 : c.target) !== null && i !== void 0 ? i : l.target;
        return c && d ? (window.open(d, f), !0) : !1;
      }
    }
  });
}
function Zk(n) {
  return new it({
    key: new Ht("handlePasteLink"),
    props: {
      handlePaste: (e, t, r) => {
        const { state: s } = e, { selection: i } = s, { empty: o } = i;
        if (o)
          return !1;
        let a = "";
        r.content.forEach((c) => {
          a += c.textContent;
        });
        const l = Oh(a, { defaultProtocol: n.defaultProtocol }).find((c) => c.isLink && c.value === a);
        return !a || !l ? !1 : (n.editor.commands.setMark(n.type, {
          href: l.href
        }), !0);
      }
    }
  });
}
const Vk = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205F\u3000]/g;
function mu(n, e) {
  const t = ["http", "https", "ftp", "ftps", "mailto", "tel", "callto", "sms", "cid", "xmpp"];
  return e && e.forEach((r) => {
    const s = typeof r == "string" ? r : r.scheme;
    s && t.push(s);
  }), !n || n.replace(Vk, "").match(new RegExp(`^(?:(?:${t.join("|")}):|[^a-z]|[a-z+.-]+(?:[^a-z+.-:]|$))`, "i"));
}
const zk = ft.create({
  name: "link",
  priority: 1e3,
  keepOnSplit: !1,
  exitable: !0,
  onCreate() {
    this.options.protocols.forEach((n) => {
      if (typeof n == "string") {
        pu(n);
        return;
      }
      pu(n.scheme, n.optionalSlashes);
    });
  },
  onDestroy() {
    Rk();
  },
  inclusive() {
    return this.options.autolink;
  },
  addOptions() {
    return {
      openOnClick: !0,
      linkOnPaste: !0,
      autolink: !0,
      protocols: [],
      defaultProtocol: "http",
      HTMLAttributes: {
        target: "_blank",
        rel: "noopener noreferrer nofollow",
        class: null
      },
      validate: (n) => !!n
    };
  },
  addAttributes() {
    return {
      href: {
        default: null,
        parseHTML(n) {
          return n.getAttribute("href");
        }
      },
      target: {
        default: this.options.HTMLAttributes.target
      },
      rel: {
        default: this.options.HTMLAttributes.rel
      },
      class: {
        default: this.options.HTMLAttributes.class
      }
    };
  },
  parseHTML() {
    return [{
      tag: "a[href]",
      getAttrs: (n) => {
        const e = n.getAttribute("href");
        return !e || !mu(e, this.options.protocols) ? !1 : null;
      }
    }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return mu(n.href, this.options.protocols) ? ["a", Ne(this.options.HTMLAttributes, n), 0] : ["a", Ne(this.options.HTMLAttributes, { ...n, href: "" }), 0];
  },
  addCommands() {
    return {
      setLink: (n) => ({ chain: e }) => e().setMark(this.name, n).setMeta("preventAutolink", !0).run(),
      toggleLink: (n) => ({ chain: e }) => e().toggleMark(this.name, n, { extendEmptyMarkRange: !0 }).setMeta("preventAutolink", !0).run(),
      unsetLink: () => ({ chain: n }) => n().unsetMark(this.name, { extendEmptyMarkRange: !0 }).setMeta("preventAutolink", !0).run()
    };
  },
  addPasteRules() {
    return [
      wn({
        find: (n) => {
          const e = [];
          if (n) {
            const { validate: t } = this.options, r = Oh(n).filter((s) => s.isLink && t(s.value));
            r.length && r.forEach((s) => e.push({
              text: s.value,
              data: {
                href: s.href
              },
              index: s.start
            }));
          }
          return e;
        },
        type: this.type,
        getAttributes: (n) => {
          var e;
          return {
            href: (e = n.data) === null || e === void 0 ? void 0 : e.href
          };
        }
      })
    ];
  },
  addProseMirrorPlugins() {
    const n = [];
    return this.options.autolink && n.push(Pk({
      type: this.type,
      defaultProtocol: this.options.defaultProtocol,
      validate: this.options.validate
    })), this.options.openOnClick === !0 && n.push($k({
      type: this.type
    })), this.options.linkOnPaste && n.push(Zk({
      editor: this.editor,
      defaultProtocol: this.options.defaultProtocol,
      type: this.type
    })), n;
  }
}), jk = lt.create({
  name: "textAlign",
  addOptions() {
    return {
      types: [],
      alignments: ["left", "center", "right", "justify"],
      defaultAlignment: "left"
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          textAlign: {
            default: this.options.defaultAlignment,
            parseHTML: (n) => {
              const e = n.style.textAlign || this.options.defaultAlignment;
              return this.options.alignments.includes(e) ? e : this.options.defaultAlignment;
            },
            renderHTML: (n) => n.textAlign === this.options.defaultAlignment ? {} : { style: `text-align: ${n.textAlign}` }
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setTextAlign: (n) => ({ commands: e }) => this.options.alignments.includes(n) ? this.options.types.map((t) => e.updateAttributes(t, { textAlign: n })).every((t) => t) : !1,
      unsetTextAlign: () => ({ commands: n }) => this.options.types.map((e) => n.resetAttributes(e, "textAlign")).every((e) => e)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-l": () => this.editor.commands.setTextAlign("left"),
      "Mod-Shift-e": () => this.editor.commands.setTextAlign("center"),
      "Mod-Shift-r": () => this.editor.commands.setTextAlign("right"),
      "Mod-Shift-j": () => this.editor.commands.setTextAlign("justify")
    };
  }
}), Fk = ft.create({
  name: "underline",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "u"
      },
      {
        style: "text-decoration",
        consuming: !1,
        getAttrs: (n) => n.includes("underline") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["u", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setUnderline: () => ({ commands: n }) => n.setMark(this.name),
      toggleUnderline: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetUnderline: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-u": () => this.editor.commands.toggleUnderline(),
      "Mod-U": () => this.editor.commands.toggleUnderline()
    };
  }
});
var za = { exports: {} }, Go = {};
/**
 * @license React
 * use-sync-external-store-shim.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var gu;
function Bk() {
  if (gu) return Go;
  gu = 1;
  var n = u;
  function e(f, h) {
    return f === h && (f !== 0 || 1 / f === 1 / h) || f !== f && h !== h;
  }
  var t = typeof Object.is == "function" ? Object.is : e, r = n.useState, s = n.useEffect, i = n.useLayoutEffect, o = n.useDebugValue;
  function a(f, h) {
    var p = h(), m = r({ inst: { value: p, getSnapshot: h } }), b = m[0].inst, v = m[1];
    return i(function() {
      b.value = p, b.getSnapshot = h, l(b) && v({ inst: b });
    }, [f, p, h]), s(function() {
      return l(b) && v({ inst: b }), f(function() {
        l(b) && v({ inst: b });
      });
    }, [f]), o(p), p;
  }
  function l(f) {
    var h = f.getSnapshot;
    f = f.value;
    try {
      var p = h();
      return !t(f, p);
    } catch {
      return !0;
    }
  }
  function c(f, h) {
    return h();
  }
  var d = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? c : a;
  return Go.useSyncExternalStore = n.useSyncExternalStore !== void 0 ? n.useSyncExternalStore : d, Go;
}
var Yo = {};
/**
 * @license React
 * use-sync-external-store-shim.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var yu;
function Wk() {
  return yu || (yu = 1, process.env.NODE_ENV !== "production" && function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var n = u, e = n.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function t(z) {
      {
        for (var F = arguments.length, q = new Array(F > 1 ? F - 1 : 0), A = 1; A < F; A++)
          q[A - 1] = arguments[A];
        r("error", z, q);
      }
    }
    function r(z, F, q) {
      {
        var A = e.ReactDebugCurrentFrame, $ = A.getStackAddendum();
        $ !== "" && (F += "%s", q = q.concat([$]));
        var x = q.map(function(y) {
          return String(y);
        });
        x.unshift("Warning: " + F), Function.prototype.apply.call(console[z], console, x);
      }
    }
    function s(z, F) {
      return z === F && (z !== 0 || 1 / z === 1 / F) || z !== z && F !== F;
    }
    var i = typeof Object.is == "function" ? Object.is : s, o = n.useState, a = n.useEffect, l = n.useLayoutEffect, c = n.useDebugValue, d = !1, f = !1;
    function h(z, F, q) {
      d || n.startTransition !== void 0 && (d = !0, t("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release."));
      var A = F();
      if (!f) {
        var $ = F();
        i(A, $) || (t("The result of getSnapshot should be cached to avoid an infinite loop"), f = !0);
      }
      var x = o({
        inst: {
          value: A,
          getSnapshot: F
        }
      }), y = x[0].inst, E = x[1];
      return l(function() {
        y.value = A, y.getSnapshot = F, p(y) && E({
          inst: y
        });
      }, [z, A, F]), a(function() {
        p(y) && E({
          inst: y
        });
        var O = function() {
          p(y) && E({
            inst: y
          });
        };
        return z(O);
      }, [z]), c(A), A;
    }
    function p(z) {
      var F = z.getSnapshot, q = z.value;
      try {
        var A = F();
        return !i(q, A);
      } catch {
        return !0;
      }
    }
    function m(z, F, q) {
      return F();
    }
    var b = typeof window < "u" && typeof window.document < "u" && typeof window.document.createElement < "u", v = !b, w = v ? m : h, H = n.useSyncExternalStore !== void 0 ? n.useSyncExternalStore : w;
    Yo.useSyncExternalStore = H, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }()), Yo;
}
process.env.NODE_ENV === "production" ? za.exports = Bk() : za.exports = Wk();
var ko = za.exports;
const Uk = (...n) => (e) => {
  n.forEach((t) => {
    typeof t == "function" ? t(e) : t && (t.current = e);
  });
}, Kk = ({ contentComponent: n }) => {
  const e = ko.useSyncExternalStore(n.subscribe, n.getSnapshot, n.getServerSnapshot);
  return u.createElement(u.Fragment, null, Object.values(e));
};
function qk() {
  const n = /* @__PURE__ */ new Set();
  let e = {};
  return {
    /**
     * Subscribe to the editor instance's changes.
     */
    subscribe(t) {
      return n.add(t), () => {
        n.delete(t);
      };
    },
    getSnapshot() {
      return e;
    },
    getServerSnapshot() {
      return e;
    },
    /**
     * Adds a new NodeView Renderer to the editor.
     */
    setRenderer(t, r) {
      e = {
        ...e,
        [t]: sp.createPortal(r.reactElement, r.element, t)
      }, n.forEach((s) => s());
    },
    /**
     * Removes a NodeView Renderer from the editor.
     */
    removeRenderer(t) {
      const r = { ...e };
      delete r[t], e = r, n.forEach((s) => s());
    }
  };
}
class Jk extends u.Component {
  constructor(e) {
    var t;
    super(e), this.editorContentRef = u.createRef(), this.initialized = !1, this.state = {
      hasContentComponentInitialized: !!(!((t = e.editor) === null || t === void 0) && t.contentComponent)
    };
  }
  componentDidMount() {
    this.init();
  }
  componentDidUpdate() {
    this.init();
  }
  init() {
    const e = this.props.editor;
    if (e && !e.isDestroyed && e.options.element) {
      if (e.contentComponent)
        return;
      const t = this.editorContentRef.current;
      t.append(...e.options.element.childNodes), e.setOptions({
        element: t
      }), e.contentComponent = qk(), this.state.hasContentComponentInitialized || (this.unsubscribeToContentComponent = e.contentComponent.subscribe(() => {
        this.setState((r) => r.hasContentComponentInitialized ? r : {
          hasContentComponentInitialized: !0
        }), this.unsubscribeToContentComponent && this.unsubscribeToContentComponent();
      })), e.createNodeViews(), this.initialized = !0;
    }
  }
  componentWillUnmount() {
    const e = this.props.editor;
    if (!e || (this.initialized = !1, e.isDestroyed || e.view.setProps({
      nodeViews: {}
    }), this.unsubscribeToContentComponent && this.unsubscribeToContentComponent(), e.contentComponent = null, !e.options.element.firstChild))
      return;
    const t = document.createElement("div");
    t.append(...e.options.element.childNodes), e.setOptions({
      element: t
    });
  }
  render() {
    const { editor: e, innerRef: t, ...r } = this.props;
    return u.createElement(
      u.Fragment,
      null,
      u.createElement("div", { ref: Uk(t, this.editorContentRef), ...r }),
      (e == null ? void 0 : e.contentComponent) && u.createElement(Kk, { contentComponent: e.contentComponent })
    );
  }
}
const Gk = S((n, e) => {
  const t = u.useMemo(() => Math.floor(Math.random() * 4294967295).toString(), [n.editor]);
  return u.createElement(Jk, {
    key: t,
    innerRef: e,
    ...n
  });
}), Yk = u.memo(Gk);
var ja = { exports: {} }, Qo = {};
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var bu;
function Qk() {
  if (bu) return Qo;
  bu = 1;
  var n = u, e = ko;
  function t(c, d) {
    return c === d && (c !== 0 || 1 / c === 1 / d) || c !== c && d !== d;
  }
  var r = typeof Object.is == "function" ? Object.is : t, s = e.useSyncExternalStore, i = n.useRef, o = n.useEffect, a = n.useMemo, l = n.useDebugValue;
  return Qo.useSyncExternalStoreWithSelector = function(c, d, f, h, p) {
    var m = i(null);
    if (m.current === null) {
      var b = { hasValue: !1, value: null };
      m.current = b;
    } else b = m.current;
    m = a(function() {
      function w(A) {
        if (!H) {
          if (H = !0, z = A, A = h(A), p !== void 0 && b.hasValue) {
            var $ = b.value;
            if (p($, A)) return F = $;
          }
          return F = A;
        }
        if ($ = F, r(z, A)) return $;
        var x = h(A);
        return p !== void 0 && p($, x) ? $ : (z = A, F = x);
      }
      var H = !1, z, F, q = f === void 0 ? null : f;
      return [function() {
        return w(d());
      }, q === null ? void 0 : function() {
        return w(q());
      }];
    }, [d, f, h, p]);
    var v = s(c, m[0], m[1]);
    return o(function() {
      b.hasValue = !0, b.value = v;
    }, [v]), l(v), v;
  }, Qo;
}
var Xo = {};
/**
 * @license React
 * use-sync-external-store-shim/with-selector.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var vu;
function Xk() {
  return vu || (vu = 1, process.env.NODE_ENV !== "production" && function() {
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    var n = u, e = ko;
    function t(d, f) {
      return d === f && (d !== 0 || 1 / d === 1 / f) || d !== d && f !== f;
    }
    var r = typeof Object.is == "function" ? Object.is : t, s = e.useSyncExternalStore, i = n.useRef, o = n.useEffect, a = n.useMemo, l = n.useDebugValue;
    function c(d, f, h, p, m) {
      var b = i(null), v;
      b.current === null ? (v = {
        hasValue: !1,
        value: null
      }, b.current = v) : v = b.current;
      var w = a(function() {
        var q = !1, A, $, x = function(_) {
          if (!q) {
            q = !0, A = _;
            var Q = p(_);
            if (m !== void 0 && v.hasValue) {
              var R = v.value;
              if (m(R, Q))
                return $ = R, R;
            }
            return $ = Q, Q;
          }
          var D = A, C = $;
          if (r(D, _))
            return C;
          var M = p(_);
          return m !== void 0 && m(C, M) ? C : (A = _, $ = M, M);
        }, y = h === void 0 ? null : h, E = function() {
          return x(f());
        }, O = y === null ? void 0 : function() {
          return x(y());
        };
        return [E, O];
      }, [f, h, p, m]), H = w[0], z = w[1], F = s(d, H, z);
      return o(function() {
        v.hasValue = !0, v.value = F;
      }, [F]), l(F), F;
    }
    Xo.useSyncExternalStoreWithSelector = c, typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop == "function" && __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
  }()), Xo;
}
process.env.NODE_ENV === "production" ? ja.exports = Qk() : ja.exports = Xk();
var ew = ja.exports;
class tw {
  constructor(e) {
    this.transactionNumber = 0, this.lastTransactionNumber = 0, this.subscribers = /* @__PURE__ */ new Set(), this.editor = e, this.lastSnapshot = { editor: e, transactionNumber: 0 }, this.getSnapshot = this.getSnapshot.bind(this), this.getServerSnapshot = this.getServerSnapshot.bind(this), this.watch = this.watch.bind(this), this.subscribe = this.subscribe.bind(this);
  }
  /**
   * Get the current editor instance.
   */
  getSnapshot() {
    return this.transactionNumber === this.lastTransactionNumber ? this.lastSnapshot : (this.lastTransactionNumber = this.transactionNumber, this.lastSnapshot = { editor: this.editor, transactionNumber: this.transactionNumber }, this.lastSnapshot);
  }
  /**
   * Always disable the editor on the server-side.
   */
  getServerSnapshot() {
    return { editor: null, transactionNumber: 0 };
  }
  /**
   * Subscribe to the editor instance's changes.
   */
  subscribe(e) {
    return this.subscribers.add(e), () => {
      this.subscribers.delete(e);
    };
  }
  /**
   * Watch the editor instance for changes.
   */
  watch(e) {
    if (this.editor = e, this.editor) {
      const t = () => {
        this.transactionNumber += 1, this.subscribers.forEach((s) => s());
      }, r = this.editor;
      return r.on("transaction", t), () => {
        r.off("transaction", t);
      };
    }
  }
}
function nw(n) {
  const [e] = Hs(() => new tw(n.editor)), t = ew.useSyncExternalStoreWithSelector(e.subscribe, e.getSnapshot, e.getServerSnapshot, n.selector, n.equalityFn);
  return rs(() => e.watch(n.editor), [n.editor, e]), Nu(t), t;
}
const xu = process.env.NODE_ENV !== "production", Fa = typeof window > "u", rw = Fa || !!(typeof window < "u" && window.next);
class sw {
  constructor(e) {
    this.editor = null, this.subscriptions = /* @__PURE__ */ new Set(), this.isComponentMounted = !1, this.previousDeps = null, this.instanceId = "", this.options = e, this.subscriptions = /* @__PURE__ */ new Set(), this.setEditor(this.getInitialEditor()), this.scheduleDestroy(), this.getEditor = this.getEditor.bind(this), this.getServerSnapshot = this.getServerSnapshot.bind(this), this.subscribe = this.subscribe.bind(this), this.refreshEditorInstance = this.refreshEditorInstance.bind(this), this.scheduleDestroy = this.scheduleDestroy.bind(this), this.onRender = this.onRender.bind(this), this.createEditor = this.createEditor.bind(this);
  }
  setEditor(e) {
    this.editor = e, this.instanceId = Math.random().toString(36).slice(2, 9), this.subscriptions.forEach((t) => t());
  }
  getInitialEditor() {
    if (this.options.current.immediatelyRender === void 0)
      return Fa || rw ? (xu && console.warn("Tiptap Error: SSR has been detected, please set `immediatelyRender` explicitly to `false` to avoid hydration mismatches."), null) : this.createEditor();
    if (this.options.current.immediatelyRender && Fa && xu)
      throw new Error("Tiptap Error: SSR has been detected, and `immediatelyRender` has been set to `true` this is an unsupported configuration that may result in errors, explicitly set `immediatelyRender` to `false` to avoid hydration mismatches.");
    return this.options.current.immediatelyRender ? this.createEditor() : null;
  }
  /**
   * Create a new editor instance. And attach event listeners.
   */
  createEditor() {
    const e = {
      ...this.options.current,
      // Always call the most recent version of the callback function by default
      onBeforeCreate: (...r) => {
        var s, i;
        return (i = (s = this.options.current).onBeforeCreate) === null || i === void 0 ? void 0 : i.call(s, ...r);
      },
      onBlur: (...r) => {
        var s, i;
        return (i = (s = this.options.current).onBlur) === null || i === void 0 ? void 0 : i.call(s, ...r);
      },
      onCreate: (...r) => {
        var s, i;
        return (i = (s = this.options.current).onCreate) === null || i === void 0 ? void 0 : i.call(s, ...r);
      },
      onDestroy: (...r) => {
        var s, i;
        return (i = (s = this.options.current).onDestroy) === null || i === void 0 ? void 0 : i.call(s, ...r);
      },
      onFocus: (...r) => {
        var s, i;
        return (i = (s = this.options.current).onFocus) === null || i === void 0 ? void 0 : i.call(s, ...r);
      },
      onSelectionUpdate: (...r) => {
        var s, i;
        return (i = (s = this.options.current).onSelectionUpdate) === null || i === void 0 ? void 0 : i.call(s, ...r);
      },
      onTransaction: (...r) => {
        var s, i;
        return (i = (s = this.options.current).onTransaction) === null || i === void 0 ? void 0 : i.call(s, ...r);
      },
      onUpdate: (...r) => {
        var s, i;
        return (i = (s = this.options.current).onUpdate) === null || i === void 0 ? void 0 : i.call(s, ...r);
      },
      onContentError: (...r) => {
        var s, i;
        return (i = (s = this.options.current).onContentError) === null || i === void 0 ? void 0 : i.call(s, ...r);
      }
    };
    return new fk(e);
  }
  /**
   * Get the current editor instance.
   */
  getEditor() {
    return this.editor;
  }
  /**
   * Always disable the editor on the server-side.
   */
  getServerSnapshot() {
    return null;
  }
  /**
   * Subscribe to the editor instance's changes.
   */
  subscribe(e) {
    return this.subscriptions.add(e), () => {
      this.subscriptions.delete(e);
    };
  }
  /**
   * On each render, we will create, update, or destroy the editor instance.
   * @param deps The dependencies to watch for changes
   * @returns A cleanup function
   */
  onRender(e) {
    return () => (this.isComponentMounted = !0, clearTimeout(this.scheduledDestructionTimeout), this.editor && !this.editor.isDestroyed && e.length === 0 ? this.editor.setOptions(this.options.current) : this.refreshEditorInstance(e), () => {
      this.isComponentMounted = !1, this.scheduleDestroy();
    });
  }
  /**
   * Recreate the editor instance if the dependencies have changed.
   */
  refreshEditorInstance(e) {
    if (this.editor && !this.editor.isDestroyed) {
      if (this.previousDeps === null) {
        this.previousDeps = e;
        return;
      }
      if (this.previousDeps.length === e.length && this.previousDeps.every((r, s) => r === e[s]))
        return;
    }
    this.editor && !this.editor.isDestroyed && this.editor.destroy(), this.setEditor(this.createEditor()), this.previousDeps = e;
  }
  /**
   * Schedule the destruction of the editor instance.
   * This will only destroy the editor if it was not mounted on the next tick.
   * This is to avoid destroying the editor instance when it's actually still mounted.
   */
  scheduleDestroy() {
    const e = this.instanceId, t = this.editor;
    this.scheduledDestructionTimeout = setTimeout(() => {
      if (this.isComponentMounted && this.instanceId === e) {
        t && t.setOptions(this.options.current);
        return;
      }
      t && !t.isDestroyed && (t.destroy(), this.instanceId === e && this.setEditor(null));
    }, 1);
  }
}
function iw(n = {}, e = []) {
  const t = Jh(n);
  t.current = n;
  const [r] = Hs(() => new sw(t)), s = ko.useSyncExternalStore(r.subscribe, r.getEditor, r.getServerSnapshot);
  return Nu(s), rs(r.onRender(e)), nw({
    editor: s,
    selector: ({ transactionNumber: i }) => n.shouldRerenderOnTransaction === !1 ? null : n.immediatelyRender && i === 0 ? 0 : i + 1
  }), s;
}
const ow = _s({
  editor: null
});
ow.Consumer;
const aw = _s({
  onDragStart: void 0
}), lw = () => ni(aw);
u.forwardRef((n, e) => {
  const { onDragStart: t } = lw(), r = n.as || "div";
  return (
    // @ts-ignore
    u.createElement(r, { ...n, ref: e, "data-node-view-wrapper": "", onDragStart: t, style: {
      whiteSpace: "normal",
      ...n.style
    } })
  );
});
const cw = /^\s*>\s$/, dw = qe.create({
  name: "blockquote",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  content: "block+",
  group: "block",
  defining: !0,
  parseHTML() {
    return [
      { tag: "blockquote" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["blockquote", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setBlockquote: () => ({ commands: n }) => n.wrapIn(this.name),
      toggleBlockquote: () => ({ commands: n }) => n.toggleWrap(this.name),
      unsetBlockquote: () => ({ commands: n }) => n.lift(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-b": () => this.editor.commands.toggleBlockquote()
    };
  },
  addInputRules() {
    return [
      ps({
        find: cw,
        type: this.type
      })
    ];
  }
}), uw = /(?:^|\s)(\*\*(?!\s+\*\*)((?:[^*]+))\*\*(?!\s+\*\*))$/, fw = /(?:^|\s)(\*\*(?!\s+\*\*)((?:[^*]+))\*\*(?!\s+\*\*))/g, hw = /(?:^|\s)(__(?!\s+__)((?:[^_]+))__(?!\s+__))$/, pw = /(?:^|\s)(__(?!\s+__)((?:[^_]+))__(?!\s+__))/g, mw = ft.create({
  name: "bold",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "strong"
      },
      {
        tag: "b",
        getAttrs: (n) => n.style.fontWeight !== "normal" && null
      },
      {
        style: "font-weight",
        getAttrs: (n) => /^(bold(er)?|[5-9]\d{2,})$/.test(n) && null
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["strong", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setBold: () => ({ commands: n }) => n.setMark(this.name),
      toggleBold: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetBold: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-b": () => this.editor.commands.toggleBold(),
      "Mod-B": () => this.editor.commands.toggleBold()
    };
  },
  addInputRules() {
    return [
      er({
        find: uw,
        type: this.type
      }),
      er({
        find: hw,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      wn({
        find: fw,
        type: this.type
      }),
      wn({
        find: pw,
        type: this.type
      })
    ];
  }
}), gw = qe.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["li", Ne(this.options.HTMLAttributes, n), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
}), ku = ft.create({
  name: "textStyle",
  priority: 101,
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (n) => n.hasAttribute("style") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["span", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state: n, commands: e }) => {
        const t = vo(n, this.type);
        return Object.entries(t).some(([, s]) => !!s) ? !0 : e.unsetMark(this.name);
      }
    };
  }
}), wu = /^\s*([-+*])\s$/, yw = qe.create({
  name: "bulletList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: !1,
      keepAttributes: !1
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  parseHTML() {
    return [
      { tag: "ul" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["ul", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      toggleBulletList: () => ({ commands: n, chain: e }) => this.options.keepAttributes ? e().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(gw.name, this.editor.getAttributes(ku.name)).run() : n.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-8": () => this.editor.commands.toggleBulletList()
    };
  },
  addInputRules() {
    let n = ps({
      find: wu,
      type: this.type
    });
    return (this.options.keepMarks || this.options.keepAttributes) && (n = ps({
      find: wu,
      type: this.type,
      keepMarks: this.options.keepMarks,
      keepAttributes: this.options.keepAttributes,
      getAttributes: () => this.editor.getAttributes(ku.name),
      editor: this.editor
    })), [
      n
    ];
  }
}), bw = /(?:^|\s)(`(?!\s+`)((?:[^`]+))`(?!\s+`))$/, vw = /(?:^|\s)(`(?!\s+`)((?:[^`]+))`(?!\s+`))/g, xw = ft.create({
  name: "code",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  excludes: "_",
  code: !0,
  exitable: !0,
  parseHTML() {
    return [
      { tag: "code" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["code", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setCode: () => ({ commands: n }) => n.setMark(this.name),
      toggleCode: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetCode: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-e": () => this.editor.commands.toggleCode()
    };
  },
  addInputRules() {
    return [
      er({
        find: bw,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      wn({
        find: vw,
        type: this.type
      })
    ];
  }
}), kw = /^```([a-z]+)?[\s\n]$/, ww = /^~~~([a-z]+)?[\s\n]$/, Ew = qe.create({
  name: "codeBlock",
  addOptions() {
    return {
      languageClassPrefix: "language-",
      exitOnTripleEnter: !0,
      exitOnArrowDown: !0,
      defaultLanguage: null,
      HTMLAttributes: {}
    };
  },
  content: "text*",
  marks: "",
  group: "block",
  code: !0,
  defining: !0,
  addAttributes() {
    return {
      language: {
        default: this.options.defaultLanguage,
        parseHTML: (n) => {
          var e;
          const { languageClassPrefix: t } = this.options, i = [...((e = n.firstElementChild) === null || e === void 0 ? void 0 : e.classList) || []].filter((o) => o.startsWith(t)).map((o) => o.replace(t, ""))[0];
          return i || null;
        },
        rendered: !1
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "pre",
        preserveWhitespace: "full"
      }
    ];
  },
  renderHTML({ node: n, HTMLAttributes: e }) {
    return [
      "pre",
      Ne(this.options.HTMLAttributes, e),
      [
        "code",
        {
          class: n.attrs.language ? this.options.languageClassPrefix + n.attrs.language : null
        },
        0
      ]
    ];
  },
  addCommands() {
    return {
      setCodeBlock: (n) => ({ commands: e }) => e.setNode(this.name, n),
      toggleCodeBlock: (n) => ({ commands: e }) => e.toggleNode(this.name, "paragraph", n)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Alt-c": () => this.editor.commands.toggleCodeBlock(),
      // remove code block when at start of document or code block is empty
      Backspace: () => {
        const { empty: n, $anchor: e } = this.editor.state.selection, t = e.pos === 1;
        return !n || e.parent.type.name !== this.name ? !1 : t || !e.parent.textContent.length ? this.editor.commands.clearNodes() : !1;
      },
      // exit node on triple enter
      Enter: ({ editor: n }) => {
        if (!this.options.exitOnTripleEnter)
          return !1;
        const { state: e } = n, { selection: t } = e, { $from: r, empty: s } = t;
        if (!s || r.parent.type !== this.type)
          return !1;
        const i = r.parentOffset === r.parent.nodeSize - 2, o = r.parent.textContent.endsWith(`

`);
        return !i || !o ? !1 : n.chain().command(({ tr: a }) => (a.delete(r.pos - 2, r.pos), !0)).exitCode().run();
      },
      // exit node on arrow down
      ArrowDown: ({ editor: n }) => {
        if (!this.options.exitOnArrowDown)
          return !1;
        const { state: e } = n, { selection: t, doc: r } = e, { $from: s, empty: i } = t;
        if (!i || s.parent.type !== this.type || !(s.parentOffset === s.parent.nodeSize - 2))
          return !1;
        const a = s.after();
        return a === void 0 ? !1 : r.nodeAt(a) ? n.commands.command(({ tr: c }) => (c.setSelection(ue.near(r.resolve(a))), !0)) : n.commands.exitCode();
      }
    };
  },
  addInputRules() {
    return [
      Ia({
        find: kw,
        type: this.type,
        getAttributes: (n) => ({
          language: n[1]
        })
      }),
      Ia({
        find: ww,
        type: this.type,
        getAttributes: (n) => ({
          language: n[1]
        })
      })
    ];
  },
  addProseMirrorPlugins() {
    return [
      // this plugin creates a code block for pasted content from VS Code
      // we can also detect the copied code language
      new it({
        key: new Ht("codeBlockVSCodeHandler"),
        props: {
          handlePaste: (n, e) => {
            if (!e.clipboardData || this.editor.isActive(this.type.name))
              return !1;
            const t = e.clipboardData.getData("text/plain"), r = e.clipboardData.getData("vscode-editor-data"), s = r ? JSON.parse(r) : void 0, i = s == null ? void 0 : s.mode;
            if (!t || !i)
              return !1;
            const { tr: o, schema: a } = n.state, l = a.text(t.replace(/\r\n?/g, `
`));
            return o.replaceSelectionWith(this.type.create({ language: i }, l)), o.selection.$from.parent.type !== this.type && o.setSelection(le.near(o.doc.resolve(Math.max(0, o.selection.from - 2)))), o.setMeta("paste", !0), n.dispatch(o), !0;
          }
        }
      })
    ];
  }
}), Mw = qe.create({
  name: "doc",
  topNode: !0,
  content: "block+"
});
function Sw(n = {}) {
  return new it({
    view(e) {
      return new Aw(e, n);
    }
  });
}
class Aw {
  constructor(e, t) {
    var r;
    this.editorView = e, this.cursorPos = null, this.element = null, this.timeout = -1, this.width = (r = t.width) !== null && r !== void 0 ? r : 1, this.color = t.color === !1 ? void 0 : t.color || "black", this.class = t.class, this.handlers = ["dragover", "dragend", "drop", "dragleave"].map((s) => {
      let i = (o) => {
        this[s](o);
      };
      return e.dom.addEventListener(s, i), { name: s, handler: i };
    });
  }
  destroy() {
    this.handlers.forEach(({ name: e, handler: t }) => this.editorView.dom.removeEventListener(e, t));
  }
  update(e, t) {
    this.cursorPos != null && t.doc != e.state.doc && (this.cursorPos > e.state.doc.content.size ? this.setCursor(null) : this.updateOverlay());
  }
  setCursor(e) {
    e != this.cursorPos && (this.cursorPos = e, e == null ? (this.element.parentNode.removeChild(this.element), this.element = null) : this.updateOverlay());
  }
  updateOverlay() {
    let e = this.editorView.state.doc.resolve(this.cursorPos), t = !e.parent.inlineContent, r;
    if (t) {
      let a = e.nodeBefore, l = e.nodeAfter;
      if (a || l) {
        let c = this.editorView.nodeDOM(this.cursorPos - (a ? a.nodeSize : 0));
        if (c) {
          let d = c.getBoundingClientRect(), f = a ? d.bottom : d.top;
          a && l && (f = (f + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2), r = { left: d.left, right: d.right, top: f - this.width / 2, bottom: f + this.width / 2 };
        }
      }
    }
    if (!r) {
      let a = this.editorView.coordsAtPos(this.cursorPos);
      r = { left: a.left - this.width / 2, right: a.left + this.width / 2, top: a.top, bottom: a.bottom };
    }
    let s = this.editorView.dom.offsetParent;
    this.element || (this.element = s.appendChild(document.createElement("div")), this.class && (this.element.className = this.class), this.element.style.cssText = "position: absolute; z-index: 50; pointer-events: none;", this.color && (this.element.style.backgroundColor = this.color)), this.element.classList.toggle("prosemirror-dropcursor-block", t), this.element.classList.toggle("prosemirror-dropcursor-inline", !t);
    let i, o;
    if (!s || s == document.body && getComputedStyle(s).position == "static")
      i = -pageXOffset, o = -pageYOffset;
    else {
      let a = s.getBoundingClientRect();
      i = a.left - s.scrollLeft, o = a.top - s.scrollTop;
    }
    this.element.style.left = r.left - i + "px", this.element.style.top = r.top - o + "px", this.element.style.width = r.right - r.left + "px", this.element.style.height = r.bottom - r.top + "px";
  }
  scheduleRemoval(e) {
    clearTimeout(this.timeout), this.timeout = setTimeout(() => this.setCursor(null), e);
  }
  dragover(e) {
    if (!this.editorView.editable)
      return;
    let t = this.editorView.posAtCoords({ left: e.clientX, top: e.clientY }), r = t && t.inside >= 0 && this.editorView.state.doc.nodeAt(t.inside), s = r && r.type.spec.disableDropCursor, i = typeof s == "function" ? s(this.editorView, t, e) : s;
    if (t && !i) {
      let o = t.pos;
      if (this.editorView.dragging && this.editorView.dragging.slice) {
        let a = g0(this.editorView.state.doc, o, this.editorView.dragging.slice);
        a != null && (o = a);
      }
      this.setCursor(o), this.scheduleRemoval(5e3);
    }
  }
  dragend() {
    this.scheduleRemoval(20);
  }
  drop() {
    this.scheduleRemoval(20);
  }
  dragleave(e) {
    (e.target == this.editorView.dom || !this.editorView.dom.contains(e.relatedTarget)) && this.setCursor(null);
  }
}
const Cw = lt.create({
  name: "dropCursor",
  addOptions() {
    return {
      color: "currentColor",
      width: 1,
      class: void 0
    };
  },
  addProseMirrorPlugins() {
    return [
      Sw(this.options)
    ];
  }
});
class Re extends ue {
  /**
  Create a gap cursor.
  */
  constructor(e) {
    super(e, e);
  }
  map(e, t) {
    let r = e.resolve(t.map(this.head));
    return Re.valid(r) ? new Re(r) : ue.near(r);
  }
  content() {
    return W.empty;
  }
  eq(e) {
    return e instanceof Re && e.head == this.head;
  }
  toJSON() {
    return { type: "gapcursor", pos: this.head };
  }
  /**
  @internal
  */
  static fromJSON(e, t) {
    if (typeof t.pos != "number")
      throw new RangeError("Invalid input for GapCursor.fromJSON");
    return new Re(e.resolve(t.pos));
  }
  /**
  @internal
  */
  getBookmark() {
    return new Ol(this.anchor);
  }
  /**
  @internal
  */
  static valid(e) {
    let t = e.parent;
    if (t.isTextblock || !Ow(e) || !Tw(e))
      return !1;
    let r = t.type.spec.allowGapCursor;
    if (r != null)
      return r;
    let s = t.contentMatchAt(e.index()).defaultType;
    return s && s.isTextblock;
  }
  /**
  @internal
  */
  static findGapCursorFrom(e, t, r = !1) {
    e: for (; ; ) {
      if (!r && Re.valid(e))
        return e;
      let s = e.pos, i = null;
      for (let o = e.depth; ; o--) {
        let a = e.node(o);
        if (t > 0 ? e.indexAfter(o) < a.childCount : e.index(o) > 0) {
          i = a.child(t > 0 ? e.indexAfter(o) : e.index(o) - 1);
          break;
        } else if (o == 0)
          return null;
        s += t;
        let l = e.doc.resolve(s);
        if (Re.valid(l))
          return l;
      }
      for (; ; ) {
        let o = t > 0 ? i.firstChild : i.lastChild;
        if (!o) {
          if (i.isAtom && !i.isText && !ne.isSelectable(i)) {
            e = e.doc.resolve(s + i.nodeSize * t), r = !1;
            continue e;
          }
          break;
        }
        i = o, s += t;
        let a = e.doc.resolve(s);
        if (Re.valid(a))
          return a;
      }
      return null;
    }
  }
}
Re.prototype.visible = !1;
Re.findFrom = Re.findGapCursorFrom;
ue.jsonID("gapcursor", Re);
class Ol {
  constructor(e) {
    this.pos = e;
  }
  map(e) {
    return new Ol(e.map(this.pos));
  }
  resolve(e) {
    let t = e.resolve(this.pos);
    return Re.valid(t) ? new Re(t) : ue.near(t);
  }
}
function Ow(n) {
  for (let e = n.depth; e >= 0; e--) {
    let t = n.index(e), r = n.node(e);
    if (t == 0) {
      if (r.type.spec.isolating)
        return !0;
      continue;
    }
    for (let s = r.child(t - 1); ; s = s.lastChild) {
      if (s.childCount == 0 && !s.inlineContent || s.isAtom || s.type.spec.isolating)
        return !0;
      if (s.inlineContent)
        return !1;
    }
  }
  return !0;
}
function Tw(n) {
  for (let e = n.depth; e >= 0; e--) {
    let t = n.indexAfter(e), r = n.node(e);
    if (t == r.childCount) {
      if (r.type.spec.isolating)
        return !0;
      continue;
    }
    for (let s = r.child(t); ; s = s.firstChild) {
      if (s.childCount == 0 && !s.inlineContent || s.isAtom || s.type.spec.isolating)
        return !0;
      if (s.inlineContent)
        return !1;
    }
  }
  return !0;
}
function Nw() {
  return new it({
    props: {
      decorations: Rw,
      createSelectionBetween(n, e, t) {
        return e.pos == t.pos && Re.valid(t) ? new Re(t) : null;
      },
      handleClick: Hw,
      handleKeyDown: _w,
      handleDOMEvents: { beforeinput: Iw }
    }
  });
}
const _w = sh({
  ArrowLeft: Js("horiz", -1),
  ArrowRight: Js("horiz", 1),
  ArrowUp: Js("vert", -1),
  ArrowDown: Js("vert", 1)
});
function Js(n, e) {
  const t = n == "vert" ? e > 0 ? "down" : "up" : e > 0 ? "right" : "left";
  return function(r, s, i) {
    let o = r.selection, a = e > 0 ? o.$to : o.$from, l = o.empty;
    if (o instanceof le) {
      if (!i.endOfTextblock(t) || a.depth == 0)
        return !1;
      l = !1, a = r.doc.resolve(e > 0 ? a.after() : a.before());
    }
    let c = Re.findGapCursorFrom(a, e, l);
    return c ? (s && s(r.tr.setSelection(new Re(c))), !0) : !1;
  };
}
function Hw(n, e, t) {
  if (!n || !n.editable)
    return !1;
  let r = n.state.doc.resolve(e);
  if (!Re.valid(r))
    return !1;
  let s = n.posAtCoords({ left: t.clientX, top: t.clientY });
  return s && s.inside > -1 && ne.isSelectable(n.state.doc.nodeAt(s.inside)) ? !1 : (n.dispatch(n.state.tr.setSelection(new Re(r))), !0);
}
function Iw(n, e) {
  if (e.inputType != "insertCompositionText" || !(n.state.selection instanceof Re))
    return !1;
  let { $from: t } = n.state.selection, r = t.parent.contentMatchAt(t.index()).findWrapping(n.state.schema.nodes.text);
  if (!r)
    return !1;
  let s = L.empty;
  for (let o = r.length - 1; o >= 0; o--)
    s = L.from(r[o].createAndFill(null, s));
  let i = n.state.tr.replace(t.pos, t.pos, new W(s, 0, 0));
  return i.setSelection(le.near(i.doc.resolve(t.pos + 1))), n.dispatch(i), !1;
}
function Rw(n) {
  if (!(n.selection instanceof Re))
    return null;
  let e = document.createElement("div");
  return e.className = "ProseMirror-gapcursor", $e.create(n.doc, [kt.widget(n.selection.head, e, { key: "gapcursor" })]);
}
const Dw = lt.create({
  name: "gapCursor",
  addProseMirrorPlugins() {
    return [
      Nw()
    ];
  },
  extendNodeSchema(n) {
    var e;
    const t = {
      name: n.name,
      options: n.options,
      storage: n.storage
    };
    return {
      allowGapCursor: (e = pe(Y(n, "allowGapCursor", t))) !== null && e !== void 0 ? e : null
    };
  }
}), Lw = qe.create({
  name: "hardBreak",
  addOptions() {
    return {
      keepMarks: !0,
      HTMLAttributes: {}
    };
  },
  inline: !0,
  group: "inline",
  selectable: !1,
  parseHTML() {
    return [
      { tag: "br" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["br", Ne(this.options.HTMLAttributes, n)];
  },
  renderText() {
    return `
`;
  },
  addCommands() {
    return {
      setHardBreak: () => ({ commands: n, chain: e, state: t, editor: r }) => n.first([
        () => n.exitCode(),
        () => n.command(() => {
          const { selection: s, storedMarks: i } = t;
          if (s.$from.parent.type.spec.isolating)
            return !1;
          const { keepMarks: o } = this.options, { splittableMarks: a } = r.extensionManager, l = i || s.$to.parentOffset && s.$from.marks();
          return e().insertContent({ type: this.name }).command(({ tr: c, dispatch: d }) => {
            if (d && l && o) {
              const f = l.filter((h) => a.includes(h.type.name));
              c.ensureMarks(f);
            }
            return !0;
          }).run();
        })
      ])
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Enter": () => this.editor.commands.setHardBreak(),
      "Shift-Enter": () => this.editor.commands.setHardBreak()
    };
  }
}), Pw = qe.create({
  name: "heading",
  addOptions() {
    return {
      levels: [1, 2, 3, 4, 5, 6],
      HTMLAttributes: {}
    };
  },
  content: "inline*",
  group: "block",
  defining: !0,
  addAttributes() {
    return {
      level: {
        default: 1,
        rendered: !1
      }
    };
  },
  parseHTML() {
    return this.options.levels.map((n) => ({
      tag: `h${n}`,
      attrs: { level: n }
    }));
  },
  renderHTML({ node: n, HTMLAttributes: e }) {
    return [`h${this.options.levels.includes(n.attrs.level) ? n.attrs.level : this.options.levels[0]}`, Ne(this.options.HTMLAttributes, e), 0];
  },
  addCommands() {
    return {
      setHeading: (n) => ({ commands: e }) => this.options.levels.includes(n.level) ? e.setNode(this.name, n) : !1,
      toggleHeading: (n) => ({ commands: e }) => this.options.levels.includes(n.level) ? e.toggleNode(this.name, "paragraph", n) : !1
    };
  },
  addKeyboardShortcuts() {
    return this.options.levels.reduce((n, e) => ({
      ...n,
      [`Mod-Alt-${e}`]: () => this.editor.commands.toggleHeading({ level: e })
    }), {});
  },
  addInputRules() {
    return this.options.levels.map((n) => Ia({
      find: new RegExp(`^(#{1,${n}})\\s$`),
      type: this.type,
      getAttributes: {
        level: n
      }
    }));
  }
});
var qi = 200, Fe = function() {
};
Fe.prototype.append = function(e) {
  return e.length ? (e = Fe.from(e), !this.length && e || e.length < qi && this.leafAppend(e) || this.length < qi && e.leafPrepend(this) || this.appendInner(e)) : this;
};
Fe.prototype.prepend = function(e) {
  return e.length ? Fe.from(e).append(this) : this;
};
Fe.prototype.appendInner = function(e) {
  return new $w(this, e);
};
Fe.prototype.slice = function(e, t) {
  return e === void 0 && (e = 0), t === void 0 && (t = this.length), e >= t ? Fe.empty : this.sliceInner(Math.max(0, e), Math.min(this.length, t));
};
Fe.prototype.get = function(e) {
  if (!(e < 0 || e >= this.length))
    return this.getInner(e);
};
Fe.prototype.forEach = function(e, t, r) {
  t === void 0 && (t = 0), r === void 0 && (r = this.length), t <= r ? this.forEachInner(e, t, r, 0) : this.forEachInvertedInner(e, t, r, 0);
};
Fe.prototype.map = function(e, t, r) {
  t === void 0 && (t = 0), r === void 0 && (r = this.length);
  var s = [];
  return this.forEach(function(i, o) {
    return s.push(e(i, o));
  }, t, r), s;
};
Fe.from = function(e) {
  return e instanceof Fe ? e : e && e.length ? new Th(e) : Fe.empty;
};
var Th = /* @__PURE__ */ function(n) {
  function e(r) {
    n.call(this), this.values = r;
  }
  n && (e.__proto__ = n), e.prototype = Object.create(n && n.prototype), e.prototype.constructor = e;
  var t = { length: { configurable: !0 }, depth: { configurable: !0 } };
  return e.prototype.flatten = function() {
    return this.values;
  }, e.prototype.sliceInner = function(s, i) {
    return s == 0 && i == this.length ? this : new e(this.values.slice(s, i));
  }, e.prototype.getInner = function(s) {
    return this.values[s];
  }, e.prototype.forEachInner = function(s, i, o, a) {
    for (var l = i; l < o; l++)
      if (s(this.values[l], a + l) === !1)
        return !1;
  }, e.prototype.forEachInvertedInner = function(s, i, o, a) {
    for (var l = i - 1; l >= o; l--)
      if (s(this.values[l], a + l) === !1)
        return !1;
  }, e.prototype.leafAppend = function(s) {
    if (this.length + s.length <= qi)
      return new e(this.values.concat(s.flatten()));
  }, e.prototype.leafPrepend = function(s) {
    if (this.length + s.length <= qi)
      return new e(s.flatten().concat(this.values));
  }, t.length.get = function() {
    return this.values.length;
  }, t.depth.get = function() {
    return 0;
  }, Object.defineProperties(e.prototype, t), e;
}(Fe);
Fe.empty = new Th([]);
var $w = /* @__PURE__ */ function(n) {
  function e(t, r) {
    n.call(this), this.left = t, this.right = r, this.length = t.length + r.length, this.depth = Math.max(t.depth, r.depth) + 1;
  }
  return n && (e.__proto__ = n), e.prototype = Object.create(n && n.prototype), e.prototype.constructor = e, e.prototype.flatten = function() {
    return this.left.flatten().concat(this.right.flatten());
  }, e.prototype.getInner = function(r) {
    return r < this.left.length ? this.left.get(r) : this.right.get(r - this.left.length);
  }, e.prototype.forEachInner = function(r, s, i, o) {
    var a = this.left.length;
    if (s < a && this.left.forEachInner(r, s, Math.min(i, a), o) === !1 || i > a && this.right.forEachInner(r, Math.max(s - a, 0), Math.min(this.length, i) - a, o + a) === !1)
      return !1;
  }, e.prototype.forEachInvertedInner = function(r, s, i, o) {
    var a = this.left.length;
    if (s > a && this.right.forEachInvertedInner(r, s - a, Math.max(i, a) - a, o + a) === !1 || i < a && this.left.forEachInvertedInner(r, Math.min(s, a), i, o) === !1)
      return !1;
  }, e.prototype.sliceInner = function(r, s) {
    if (r == 0 && s == this.length)
      return this;
    var i = this.left.length;
    return s <= i ? this.left.slice(r, s) : r >= i ? this.right.slice(r - i, s - i) : this.left.slice(r, i).append(this.right.slice(0, s - i));
  }, e.prototype.leafAppend = function(r) {
    var s = this.right.leafAppend(r);
    if (s)
      return new e(this.left, s);
  }, e.prototype.leafPrepend = function(r) {
    var s = this.left.leafPrepend(r);
    if (s)
      return new e(s, this.right);
  }, e.prototype.appendInner = function(r) {
    return this.left.depth >= Math.max(this.right.depth, r.depth) + 1 ? new e(this.left, new e(this.right, r)) : new e(this, r);
  }, e;
}(Fe);
const Zw = 500;
class At {
  constructor(e, t) {
    this.items = e, this.eventCount = t;
  }
  // Pop the latest event off the branch's history and apply it
  // to a document transform.
  popEvent(e, t) {
    if (this.eventCount == 0)
      return null;
    let r = this.items.length;
    for (; ; r--)
      if (this.items.get(r - 1).selection) {
        --r;
        break;
      }
    let s, i;
    t && (s = this.remapping(r, this.items.length), i = s.maps.length);
    let o = e.tr, a, l, c = [], d = [];
    return this.items.forEach((f, h) => {
      if (!f.step) {
        s || (s = this.remapping(r, h + 1), i = s.maps.length), i--, d.push(f);
        return;
      }
      if (s) {
        d.push(new Pt(f.map));
        let p = f.step.map(s.slice(i)), m;
        p && o.maybeStep(p).doc && (m = o.mapping.maps[o.mapping.maps.length - 1], c.push(new Pt(m, void 0, void 0, c.length + d.length))), i--, m && s.appendMap(m, i);
      } else
        o.maybeStep(f.step);
      if (f.selection)
        return a = s ? f.selection.map(s.slice(i)) : f.selection, l = new At(this.items.slice(0, r).append(d.reverse().concat(c)), this.eventCount - 1), !1;
    }, this.items.length, 0), { remaining: l, transform: o, selection: a };
  }
  // Create a new branch with the given transform added.
  addTransform(e, t, r, s) {
    let i = [], o = this.eventCount, a = this.items, l = !s && a.length ? a.get(a.length - 1) : null;
    for (let d = 0; d < e.steps.length; d++) {
      let f = e.steps[d].invert(e.docs[d]), h = new Pt(e.mapping.maps[d], f, t), p;
      (p = l && l.merge(h)) && (h = p, d ? i.pop() : a = a.slice(0, a.length - 1)), i.push(h), t && (o++, t = void 0), s || (l = h);
    }
    let c = o - r.depth;
    return c > zw && (a = Vw(a, c), o -= c), new At(a.append(i), o);
  }
  remapping(e, t) {
    let r = new kr();
    return this.items.forEach((s, i) => {
      let o = s.mirrorOffset != null && i - s.mirrorOffset >= e ? r.maps.length - s.mirrorOffset : void 0;
      r.appendMap(s.map, o);
    }, e, t), r;
  }
  addMaps(e) {
    return this.eventCount == 0 ? this : new At(this.items.append(e.map((t) => new Pt(t))), this.eventCount);
  }
  // When the collab module receives remote changes, the history has
  // to know about those, so that it can adjust the steps that were
  // rebased on top of the remote changes, and include the position
  // maps for the remote changes in its array of items.
  rebased(e, t) {
    if (!this.eventCount)
      return this;
    let r = [], s = Math.max(0, this.items.length - t), i = e.mapping, o = e.steps.length, a = this.eventCount;
    this.items.forEach((h) => {
      h.selection && a--;
    }, s);
    let l = t;
    this.items.forEach((h) => {
      let p = i.getMirror(--l);
      if (p == null)
        return;
      o = Math.min(o, p);
      let m = i.maps[p];
      if (h.step) {
        let b = e.steps[p].invert(e.docs[p]), v = h.selection && h.selection.map(i.slice(l + 1, p));
        v && a++, r.push(new Pt(m, b, v));
      } else
        r.push(new Pt(m));
    }, s);
    let c = [];
    for (let h = t; h < o; h++)
      c.push(new Pt(i.maps[h]));
    let d = this.items.slice(0, s).append(c).append(r), f = new At(d, a);
    return f.emptyItemCount() > Zw && (f = f.compress(this.items.length - r.length)), f;
  }
  emptyItemCount() {
    let e = 0;
    return this.items.forEach((t) => {
      t.step || e++;
    }), e;
  }
  // Compressing a branch means rewriting it to push the air (map-only
  // items) out. During collaboration, these naturally accumulate
  // because each remote change adds one. The `upto` argument is used
  // to ensure that only the items below a given level are compressed,
  // because `rebased` relies on a clean, untouched set of items in
  // order to associate old items with rebased steps.
  compress(e = this.items.length) {
    let t = this.remapping(0, e), r = t.maps.length, s = [], i = 0;
    return this.items.forEach((o, a) => {
      if (a >= e)
        s.push(o), o.selection && i++;
      else if (o.step) {
        let l = o.step.map(t.slice(r)), c = l && l.getMap();
        if (r--, c && t.appendMap(c, r), l) {
          let d = o.selection && o.selection.map(t.slice(r));
          d && i++;
          let f = new Pt(c.invert(), l, d), h, p = s.length - 1;
          (h = s.length && s[p].merge(f)) ? s[p] = h : s.push(f);
        }
      } else o.map && r--;
    }, this.items.length, 0), new At(Fe.from(s.reverse()), i);
  }
}
At.empty = new At(Fe.empty, 0);
function Vw(n, e) {
  let t;
  return n.forEach((r, s) => {
    if (r.selection && e-- == 0)
      return t = s, !1;
  }), n.slice(t);
}
class Pt {
  constructor(e, t, r, s) {
    this.map = e, this.step = t, this.selection = r, this.mirrorOffset = s;
  }
  merge(e) {
    if (this.step && e.step && !e.selection) {
      let t = e.step.merge(this.step);
      if (t)
        return new Pt(t.getMap().invert(), t, this.selection);
    }
  }
}
class dn {
  constructor(e, t, r, s, i) {
    this.done = e, this.undone = t, this.prevRanges = r, this.prevTime = s, this.prevComposition = i;
  }
}
const zw = 20;
function jw(n, e, t, r) {
  let s = t.getMeta(Un), i;
  if (s)
    return s.historyState;
  t.getMeta(Ww) && (n = new dn(n.done, n.undone, null, 0, -1));
  let o = t.getMeta("appendedTransaction");
  if (t.steps.length == 0)
    return n;
  if (o && o.getMeta(Un))
    return o.getMeta(Un).redo ? new dn(n.done.addTransform(t, void 0, r, ti(e)), n.undone, Eu(t.mapping.maps), n.prevTime, n.prevComposition) : new dn(n.done, n.undone.addTransform(t, void 0, r, ti(e)), null, n.prevTime, n.prevComposition);
  if (t.getMeta("addToHistory") !== !1 && !(o && o.getMeta("addToHistory") === !1)) {
    let a = t.getMeta("composition"), l = n.prevTime == 0 || !o && n.prevComposition != a && (n.prevTime < (t.time || 0) - r.newGroupDelay || !Fw(t, n.prevRanges)), c = o ? ea(n.prevRanges, t.mapping) : Eu(t.mapping.maps);
    return new dn(n.done.addTransform(t, l ? e.selection.getBookmark() : void 0, r, ti(e)), At.empty, c, t.time, a ?? n.prevComposition);
  } else return (i = t.getMeta("rebased")) ? new dn(n.done.rebased(t, i), n.undone.rebased(t, i), ea(n.prevRanges, t.mapping), n.prevTime, n.prevComposition) : new dn(n.done.addMaps(t.mapping.maps), n.undone.addMaps(t.mapping.maps), ea(n.prevRanges, t.mapping), n.prevTime, n.prevComposition);
}
function Fw(n, e) {
  if (!e)
    return !1;
  if (!n.docChanged)
    return !0;
  let t = !1;
  return n.mapping.maps[0].forEach((r, s) => {
    for (let i = 0; i < e.length; i += 2)
      r <= e[i + 1] && s >= e[i] && (t = !0);
  }), t;
}
function Eu(n) {
  let e = [];
  for (let t = n.length - 1; t >= 0 && e.length == 0; t--)
    n[t].forEach((r, s, i, o) => e.push(i, o));
  return e;
}
function ea(n, e) {
  if (!n)
    return null;
  let t = [];
  for (let r = 0; r < n.length; r += 2) {
    let s = e.map(n[r], 1), i = e.map(n[r + 1], -1);
    s <= i && t.push(s, i);
  }
  return t;
}
function Bw(n, e, t) {
  let r = ti(e), s = Un.get(e).spec.config, i = (t ? n.undone : n.done).popEvent(e, r);
  if (!i)
    return null;
  let o = i.selection.resolve(i.transform.doc), a = (t ? n.done : n.undone).addTransform(i.transform, e.selection.getBookmark(), s, r), l = new dn(t ? a : i.remaining, t ? i.remaining : a, null, 0, -1);
  return i.transform.setSelection(o).setMeta(Un, { redo: t, historyState: l });
}
let ta = !1, Mu = null;
function ti(n) {
  let e = n.plugins;
  if (Mu != e) {
    ta = !1, Mu = e;
    for (let t = 0; t < e.length; t++)
      if (e[t].spec.historyPreserveItems) {
        ta = !0;
        break;
      }
  }
  return ta;
}
const Un = new Ht("history"), Ww = new Ht("closeHistory");
function Uw(n = {}) {
  return n = {
    depth: n.depth || 100,
    newGroupDelay: n.newGroupDelay || 500
  }, new it({
    key: Un,
    state: {
      init() {
        return new dn(At.empty, At.empty, null, 0, -1);
      },
      apply(e, t, r) {
        return jw(t, r, e, n);
      }
    },
    config: n,
    props: {
      handleDOMEvents: {
        beforeinput(e, t) {
          let r = t.inputType, s = r == "historyUndo" ? _h : r == "historyRedo" ? Hh : null;
          return s ? (t.preventDefault(), s(e.state, e.dispatch)) : !1;
        }
      }
    }
  });
}
function Nh(n, e) {
  return (t, r) => {
    let s = Un.getState(t);
    if (!s || (n ? s.undone : s.done).eventCount == 0)
      return !1;
    if (r) {
      let i = Bw(s, t, n);
      i && r(e ? i.scrollIntoView() : i);
    }
    return !0;
  };
}
const _h = Nh(!1, !0), Hh = Nh(!0, !0), Kw = lt.create({
  name: "history",
  addOptions() {
    return {
      depth: 100,
      newGroupDelay: 500
    };
  },
  addCommands() {
    return {
      undo: () => ({ state: n, dispatch: e }) => _h(n, e),
      redo: () => ({ state: n, dispatch: e }) => Hh(n, e)
    };
  },
  addProseMirrorPlugins() {
    return [
      Uw(this.options)
    ];
  },
  addKeyboardShortcuts() {
    return {
      "Mod-z": () => this.editor.commands.undo(),
      "Shift-Mod-z": () => this.editor.commands.redo(),
      "Mod-y": () => this.editor.commands.redo(),
      // Russian keyboard layouts
      "Mod-я": () => this.editor.commands.undo(),
      "Shift-Mod-я": () => this.editor.commands.redo()
    };
  }
}), qw = qe.create({
  name: "horizontalRule",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  group: "block",
  parseHTML() {
    return [{ tag: "hr" }];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["hr", Ne(this.options.HTMLAttributes, n)];
  },
  addCommands() {
    return {
      setHorizontalRule: () => ({ chain: n, state: e }) => {
        const { selection: t } = e, { $from: r, $to: s } = t, i = n();
        return r.parentOffset === 0 ? i.insertContentAt({
          from: Math.max(r.pos - 1, 0),
          to: s.pos
        }, {
          type: this.name
        }) : $x(t) ? i.insertContentAt(s.pos, {
          type: this.name
        }) : i.insertContent({ type: this.name }), i.command(({ tr: o, dispatch: a }) => {
          var l;
          if (a) {
            const { $to: c } = o.selection, d = c.end();
            if (c.nodeAfter)
              c.nodeAfter.isTextblock ? o.setSelection(le.create(o.doc, c.pos + 1)) : c.nodeAfter.isBlock ? o.setSelection(ne.create(o.doc, c.pos)) : o.setSelection(le.create(o.doc, c.pos));
            else {
              const f = (l = c.parent.type.contentMatch.defaultType) === null || l === void 0 ? void 0 : l.create();
              f && (o.insert(d, f), o.setSelection(le.create(o.doc, d + 1)));
            }
            o.scrollIntoView();
          }
          return !0;
        }).run();
      }
    };
  },
  addInputRules() {
    return [
      kh({
        find: /^(?:---|—-|___\s|\*\*\*\s)$/,
        type: this.type
      })
    ];
  }
}), Jw = /(?:^|\s)(\*(?!\s+\*)((?:[^*]+))\*(?!\s+\*))$/, Gw = /(?:^|\s)(\*(?!\s+\*)((?:[^*]+))\*(?!\s+\*))/g, Yw = /(?:^|\s)(_(?!\s+_)((?:[^_]+))_(?!\s+_))$/, Qw = /(?:^|\s)(_(?!\s+_)((?:[^_]+))_(?!\s+_))/g, Xw = ft.create({
  name: "italic",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "em"
      },
      {
        tag: "i",
        getAttrs: (n) => n.style.fontStyle !== "normal" && null
      },
      {
        style: "font-style=italic"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["em", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setItalic: () => ({ commands: n }) => n.setMark(this.name),
      toggleItalic: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetItalic: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-i": () => this.editor.commands.toggleItalic(),
      "Mod-I": () => this.editor.commands.toggleItalic()
    };
  },
  addInputRules() {
    return [
      er({
        find: Jw,
        type: this.type
      }),
      er({
        find: Yw,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      wn({
        find: Gw,
        type: this.type
      }),
      wn({
        find: Qw,
        type: this.type
      })
    ];
  }
}), e3 = qe.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["li", Ne(this.options.HTMLAttributes, n), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
}), t3 = qe.create({
  name: "listItem",
  addOptions() {
    return {
      HTMLAttributes: {},
      bulletListTypeName: "bulletList",
      orderedListTypeName: "orderedList"
    };
  },
  content: "paragraph block*",
  defining: !0,
  parseHTML() {
    return [
      {
        tag: "li"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["li", Ne(this.options.HTMLAttributes, n), 0];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => this.editor.commands.splitListItem(this.name),
      Tab: () => this.editor.commands.sinkListItem(this.name),
      "Shift-Tab": () => this.editor.commands.liftListItem(this.name)
    };
  }
}), Su = ft.create({
  name: "textStyle",
  priority: 101,
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (n) => n.hasAttribute("style") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["span", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      removeEmptyTextStyle: () => ({ state: n, commands: e }) => {
        const t = vo(n, this.type);
        return Object.entries(t).some(([, s]) => !!s) ? !0 : e.unsetMark(this.name);
      }
    };
  }
}), Au = /^(\d+)\.\s$/, n3 = qe.create({
  name: "orderedList",
  addOptions() {
    return {
      itemTypeName: "listItem",
      HTMLAttributes: {},
      keepMarks: !1,
      keepAttributes: !1
    };
  },
  group: "block list",
  content() {
    return `${this.options.itemTypeName}+`;
  },
  addAttributes() {
    return {
      start: {
        default: 1,
        parseHTML: (n) => n.hasAttribute("start") ? parseInt(n.getAttribute("start") || "", 10) : 1
      },
      type: {
        default: void 0,
        parseHTML: (n) => n.getAttribute("type")
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "ol"
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    const { start: e, ...t } = n;
    return e === 1 ? ["ol", Ne(this.options.HTMLAttributes, t), 0] : ["ol", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      toggleOrderedList: () => ({ commands: n, chain: e }) => this.options.keepAttributes ? e().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(t3.name, this.editor.getAttributes(Su.name)).run() : n.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-7": () => this.editor.commands.toggleOrderedList()
    };
  },
  addInputRules() {
    let n = ps({
      find: Au,
      type: this.type,
      getAttributes: (e) => ({ start: +e[1] }),
      joinPredicate: (e, t) => t.childCount + t.attrs.start === +e[1]
    });
    return (this.options.keepMarks || this.options.keepAttributes) && (n = ps({
      find: Au,
      type: this.type,
      keepMarks: this.options.keepMarks,
      keepAttributes: this.options.keepAttributes,
      getAttributes: (e) => ({ start: +e[1], ...this.editor.getAttributes(Su.name) }),
      joinPredicate: (e, t) => t.childCount + t.attrs.start === +e[1],
      editor: this.editor
    })), [
      n
    ];
  }
}), r3 = qe.create({
  name: "paragraph",
  priority: 1e3,
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  group: "block",
  content: "inline*",
  parseHTML() {
    return [
      { tag: "p" }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["p", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setParagraph: () => ({ commands: n }) => n.setNode(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Alt-0": () => this.editor.commands.setParagraph()
    };
  }
}), s3 = /(?:^|\s)(~~(?!\s+~~)((?:[^~]+))~~(?!\s+~~))$/, i3 = /(?:^|\s)(~~(?!\s+~~)((?:[^~]+))~~(?!\s+~~))/g, o3 = ft.create({
  name: "strike",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "s"
      },
      {
        tag: "del"
      },
      {
        tag: "strike"
      },
      {
        style: "text-decoration",
        consuming: !1,
        getAttrs: (n) => n.includes("line-through") ? {} : !1
      }
    ];
  },
  renderHTML({ HTMLAttributes: n }) {
    return ["s", Ne(this.options.HTMLAttributes, n), 0];
  },
  addCommands() {
    return {
      setStrike: () => ({ commands: n }) => n.setMark(this.name),
      toggleStrike: () => ({ commands: n }) => n.toggleMark(this.name),
      unsetStrike: () => ({ commands: n }) => n.unsetMark(this.name)
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-s": () => this.editor.commands.toggleStrike()
    };
  },
  addInputRules() {
    return [
      er({
        find: s3,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      wn({
        find: i3,
        type: this.type
      })
    ];
  }
}), a3 = qe.create({
  name: "text",
  group: "inline"
}), l3 = lt.create({
  name: "starterKit",
  addExtensions() {
    var n, e, t, r, s, i, o, a, l, c, d, f, h, p, m, b, v, w;
    const H = [];
    return this.options.bold !== !1 && H.push(mw.configure((n = this.options) === null || n === void 0 ? void 0 : n.bold)), this.options.blockquote !== !1 && H.push(dw.configure((e = this.options) === null || e === void 0 ? void 0 : e.blockquote)), this.options.bulletList !== !1 && H.push(yw.configure((t = this.options) === null || t === void 0 ? void 0 : t.bulletList)), this.options.code !== !1 && H.push(xw.configure((r = this.options) === null || r === void 0 ? void 0 : r.code)), this.options.codeBlock !== !1 && H.push(Ew.configure((s = this.options) === null || s === void 0 ? void 0 : s.codeBlock)), this.options.document !== !1 && H.push(Mw.configure((i = this.options) === null || i === void 0 ? void 0 : i.document)), this.options.dropcursor !== !1 && H.push(Cw.configure((o = this.options) === null || o === void 0 ? void 0 : o.dropcursor)), this.options.gapcursor !== !1 && H.push(Dw.configure((a = this.options) === null || a === void 0 ? void 0 : a.gapcursor)), this.options.hardBreak !== !1 && H.push(Lw.configure((l = this.options) === null || l === void 0 ? void 0 : l.hardBreak)), this.options.heading !== !1 && H.push(Pw.configure((c = this.options) === null || c === void 0 ? void 0 : c.heading)), this.options.history !== !1 && H.push(Kw.configure((d = this.options) === null || d === void 0 ? void 0 : d.history)), this.options.horizontalRule !== !1 && H.push(qw.configure((f = this.options) === null || f === void 0 ? void 0 : f.horizontalRule)), this.options.italic !== !1 && H.push(Xw.configure((h = this.options) === null || h === void 0 ? void 0 : h.italic)), this.options.listItem !== !1 && H.push(e3.configure((p = this.options) === null || p === void 0 ? void 0 : p.listItem)), this.options.orderedList !== !1 && H.push(n3.configure((m = this.options) === null || m === void 0 ? void 0 : m.orderedList)), this.options.paragraph !== !1 && H.push(r3.configure((b = this.options) === null || b === void 0 ? void 0 : b.paragraph)), this.options.strike !== !1 && H.push(o3.configure((v = this.options) === null || v === void 0 ? void 0 : v.strike)), this.options.text !== !1 && H.push(a3.configure((w = this.options) === null || w === void 0 ? void 0 : w.text)), H;
  }
});
var ye;
(function(n) {
  n.assertEqual = (s) => s;
  function e(s) {
  }
  n.assertIs = e;
  function t(s) {
    throw new Error();
  }
  n.assertNever = t, n.arrayToEnum = (s) => {
    const i = {};
    for (const o of s)
      i[o] = o;
    return i;
  }, n.getValidEnumValues = (s) => {
    const i = n.objectKeys(s).filter((a) => typeof s[s[a]] != "number"), o = {};
    for (const a of i)
      o[a] = s[a];
    return n.objectValues(o);
  }, n.objectValues = (s) => n.objectKeys(s).map(function(i) {
    return s[i];
  }), n.objectKeys = typeof Object.keys == "function" ? (s) => Object.keys(s) : (s) => {
    const i = [];
    for (const o in s)
      Object.prototype.hasOwnProperty.call(s, o) && i.push(o);
    return i;
  }, n.find = (s, i) => {
    for (const o of s)
      if (i(o))
        return o;
  }, n.isInteger = typeof Number.isInteger == "function" ? (s) => Number.isInteger(s) : (s) => typeof s == "number" && isFinite(s) && Math.floor(s) === s;
  function r(s, i = " | ") {
    return s.map((o) => typeof o == "string" ? `'${o}'` : o).join(i);
  }
  n.joinValues = r, n.jsonStringifyReplacer = (s, i) => typeof i == "bigint" ? i.toString() : i;
})(ye || (ye = {}));
var Ba;
(function(n) {
  n.mergeShapes = (e, t) => ({
    ...e,
    ...t
    // second overwrites first
  });
})(Ba || (Ba = {}));
const U = ye.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]), hn = (n) => {
  switch (typeof n) {
    case "undefined":
      return U.undefined;
    case "string":
      return U.string;
    case "number":
      return isNaN(n) ? U.nan : U.number;
    case "boolean":
      return U.boolean;
    case "function":
      return U.function;
    case "bigint":
      return U.bigint;
    case "symbol":
      return U.symbol;
    case "object":
      return Array.isArray(n) ? U.array : n === null ? U.null : n.then && typeof n.then == "function" && n.catch && typeof n.catch == "function" ? U.promise : typeof Map < "u" && n instanceof Map ? U.map : typeof Set < "u" && n instanceof Set ? U.set : typeof Date < "u" && n instanceof Date ? U.date : U.object;
    default:
      return U.unknown;
  }
}, P = ye.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]), c3 = (n) => JSON.stringify(n, null, 2).replace(/"([^"]+)":/g, "$1:");
class ut extends Error {
  constructor(e) {
    super(), this.issues = [], this.addIssue = (r) => {
      this.issues = [...this.issues, r];
    }, this.addIssues = (r = []) => {
      this.issues = [...this.issues, ...r];
    };
    const t = new.target.prototype;
    Object.setPrototypeOf ? Object.setPrototypeOf(this, t) : this.__proto__ = t, this.name = "ZodError", this.issues = e;
  }
  get errors() {
    return this.issues;
  }
  format(e) {
    const t = e || function(i) {
      return i.message;
    }, r = { _errors: [] }, s = (i) => {
      for (const o of i.issues)
        if (o.code === "invalid_union")
          o.unionErrors.map(s);
        else if (o.code === "invalid_return_type")
          s(o.returnTypeError);
        else if (o.code === "invalid_arguments")
          s(o.argumentsError);
        else if (o.path.length === 0)
          r._errors.push(t(o));
        else {
          let a = r, l = 0;
          for (; l < o.path.length; ) {
            const c = o.path[l];
            l === o.path.length - 1 ? (a[c] = a[c] || { _errors: [] }, a[c]._errors.push(t(o))) : a[c] = a[c] || { _errors: [] }, a = a[c], l++;
          }
        }
    };
    return s(this), r;
  }
  static assert(e) {
    if (!(e instanceof ut))
      throw new Error(`Not a ZodError: ${e}`);
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, ye.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(e = (t) => t.message) {
    const t = {}, r = [];
    for (const s of this.issues)
      s.path.length > 0 ? (t[s.path[0]] = t[s.path[0]] || [], t[s.path[0]].push(e(s))) : r.push(e(s));
    return { formErrors: r, fieldErrors: t };
  }
  get formErrors() {
    return this.flatten();
  }
}
ut.create = (n) => new ut(n);
const Ir = (n, e) => {
  let t;
  switch (n.code) {
    case P.invalid_type:
      n.received === U.undefined ? t = "Required" : t = `Expected ${n.expected}, received ${n.received}`;
      break;
    case P.invalid_literal:
      t = `Invalid literal value, expected ${JSON.stringify(n.expected, ye.jsonStringifyReplacer)}`;
      break;
    case P.unrecognized_keys:
      t = `Unrecognized key(s) in object: ${ye.joinValues(n.keys, ", ")}`;
      break;
    case P.invalid_union:
      t = "Invalid input";
      break;
    case P.invalid_union_discriminator:
      t = `Invalid discriminator value. Expected ${ye.joinValues(n.options)}`;
      break;
    case P.invalid_enum_value:
      t = `Invalid enum value. Expected ${ye.joinValues(n.options)}, received '${n.received}'`;
      break;
    case P.invalid_arguments:
      t = "Invalid function arguments";
      break;
    case P.invalid_return_type:
      t = "Invalid function return type";
      break;
    case P.invalid_date:
      t = "Invalid date";
      break;
    case P.invalid_string:
      typeof n.validation == "object" ? "includes" in n.validation ? (t = `Invalid input: must include "${n.validation.includes}"`, typeof n.validation.position == "number" && (t = `${t} at one or more positions greater than or equal to ${n.validation.position}`)) : "startsWith" in n.validation ? t = `Invalid input: must start with "${n.validation.startsWith}"` : "endsWith" in n.validation ? t = `Invalid input: must end with "${n.validation.endsWith}"` : ye.assertNever(n.validation) : n.validation !== "regex" ? t = `Invalid ${n.validation}` : t = "Invalid";
      break;
    case P.too_small:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "more than"} ${n.minimum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at least" : "over"} ${n.minimum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${n.minimum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly equal to " : n.inclusive ? "greater than or equal to " : "greater than "}${new Date(Number(n.minimum))}` : t = "Invalid input";
      break;
    case P.too_big:
      n.type === "array" ? t = `Array must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "less than"} ${n.maximum} element(s)` : n.type === "string" ? t = `String must contain ${n.exact ? "exactly" : n.inclusive ? "at most" : "under"} ${n.maximum} character(s)` : n.type === "number" ? t = `Number must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "bigint" ? t = `BigInt must be ${n.exact ? "exactly" : n.inclusive ? "less than or equal to" : "less than"} ${n.maximum}` : n.type === "date" ? t = `Date must be ${n.exact ? "exactly" : n.inclusive ? "smaller than or equal to" : "smaller than"} ${new Date(Number(n.maximum))}` : t = "Invalid input";
      break;
    case P.custom:
      t = "Invalid input";
      break;
    case P.invalid_intersection_types:
      t = "Intersection results could not be merged";
      break;
    case P.not_multiple_of:
      t = `Number must be a multiple of ${n.multipleOf}`;
      break;
    case P.not_finite:
      t = "Number must be finite";
      break;
    default:
      t = e.defaultError, ye.assertNever(n);
  }
  return { message: t };
};
let Ih = Ir;
function d3(n) {
  Ih = n;
}
function Ji() {
  return Ih;
}
const Gi = (n) => {
  const { data: e, path: t, errorMaps: r, issueData: s } = n, i = [...t, ...s.path || []], o = {
    ...s,
    path: i
  };
  if (s.message !== void 0)
    return {
      ...s,
      path: i,
      message: s.message
    };
  let a = "";
  const l = r.filter((c) => !!c).slice().reverse();
  for (const c of l)
    a = c(o, { data: e, defaultError: a }).message;
  return {
    ...s,
    path: i,
    message: a
  };
}, u3 = [];
function B(n, e) {
  const t = Ji(), r = Gi({
    issueData: e,
    data: n.data,
    path: n.path,
    errorMaps: [
      n.common.contextualErrorMap,
      n.schemaErrorMap,
      t,
      t === Ir ? void 0 : Ir
      // then global default map
    ].filter((s) => !!s)
  });
  n.common.issues.push(r);
}
class Qe {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    this.value === "valid" && (this.value = "dirty");
  }
  abort() {
    this.value !== "aborted" && (this.value = "aborted");
  }
  static mergeArray(e, t) {
    const r = [];
    for (const s of t) {
      if (s.status === "aborted")
        return oe;
      s.status === "dirty" && e.dirty(), r.push(s.value);
    }
    return { status: e.value, value: r };
  }
  static async mergeObjectAsync(e, t) {
    const r = [];
    for (const s of t) {
      const i = await s.key, o = await s.value;
      r.push({
        key: i,
        value: o
      });
    }
    return Qe.mergeObjectSync(e, r);
  }
  static mergeObjectSync(e, t) {
    const r = {};
    for (const s of t) {
      const { key: i, value: o } = s;
      if (i.status === "aborted" || o.status === "aborted")
        return oe;
      i.status === "dirty" && e.dirty(), o.status === "dirty" && e.dirty(), i.value !== "__proto__" && (typeof o.value < "u" || s.alwaysSet) && (r[i.value] = o.value);
    }
    return { status: e.value, value: r };
  }
}
const oe = Object.freeze({
  status: "aborted"
}), vr = (n) => ({ status: "dirty", value: n }), st = (n) => ({ status: "valid", value: n }), Wa = (n) => n.status === "aborted", Ua = (n) => n.status === "dirty", ys = (n) => n.status === "valid", bs = (n) => typeof Promise < "u" && n instanceof Promise;
function Yi(n, e, t, r) {
  if (typeof e == "function" ? n !== e || !r : !e.has(n)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return e.get(n);
}
function Rh(n, e, t, r, s) {
  if (typeof e == "function" ? n !== e || !s : !e.has(n)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return e.set(n, t), t;
}
var ee;
(function(n) {
  n.errToObj = (e) => typeof e == "string" ? { message: e } : e || {}, n.toString = (e) => typeof e == "string" ? e : e == null ? void 0 : e.message;
})(ee || (ee = {}));
var Kr, qr;
class Ft {
  constructor(e, t, r, s) {
    this._cachedPath = [], this.parent = e, this.data = t, this._path = r, this._key = s;
  }
  get path() {
    return this._cachedPath.length || (this._key instanceof Array ? this._cachedPath.push(...this._path, ...this._key) : this._cachedPath.push(...this._path, this._key)), this._cachedPath;
  }
}
const Cu = (n, e) => {
  if (ys(e))
    return { success: !0, data: e.value };
  if (!n.common.issues.length)
    throw new Error("Validation failed but no issues detected.");
  return {
    success: !1,
    get error() {
      if (this._error)
        return this._error;
      const t = new ut(n.common.issues);
      return this._error = t, this._error;
    }
  };
};
function ce(n) {
  if (!n)
    return {};
  const { errorMap: e, invalid_type_error: t, required_error: r, description: s } = n;
  if (e && (t || r))
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  return e ? { errorMap: e, description: s } : { errorMap: (o, a) => {
    var l, c;
    const { message: d } = n;
    return o.code === "invalid_enum_value" ? { message: d ?? a.defaultError } : typeof a.data > "u" ? { message: (l = d ?? r) !== null && l !== void 0 ? l : a.defaultError } : o.code !== "invalid_type" ? { message: a.defaultError } : { message: (c = d ?? t) !== null && c !== void 0 ? c : a.defaultError };
  }, description: s };
}
class he {
  constructor(e) {
    this.spa = this.safeParseAsync, this._def = e, this.parse = this.parse.bind(this), this.safeParse = this.safeParse.bind(this), this.parseAsync = this.parseAsync.bind(this), this.safeParseAsync = this.safeParseAsync.bind(this), this.spa = this.spa.bind(this), this.refine = this.refine.bind(this), this.refinement = this.refinement.bind(this), this.superRefine = this.superRefine.bind(this), this.optional = this.optional.bind(this), this.nullable = this.nullable.bind(this), this.nullish = this.nullish.bind(this), this.array = this.array.bind(this), this.promise = this.promise.bind(this), this.or = this.or.bind(this), this.and = this.and.bind(this), this.transform = this.transform.bind(this), this.brand = this.brand.bind(this), this.default = this.default.bind(this), this.catch = this.catch.bind(this), this.describe = this.describe.bind(this), this.pipe = this.pipe.bind(this), this.readonly = this.readonly.bind(this), this.isNullable = this.isNullable.bind(this), this.isOptional = this.isOptional.bind(this);
  }
  get description() {
    return this._def.description;
  }
  _getType(e) {
    return hn(e.data);
  }
  _getOrReturnCtx(e, t) {
    return t || {
      common: e.parent.common,
      data: e.data,
      parsedType: hn(e.data),
      schemaErrorMap: this._def.errorMap,
      path: e.path,
      parent: e.parent
    };
  }
  _processInputParams(e) {
    return {
      status: new Qe(),
      ctx: {
        common: e.parent.common,
        data: e.data,
        parsedType: hn(e.data),
        schemaErrorMap: this._def.errorMap,
        path: e.path,
        parent: e.parent
      }
    };
  }
  _parseSync(e) {
    const t = this._parse(e);
    if (bs(t))
      throw new Error("Synchronous parse encountered promise.");
    return t;
  }
  _parseAsync(e) {
    const t = this._parse(e);
    return Promise.resolve(t);
  }
  parse(e, t) {
    const r = this.safeParse(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  safeParse(e, t) {
    var r;
    const s = {
      common: {
        issues: [],
        async: (r = t == null ? void 0 : t.async) !== null && r !== void 0 ? r : !1,
        contextualErrorMap: t == null ? void 0 : t.errorMap
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: hn(e)
    }, i = this._parseSync({ data: e, path: s.path, parent: s });
    return Cu(s, i);
  }
  async parseAsync(e, t) {
    const r = await this.safeParseAsync(e, t);
    if (r.success)
      return r.data;
    throw r.error;
  }
  async safeParseAsync(e, t) {
    const r = {
      common: {
        issues: [],
        contextualErrorMap: t == null ? void 0 : t.errorMap,
        async: !0
      },
      path: (t == null ? void 0 : t.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data: e,
      parsedType: hn(e)
    }, s = this._parse({ data: e, path: r.path, parent: r }), i = await (bs(s) ? s : Promise.resolve(s));
    return Cu(r, i);
  }
  refine(e, t) {
    const r = (s) => typeof t == "string" || typeof t > "u" ? { message: t } : typeof t == "function" ? t(s) : t;
    return this._refinement((s, i) => {
      const o = e(s), a = () => i.addIssue({
        code: P.custom,
        ...r(s)
      });
      return typeof Promise < "u" && o instanceof Promise ? o.then((l) => l ? !0 : (a(), !1)) : o ? !0 : (a(), !1);
    });
  }
  refinement(e, t) {
    return this._refinement((r, s) => e(r) ? !0 : (s.addIssue(typeof t == "function" ? t(r, s) : t), !1));
  }
  _refinement(e) {
    return new _t({
      schema: this,
      typeName: ie.ZodEffects,
      effect: { type: "refinement", refinement: e }
    });
  }
  superRefine(e) {
    return this._refinement(e);
  }
  optional() {
    return Vt.create(this, this._def);
  }
  nullable() {
    return An.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return Tt.create(this, this._def);
  }
  promise() {
    return Dr.create(this, this._def);
  }
  or(e) {
    return ws.create([this, e], this._def);
  }
  and(e) {
    return Es.create(this, e, this._def);
  }
  transform(e) {
    return new _t({
      ...ce(this._def),
      schema: this,
      typeName: ie.ZodEffects,
      effect: { type: "transform", transform: e }
    });
  }
  default(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Os({
      ...ce(this._def),
      innerType: this,
      defaultValue: t,
      typeName: ie.ZodDefault
    });
  }
  brand() {
    return new Tl({
      typeName: ie.ZodBranded,
      type: this,
      ...ce(this._def)
    });
  }
  catch(e) {
    const t = typeof e == "function" ? e : () => e;
    return new Ts({
      ...ce(this._def),
      innerType: this,
      catchValue: t,
      typeName: ie.ZodCatch
    });
  }
  describe(e) {
    const t = this.constructor;
    return new t({
      ...this._def,
      description: e
    });
  }
  pipe(e) {
    return Ps.create(this, e);
  }
  readonly() {
    return Ns.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
const f3 = /^c[^\s-]{8,}$/i, h3 = /^[0-9a-z]+$/, p3 = /^[0-9A-HJKMNP-TV-Z]{26}$/, m3 = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i, g3 = /^[a-z0-9_-]{21}$/i, y3 = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/, b3 = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i, v3 = "^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";
let na;
const x3 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/, k3 = /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/, w3 = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/, Dh = "((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))", E3 = new RegExp(`^${Dh}$`);
function Lh(n) {
  let e = "([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d";
  return n.precision ? e = `${e}\\.\\d{${n.precision}}` : n.precision == null && (e = `${e}(\\.\\d+)?`), e;
}
function M3(n) {
  return new RegExp(`^${Lh(n)}$`);
}
function Ph(n) {
  let e = `${Dh}T${Lh(n)}`;
  const t = [];
  return t.push(n.local ? "Z?" : "Z"), n.offset && t.push("([+-]\\d{2}:?\\d{2})"), e = `${e}(${t.join("|")})`, new RegExp(`^${e}$`);
}
function S3(n, e) {
  return !!((e === "v4" || !e) && x3.test(n) || (e === "v6" || !e) && k3.test(n));
}
class Ct extends he {
  _parse(e) {
    if (this._def.coerce && (e.data = String(e.data)), this._getType(e) !== U.string) {
      const i = this._getOrReturnCtx(e);
      return B(i, {
        code: P.invalid_type,
        expected: U.string,
        received: i.parsedType
      }), oe;
    }
    const r = new Qe();
    let s;
    for (const i of this._def.checks)
      if (i.kind === "min")
        e.data.length < i.value && (s = this._getOrReturnCtx(e, s), B(s, {
          code: P.too_small,
          minimum: i.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: i.message
        }), r.dirty());
      else if (i.kind === "max")
        e.data.length > i.value && (s = this._getOrReturnCtx(e, s), B(s, {
          code: P.too_big,
          maximum: i.value,
          type: "string",
          inclusive: !0,
          exact: !1,
          message: i.message
        }), r.dirty());
      else if (i.kind === "length") {
        const o = e.data.length > i.value, a = e.data.length < i.value;
        (o || a) && (s = this._getOrReturnCtx(e, s), o ? B(s, {
          code: P.too_big,
          maximum: i.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: i.message
        }) : a && B(s, {
          code: P.too_small,
          minimum: i.value,
          type: "string",
          inclusive: !0,
          exact: !0,
          message: i.message
        }), r.dirty());
      } else if (i.kind === "email")
        b3.test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
          validation: "email",
          code: P.invalid_string,
          message: i.message
        }), r.dirty());
      else if (i.kind === "emoji")
        na || (na = new RegExp(v3, "u")), na.test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
          validation: "emoji",
          code: P.invalid_string,
          message: i.message
        }), r.dirty());
      else if (i.kind === "uuid")
        m3.test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
          validation: "uuid",
          code: P.invalid_string,
          message: i.message
        }), r.dirty());
      else if (i.kind === "nanoid")
        g3.test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
          validation: "nanoid",
          code: P.invalid_string,
          message: i.message
        }), r.dirty());
      else if (i.kind === "cuid")
        f3.test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
          validation: "cuid",
          code: P.invalid_string,
          message: i.message
        }), r.dirty());
      else if (i.kind === "cuid2")
        h3.test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
          validation: "cuid2",
          code: P.invalid_string,
          message: i.message
        }), r.dirty());
      else if (i.kind === "ulid")
        p3.test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
          validation: "ulid",
          code: P.invalid_string,
          message: i.message
        }), r.dirty());
      else if (i.kind === "url")
        try {
          new URL(e.data);
        } catch {
          s = this._getOrReturnCtx(e, s), B(s, {
            validation: "url",
            code: P.invalid_string,
            message: i.message
          }), r.dirty();
        }
      else i.kind === "regex" ? (i.regex.lastIndex = 0, i.regex.test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
        validation: "regex",
        code: P.invalid_string,
        message: i.message
      }), r.dirty())) : i.kind === "trim" ? e.data = e.data.trim() : i.kind === "includes" ? e.data.includes(i.value, i.position) || (s = this._getOrReturnCtx(e, s), B(s, {
        code: P.invalid_string,
        validation: { includes: i.value, position: i.position },
        message: i.message
      }), r.dirty()) : i.kind === "toLowerCase" ? e.data = e.data.toLowerCase() : i.kind === "toUpperCase" ? e.data = e.data.toUpperCase() : i.kind === "startsWith" ? e.data.startsWith(i.value) || (s = this._getOrReturnCtx(e, s), B(s, {
        code: P.invalid_string,
        validation: { startsWith: i.value },
        message: i.message
      }), r.dirty()) : i.kind === "endsWith" ? e.data.endsWith(i.value) || (s = this._getOrReturnCtx(e, s), B(s, {
        code: P.invalid_string,
        validation: { endsWith: i.value },
        message: i.message
      }), r.dirty()) : i.kind === "datetime" ? Ph(i).test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
        code: P.invalid_string,
        validation: "datetime",
        message: i.message
      }), r.dirty()) : i.kind === "date" ? E3.test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
        code: P.invalid_string,
        validation: "date",
        message: i.message
      }), r.dirty()) : i.kind === "time" ? M3(i).test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
        code: P.invalid_string,
        validation: "time",
        message: i.message
      }), r.dirty()) : i.kind === "duration" ? y3.test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
        validation: "duration",
        code: P.invalid_string,
        message: i.message
      }), r.dirty()) : i.kind === "ip" ? S3(e.data, i.version) || (s = this._getOrReturnCtx(e, s), B(s, {
        validation: "ip",
        code: P.invalid_string,
        message: i.message
      }), r.dirty()) : i.kind === "base64" ? w3.test(e.data) || (s = this._getOrReturnCtx(e, s), B(s, {
        validation: "base64",
        code: P.invalid_string,
        message: i.message
      }), r.dirty()) : ye.assertNever(i);
    return { status: r.value, value: e.data };
  }
  _regex(e, t, r) {
    return this.refinement((s) => e.test(s), {
      validation: t,
      code: P.invalid_string,
      ...ee.errToObj(r)
    });
  }
  _addCheck(e) {
    return new Ct({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  email(e) {
    return this._addCheck({ kind: "email", ...ee.errToObj(e) });
  }
  url(e) {
    return this._addCheck({ kind: "url", ...ee.errToObj(e) });
  }
  emoji(e) {
    return this._addCheck({ kind: "emoji", ...ee.errToObj(e) });
  }
  uuid(e) {
    return this._addCheck({ kind: "uuid", ...ee.errToObj(e) });
  }
  nanoid(e) {
    return this._addCheck({ kind: "nanoid", ...ee.errToObj(e) });
  }
  cuid(e) {
    return this._addCheck({ kind: "cuid", ...ee.errToObj(e) });
  }
  cuid2(e) {
    return this._addCheck({ kind: "cuid2", ...ee.errToObj(e) });
  }
  ulid(e) {
    return this._addCheck({ kind: "ulid", ...ee.errToObj(e) });
  }
  base64(e) {
    return this._addCheck({ kind: "base64", ...ee.errToObj(e) });
  }
  ip(e) {
    return this._addCheck({ kind: "ip", ...ee.errToObj(e) });
  }
  datetime(e) {
    var t, r;
    return typeof e == "string" ? this._addCheck({
      kind: "datetime",
      precision: null,
      offset: !1,
      local: !1,
      message: e
    }) : this._addCheck({
      kind: "datetime",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      offset: (t = e == null ? void 0 : e.offset) !== null && t !== void 0 ? t : !1,
      local: (r = e == null ? void 0 : e.local) !== null && r !== void 0 ? r : !1,
      ...ee.errToObj(e == null ? void 0 : e.message)
    });
  }
  date(e) {
    return this._addCheck({ kind: "date", message: e });
  }
  time(e) {
    return typeof e == "string" ? this._addCheck({
      kind: "time",
      precision: null,
      message: e
    }) : this._addCheck({
      kind: "time",
      precision: typeof (e == null ? void 0 : e.precision) > "u" ? null : e == null ? void 0 : e.precision,
      ...ee.errToObj(e == null ? void 0 : e.message)
    });
  }
  duration(e) {
    return this._addCheck({ kind: "duration", ...ee.errToObj(e) });
  }
  regex(e, t) {
    return this._addCheck({
      kind: "regex",
      regex: e,
      ...ee.errToObj(t)
    });
  }
  includes(e, t) {
    return this._addCheck({
      kind: "includes",
      value: e,
      position: t == null ? void 0 : t.position,
      ...ee.errToObj(t == null ? void 0 : t.message)
    });
  }
  startsWith(e, t) {
    return this._addCheck({
      kind: "startsWith",
      value: e,
      ...ee.errToObj(t)
    });
  }
  endsWith(e, t) {
    return this._addCheck({
      kind: "endsWith",
      value: e,
      ...ee.errToObj(t)
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e,
      ...ee.errToObj(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e,
      ...ee.errToObj(t)
    });
  }
  length(e, t) {
    return this._addCheck({
      kind: "length",
      value: e,
      ...ee.errToObj(t)
    });
  }
  /**
   * @deprecated Use z.string().min(1) instead.
   * @see {@link ZodString.min}
   */
  nonempty(e) {
    return this.min(1, ee.errToObj(e));
  }
  trim() {
    return new Ct({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new Ct({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new Ct({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((e) => e.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((e) => e.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((e) => e.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((e) => e.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((e) => e.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((e) => e.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((e) => e.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((e) => e.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((e) => e.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((e) => e.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((e) => e.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((e) => e.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((e) => e.kind === "ip");
  }
  get isBase64() {
    return !!this._def.checks.find((e) => e.kind === "base64");
  }
  get minLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxLength() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
Ct.create = (n) => {
  var e;
  return new Ct({
    checks: [],
    typeName: ie.ZodString,
    coerce: (e = n == null ? void 0 : n.coerce) !== null && e !== void 0 ? e : !1,
    ...ce(n)
  });
};
function A3(n, e) {
  const t = (n.toString().split(".")[1] || "").length, r = (e.toString().split(".")[1] || "").length, s = t > r ? t : r, i = parseInt(n.toFixed(s).replace(".", "")), o = parseInt(e.toFixed(s).replace(".", ""));
  return i % o / Math.pow(10, s);
}
class En extends he {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte, this.step = this.multipleOf;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = Number(e.data)), this._getType(e) !== U.number) {
      const i = this._getOrReturnCtx(e);
      return B(i, {
        code: P.invalid_type,
        expected: U.number,
        received: i.parsedType
      }), oe;
    }
    let r;
    const s = new Qe();
    for (const i of this._def.checks)
      i.kind === "int" ? ye.isInteger(e.data) || (r = this._getOrReturnCtx(e, r), B(r, {
        code: P.invalid_type,
        expected: "integer",
        received: "float",
        message: i.message
      }), s.dirty()) : i.kind === "min" ? (i.inclusive ? e.data < i.value : e.data <= i.value) && (r = this._getOrReturnCtx(e, r), B(r, {
        code: P.too_small,
        minimum: i.value,
        type: "number",
        inclusive: i.inclusive,
        exact: !1,
        message: i.message
      }), s.dirty()) : i.kind === "max" ? (i.inclusive ? e.data > i.value : e.data >= i.value) && (r = this._getOrReturnCtx(e, r), B(r, {
        code: P.too_big,
        maximum: i.value,
        type: "number",
        inclusive: i.inclusive,
        exact: !1,
        message: i.message
      }), s.dirty()) : i.kind === "multipleOf" ? A3(e.data, i.value) !== 0 && (r = this._getOrReturnCtx(e, r), B(r, {
        code: P.not_multiple_of,
        multipleOf: i.value,
        message: i.message
      }), s.dirty()) : i.kind === "finite" ? Number.isFinite(e.data) || (r = this._getOrReturnCtx(e, r), B(r, {
        code: P.not_finite,
        message: i.message
      }), s.dirty()) : ye.assertNever(i);
    return { status: s.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, ee.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, ee.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, ee.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, ee.toString(t));
  }
  setLimit(e, t, r, s) {
    return new En({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: ee.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new En({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  int(e) {
    return this._addCheck({
      kind: "int",
      message: ee.toString(e)
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !1,
      message: ee.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !1,
      message: ee.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: !0,
      message: ee.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: !0,
      message: ee.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: ee.toString(t)
    });
  }
  finite(e) {
    return this._addCheck({
      kind: "finite",
      message: ee.toString(e)
    });
  }
  safe(e) {
    return this._addCheck({
      kind: "min",
      inclusive: !0,
      value: Number.MIN_SAFE_INTEGER,
      message: ee.toString(e)
    })._addCheck({
      kind: "max",
      inclusive: !0,
      value: Number.MAX_SAFE_INTEGER,
      message: ee.toString(e)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
  get isInt() {
    return !!this._def.checks.find((e) => e.kind === "int" || e.kind === "multipleOf" && ye.isInteger(e.value));
  }
  get isFinite() {
    let e = null, t = null;
    for (const r of this._def.checks) {
      if (r.kind === "finite" || r.kind === "int" || r.kind === "multipleOf")
        return !0;
      r.kind === "min" ? (t === null || r.value > t) && (t = r.value) : r.kind === "max" && (e === null || r.value < e) && (e = r.value);
    }
    return Number.isFinite(t) && Number.isFinite(e);
  }
}
En.create = (n) => new En({
  checks: [],
  typeName: ie.ZodNumber,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...ce(n)
});
class Mn extends he {
  constructor() {
    super(...arguments), this.min = this.gte, this.max = this.lte;
  }
  _parse(e) {
    if (this._def.coerce && (e.data = BigInt(e.data)), this._getType(e) !== U.bigint) {
      const i = this._getOrReturnCtx(e);
      return B(i, {
        code: P.invalid_type,
        expected: U.bigint,
        received: i.parsedType
      }), oe;
    }
    let r;
    const s = new Qe();
    for (const i of this._def.checks)
      i.kind === "min" ? (i.inclusive ? e.data < i.value : e.data <= i.value) && (r = this._getOrReturnCtx(e, r), B(r, {
        code: P.too_small,
        type: "bigint",
        minimum: i.value,
        inclusive: i.inclusive,
        message: i.message
      }), s.dirty()) : i.kind === "max" ? (i.inclusive ? e.data > i.value : e.data >= i.value) && (r = this._getOrReturnCtx(e, r), B(r, {
        code: P.too_big,
        type: "bigint",
        maximum: i.value,
        inclusive: i.inclusive,
        message: i.message
      }), s.dirty()) : i.kind === "multipleOf" ? e.data % i.value !== BigInt(0) && (r = this._getOrReturnCtx(e, r), B(r, {
        code: P.not_multiple_of,
        multipleOf: i.value,
        message: i.message
      }), s.dirty()) : ye.assertNever(i);
    return { status: s.value, value: e.data };
  }
  gte(e, t) {
    return this.setLimit("min", e, !0, ee.toString(t));
  }
  gt(e, t) {
    return this.setLimit("min", e, !1, ee.toString(t));
  }
  lte(e, t) {
    return this.setLimit("max", e, !0, ee.toString(t));
  }
  lt(e, t) {
    return this.setLimit("max", e, !1, ee.toString(t));
  }
  setLimit(e, t, r, s) {
    return new Mn({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind: e,
          value: t,
          inclusive: r,
          message: ee.toString(s)
        }
      ]
    });
  }
  _addCheck(e) {
    return new Mn({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  positive(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !1,
      message: ee.toString(e)
    });
  }
  negative(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !1,
      message: ee.toString(e)
    });
  }
  nonpositive(e) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: !0,
      message: ee.toString(e)
    });
  }
  nonnegative(e) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: !0,
      message: ee.toString(e)
    });
  }
  multipleOf(e, t) {
    return this._addCheck({
      kind: "multipleOf",
      value: e,
      message: ee.toString(t)
    });
  }
  get minValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e;
  }
  get maxValue() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e;
  }
}
Mn.create = (n) => {
  var e;
  return new Mn({
    checks: [],
    typeName: ie.ZodBigInt,
    coerce: (e = n == null ? void 0 : n.coerce) !== null && e !== void 0 ? e : !1,
    ...ce(n)
  });
};
class vs extends he {
  _parse(e) {
    if (this._def.coerce && (e.data = !!e.data), this._getType(e) !== U.boolean) {
      const r = this._getOrReturnCtx(e);
      return B(r, {
        code: P.invalid_type,
        expected: U.boolean,
        received: r.parsedType
      }), oe;
    }
    return st(e.data);
  }
}
vs.create = (n) => new vs({
  typeName: ie.ZodBoolean,
  coerce: (n == null ? void 0 : n.coerce) || !1,
  ...ce(n)
});
class tr extends he {
  _parse(e) {
    if (this._def.coerce && (e.data = new Date(e.data)), this._getType(e) !== U.date) {
      const i = this._getOrReturnCtx(e);
      return B(i, {
        code: P.invalid_type,
        expected: U.date,
        received: i.parsedType
      }), oe;
    }
    if (isNaN(e.data.getTime())) {
      const i = this._getOrReturnCtx(e);
      return B(i, {
        code: P.invalid_date
      }), oe;
    }
    const r = new Qe();
    let s;
    for (const i of this._def.checks)
      i.kind === "min" ? e.data.getTime() < i.value && (s = this._getOrReturnCtx(e, s), B(s, {
        code: P.too_small,
        message: i.message,
        inclusive: !0,
        exact: !1,
        minimum: i.value,
        type: "date"
      }), r.dirty()) : i.kind === "max" ? e.data.getTime() > i.value && (s = this._getOrReturnCtx(e, s), B(s, {
        code: P.too_big,
        message: i.message,
        inclusive: !0,
        exact: !1,
        maximum: i.value,
        type: "date"
      }), r.dirty()) : ye.assertNever(i);
    return {
      status: r.value,
      value: new Date(e.data.getTime())
    };
  }
  _addCheck(e) {
    return new tr({
      ...this._def,
      checks: [...this._def.checks, e]
    });
  }
  min(e, t) {
    return this._addCheck({
      kind: "min",
      value: e.getTime(),
      message: ee.toString(t)
    });
  }
  max(e, t) {
    return this._addCheck({
      kind: "max",
      value: e.getTime(),
      message: ee.toString(t)
    });
  }
  get minDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "min" && (e === null || t.value > e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
  get maxDate() {
    let e = null;
    for (const t of this._def.checks)
      t.kind === "max" && (e === null || t.value < e) && (e = t.value);
    return e != null ? new Date(e) : null;
  }
}
tr.create = (n) => new tr({
  checks: [],
  coerce: (n == null ? void 0 : n.coerce) || !1,
  typeName: ie.ZodDate,
  ...ce(n)
});
class Qi extends he {
  _parse(e) {
    if (this._getType(e) !== U.symbol) {
      const r = this._getOrReturnCtx(e);
      return B(r, {
        code: P.invalid_type,
        expected: U.symbol,
        received: r.parsedType
      }), oe;
    }
    return st(e.data);
  }
}
Qi.create = (n) => new Qi({
  typeName: ie.ZodSymbol,
  ...ce(n)
});
class xs extends he {
  _parse(e) {
    if (this._getType(e) !== U.undefined) {
      const r = this._getOrReturnCtx(e);
      return B(r, {
        code: P.invalid_type,
        expected: U.undefined,
        received: r.parsedType
      }), oe;
    }
    return st(e.data);
  }
}
xs.create = (n) => new xs({
  typeName: ie.ZodUndefined,
  ...ce(n)
});
class ks extends he {
  _parse(e) {
    if (this._getType(e) !== U.null) {
      const r = this._getOrReturnCtx(e);
      return B(r, {
        code: P.invalid_type,
        expected: U.null,
        received: r.parsedType
      }), oe;
    }
    return st(e.data);
  }
}
ks.create = (n) => new ks({
  typeName: ie.ZodNull,
  ...ce(n)
});
class Rr extends he {
  constructor() {
    super(...arguments), this._any = !0;
  }
  _parse(e) {
    return st(e.data);
  }
}
Rr.create = (n) => new Rr({
  typeName: ie.ZodAny,
  ...ce(n)
});
class Kn extends he {
  constructor() {
    super(...arguments), this._unknown = !0;
  }
  _parse(e) {
    return st(e.data);
  }
}
Kn.create = (n) => new Kn({
  typeName: ie.ZodUnknown,
  ...ce(n)
});
class Xt extends he {
  _parse(e) {
    const t = this._getOrReturnCtx(e);
    return B(t, {
      code: P.invalid_type,
      expected: U.never,
      received: t.parsedType
    }), oe;
  }
}
Xt.create = (n) => new Xt({
  typeName: ie.ZodNever,
  ...ce(n)
});
class Xi extends he {
  _parse(e) {
    if (this._getType(e) !== U.undefined) {
      const r = this._getOrReturnCtx(e);
      return B(r, {
        code: P.invalid_type,
        expected: U.void,
        received: r.parsedType
      }), oe;
    }
    return st(e.data);
  }
}
Xi.create = (n) => new Xi({
  typeName: ie.ZodVoid,
  ...ce(n)
});
class Tt extends he {
  _parse(e) {
    const { ctx: t, status: r } = this._processInputParams(e), s = this._def;
    if (t.parsedType !== U.array)
      return B(t, {
        code: P.invalid_type,
        expected: U.array,
        received: t.parsedType
      }), oe;
    if (s.exactLength !== null) {
      const o = t.data.length > s.exactLength.value, a = t.data.length < s.exactLength.value;
      (o || a) && (B(t, {
        code: o ? P.too_big : P.too_small,
        minimum: a ? s.exactLength.value : void 0,
        maximum: o ? s.exactLength.value : void 0,
        type: "array",
        inclusive: !0,
        exact: !0,
        message: s.exactLength.message
      }), r.dirty());
    }
    if (s.minLength !== null && t.data.length < s.minLength.value && (B(t, {
      code: P.too_small,
      minimum: s.minLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.minLength.message
    }), r.dirty()), s.maxLength !== null && t.data.length > s.maxLength.value && (B(t, {
      code: P.too_big,
      maximum: s.maxLength.value,
      type: "array",
      inclusive: !0,
      exact: !1,
      message: s.maxLength.message
    }), r.dirty()), t.common.async)
      return Promise.all([...t.data].map((o, a) => s.type._parseAsync(new Ft(t, o, t.path, a)))).then((o) => Qe.mergeArray(r, o));
    const i = [...t.data].map((o, a) => s.type._parseSync(new Ft(t, o, t.path, a)));
    return Qe.mergeArray(r, i);
  }
  get element() {
    return this._def.type;
  }
  min(e, t) {
    return new Tt({
      ...this._def,
      minLength: { value: e, message: ee.toString(t) }
    });
  }
  max(e, t) {
    return new Tt({
      ...this._def,
      maxLength: { value: e, message: ee.toString(t) }
    });
  }
  length(e, t) {
    return new Tt({
      ...this._def,
      exactLength: { value: e, message: ee.toString(t) }
    });
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
Tt.create = (n, e) => new Tt({
  type: n,
  minLength: null,
  maxLength: null,
  exactLength: null,
  typeName: ie.ZodArray,
  ...ce(e)
});
function mr(n) {
  if (n instanceof Ie) {
    const e = {};
    for (const t in n.shape) {
      const r = n.shape[t];
      e[t] = Vt.create(mr(r));
    }
    return new Ie({
      ...n._def,
      shape: () => e
    });
  } else return n instanceof Tt ? new Tt({
    ...n._def,
    type: mr(n.element)
  }) : n instanceof Vt ? Vt.create(mr(n.unwrap())) : n instanceof An ? An.create(mr(n.unwrap())) : n instanceof Bt ? Bt.create(n.items.map((e) => mr(e))) : n;
}
class Ie extends he {
  constructor() {
    super(...arguments), this._cached = null, this.nonstrict = this.passthrough, this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const e = this._def.shape(), t = ye.objectKeys(e);
    return this._cached = { shape: e, keys: t };
  }
  _parse(e) {
    if (this._getType(e) !== U.object) {
      const c = this._getOrReturnCtx(e);
      return B(c, {
        code: P.invalid_type,
        expected: U.object,
        received: c.parsedType
      }), oe;
    }
    const { status: r, ctx: s } = this._processInputParams(e), { shape: i, keys: o } = this._getCached(), a = [];
    if (!(this._def.catchall instanceof Xt && this._def.unknownKeys === "strip"))
      for (const c in s.data)
        o.includes(c) || a.push(c);
    const l = [];
    for (const c of o) {
      const d = i[c], f = s.data[c];
      l.push({
        key: { status: "valid", value: c },
        value: d._parse(new Ft(s, f, s.path, c)),
        alwaysSet: c in s.data
      });
    }
    if (this._def.catchall instanceof Xt) {
      const c = this._def.unknownKeys;
      if (c === "passthrough")
        for (const d of a)
          l.push({
            key: { status: "valid", value: d },
            value: { status: "valid", value: s.data[d] }
          });
      else if (c === "strict")
        a.length > 0 && (B(s, {
          code: P.unrecognized_keys,
          keys: a
        }), r.dirty());
      else if (c !== "strip") throw new Error("Internal ZodObject error: invalid unknownKeys value.");
    } else {
      const c = this._def.catchall;
      for (const d of a) {
        const f = s.data[d];
        l.push({
          key: { status: "valid", value: d },
          value: c._parse(
            new Ft(s, f, s.path, d)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: d in s.data
        });
      }
    }
    return s.common.async ? Promise.resolve().then(async () => {
      const c = [];
      for (const d of l) {
        const f = await d.key, h = await d.value;
        c.push({
          key: f,
          value: h,
          alwaysSet: d.alwaysSet
        });
      }
      return c;
    }).then((c) => Qe.mergeObjectSync(r, c)) : Qe.mergeObjectSync(r, l);
  }
  get shape() {
    return this._def.shape();
  }
  strict(e) {
    return ee.errToObj, new Ie({
      ...this._def,
      unknownKeys: "strict",
      ...e !== void 0 ? {
        errorMap: (t, r) => {
          var s, i, o, a;
          const l = (o = (i = (s = this._def).errorMap) === null || i === void 0 ? void 0 : i.call(s, t, r).message) !== null && o !== void 0 ? o : r.defaultError;
          return t.code === "unrecognized_keys" ? {
            message: (a = ee.errToObj(e).message) !== null && a !== void 0 ? a : l
          } : {
            message: l
          };
        }
      } : {}
    });
  }
  strip() {
    return new Ie({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new Ie({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(e) {
    return new Ie({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...e
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(e) {
    return new Ie({
      unknownKeys: e._def.unknownKeys,
      catchall: e._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...e._def.shape()
      }),
      typeName: ie.ZodObject
    });
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(e, t) {
    return this.augment({ [e]: t });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(e) {
    return new Ie({
      ...this._def,
      catchall: e
    });
  }
  pick(e) {
    const t = {};
    return ye.objectKeys(e).forEach((r) => {
      e[r] && this.shape[r] && (t[r] = this.shape[r]);
    }), new Ie({
      ...this._def,
      shape: () => t
    });
  }
  omit(e) {
    const t = {};
    return ye.objectKeys(this.shape).forEach((r) => {
      e[r] || (t[r] = this.shape[r]);
    }), new Ie({
      ...this._def,
      shape: () => t
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return mr(this);
  }
  partial(e) {
    const t = {};
    return ye.objectKeys(this.shape).forEach((r) => {
      const s = this.shape[r];
      e && !e[r] ? t[r] = s : t[r] = s.optional();
    }), new Ie({
      ...this._def,
      shape: () => t
    });
  }
  required(e) {
    const t = {};
    return ye.objectKeys(this.shape).forEach((r) => {
      if (e && !e[r])
        t[r] = this.shape[r];
      else {
        let i = this.shape[r];
        for (; i instanceof Vt; )
          i = i._def.innerType;
        t[r] = i;
      }
    }), new Ie({
      ...this._def,
      shape: () => t
    });
  }
  keyof() {
    return $h(ye.objectKeys(this.shape));
  }
}
Ie.create = (n, e) => new Ie({
  shape: () => n,
  unknownKeys: "strip",
  catchall: Xt.create(),
  typeName: ie.ZodObject,
  ...ce(e)
});
Ie.strictCreate = (n, e) => new Ie({
  shape: () => n,
  unknownKeys: "strict",
  catchall: Xt.create(),
  typeName: ie.ZodObject,
  ...ce(e)
});
Ie.lazycreate = (n, e) => new Ie({
  shape: n,
  unknownKeys: "strip",
  catchall: Xt.create(),
  typeName: ie.ZodObject,
  ...ce(e)
});
class ws extends he {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = this._def.options;
    function s(i) {
      for (const a of i)
        if (a.result.status === "valid")
          return a.result;
      for (const a of i)
        if (a.result.status === "dirty")
          return t.common.issues.push(...a.ctx.common.issues), a.result;
      const o = i.map((a) => new ut(a.ctx.common.issues));
      return B(t, {
        code: P.invalid_union,
        unionErrors: o
      }), oe;
    }
    if (t.common.async)
      return Promise.all(r.map(async (i) => {
        const o = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await i._parseAsync({
            data: t.data,
            path: t.path,
            parent: o
          }),
          ctx: o
        };
      })).then(s);
    {
      let i;
      const o = [];
      for (const l of r) {
        const c = {
          ...t,
          common: {
            ...t.common,
            issues: []
          },
          parent: null
        }, d = l._parseSync({
          data: t.data,
          path: t.path,
          parent: c
        });
        if (d.status === "valid")
          return d;
        d.status === "dirty" && !i && (i = { result: d, ctx: c }), c.common.issues.length && o.push(c.common.issues);
      }
      if (i)
        return t.common.issues.push(...i.ctx.common.issues), i.result;
      const a = o.map((l) => new ut(l));
      return B(t, {
        code: P.invalid_union,
        unionErrors: a
      }), oe;
    }
  }
  get options() {
    return this._def.options;
  }
}
ws.create = (n, e) => new ws({
  options: n,
  typeName: ie.ZodUnion,
  ...ce(e)
});
const Gt = (n) => n instanceof Ss ? Gt(n.schema) : n instanceof _t ? Gt(n.innerType()) : n instanceof As ? [n.value] : n instanceof Sn ? n.options : n instanceof Cs ? ye.objectValues(n.enum) : n instanceof Os ? Gt(n._def.innerType) : n instanceof xs ? [void 0] : n instanceof ks ? [null] : n instanceof Vt ? [void 0, ...Gt(n.unwrap())] : n instanceof An ? [null, ...Gt(n.unwrap())] : n instanceof Tl || n instanceof Ns ? Gt(n.unwrap()) : n instanceof Ts ? Gt(n._def.innerType) : [];
class wo extends he {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== U.object)
      return B(t, {
        code: P.invalid_type,
        expected: U.object,
        received: t.parsedType
      }), oe;
    const r = this.discriminator, s = t.data[r], i = this.optionsMap.get(s);
    return i ? t.common.async ? i._parseAsync({
      data: t.data,
      path: t.path,
      parent: t
    }) : i._parseSync({
      data: t.data,
      path: t.path,
      parent: t
    }) : (B(t, {
      code: P.invalid_union_discriminator,
      options: Array.from(this.optionsMap.keys()),
      path: [r]
    }), oe);
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(e, t, r) {
    const s = /* @__PURE__ */ new Map();
    for (const i of t) {
      const o = Gt(i.shape[e]);
      if (!o.length)
        throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);
      for (const a of o) {
        if (s.has(a))
          throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(a)}`);
        s.set(a, i);
      }
    }
    return new wo({
      typeName: ie.ZodDiscriminatedUnion,
      discriminator: e,
      options: t,
      optionsMap: s,
      ...ce(r)
    });
  }
}
function Ka(n, e) {
  const t = hn(n), r = hn(e);
  if (n === e)
    return { valid: !0, data: n };
  if (t === U.object && r === U.object) {
    const s = ye.objectKeys(e), i = ye.objectKeys(n).filter((a) => s.indexOf(a) !== -1), o = { ...n, ...e };
    for (const a of i) {
      const l = Ka(n[a], e[a]);
      if (!l.valid)
        return { valid: !1 };
      o[a] = l.data;
    }
    return { valid: !0, data: o };
  } else if (t === U.array && r === U.array) {
    if (n.length !== e.length)
      return { valid: !1 };
    const s = [];
    for (let i = 0; i < n.length; i++) {
      const o = n[i], a = e[i], l = Ka(o, a);
      if (!l.valid)
        return { valid: !1 };
      s.push(l.data);
    }
    return { valid: !0, data: s };
  } else return t === U.date && r === U.date && +n == +e ? { valid: !0, data: n } : { valid: !1 };
}
class Es extends he {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = (i, o) => {
      if (Wa(i) || Wa(o))
        return oe;
      const a = Ka(i.value, o.value);
      return a.valid ? ((Ua(i) || Ua(o)) && t.dirty(), { status: t.value, value: a.data }) : (B(r, {
        code: P.invalid_intersection_types
      }), oe);
    };
    return r.common.async ? Promise.all([
      this._def.left._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      }),
      this._def.right._parseAsync({
        data: r.data,
        path: r.path,
        parent: r
      })
    ]).then(([i, o]) => s(i, o)) : s(this._def.left._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }), this._def.right._parseSync({
      data: r.data,
      path: r.path,
      parent: r
    }));
  }
}
Es.create = (n, e, t) => new Es({
  left: n,
  right: e,
  typeName: ie.ZodIntersection,
  ...ce(t)
});
class Bt extends he {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== U.array)
      return B(r, {
        code: P.invalid_type,
        expected: U.array,
        received: r.parsedType
      }), oe;
    if (r.data.length < this._def.items.length)
      return B(r, {
        code: P.too_small,
        minimum: this._def.items.length,
        inclusive: !0,
        exact: !1,
        type: "array"
      }), oe;
    !this._def.rest && r.data.length > this._def.items.length && (B(r, {
      code: P.too_big,
      maximum: this._def.items.length,
      inclusive: !0,
      exact: !1,
      type: "array"
    }), t.dirty());
    const i = [...r.data].map((o, a) => {
      const l = this._def.items[a] || this._def.rest;
      return l ? l._parse(new Ft(r, o, r.path, a)) : null;
    }).filter((o) => !!o);
    return r.common.async ? Promise.all(i).then((o) => Qe.mergeArray(t, o)) : Qe.mergeArray(t, i);
  }
  get items() {
    return this._def.items;
  }
  rest(e) {
    return new Bt({
      ...this._def,
      rest: e
    });
  }
}
Bt.create = (n, e) => {
  if (!Array.isArray(n))
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  return new Bt({
    items: n,
    typeName: ie.ZodTuple,
    rest: null,
    ...ce(e)
  });
};
class Ms extends he {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== U.object)
      return B(r, {
        code: P.invalid_type,
        expected: U.object,
        received: r.parsedType
      }), oe;
    const s = [], i = this._def.keyType, o = this._def.valueType;
    for (const a in r.data)
      s.push({
        key: i._parse(new Ft(r, a, r.path, a)),
        value: o._parse(new Ft(r, r.data[a], r.path, a)),
        alwaysSet: a in r.data
      });
    return r.common.async ? Qe.mergeObjectAsync(t, s) : Qe.mergeObjectSync(t, s);
  }
  get element() {
    return this._def.valueType;
  }
  static create(e, t, r) {
    return t instanceof he ? new Ms({
      keyType: e,
      valueType: t,
      typeName: ie.ZodRecord,
      ...ce(r)
    }) : new Ms({
      keyType: Ct.create(),
      valueType: e,
      typeName: ie.ZodRecord,
      ...ce(t)
    });
  }
}
class eo extends he {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== U.map)
      return B(r, {
        code: P.invalid_type,
        expected: U.map,
        received: r.parsedType
      }), oe;
    const s = this._def.keyType, i = this._def.valueType, o = [...r.data.entries()].map(([a, l], c) => ({
      key: s._parse(new Ft(r, a, r.path, [c, "key"])),
      value: i._parse(new Ft(r, l, r.path, [c, "value"]))
    }));
    if (r.common.async) {
      const a = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const l of o) {
          const c = await l.key, d = await l.value;
          if (c.status === "aborted" || d.status === "aborted")
            return oe;
          (c.status === "dirty" || d.status === "dirty") && t.dirty(), a.set(c.value, d.value);
        }
        return { status: t.value, value: a };
      });
    } else {
      const a = /* @__PURE__ */ new Map();
      for (const l of o) {
        const c = l.key, d = l.value;
        if (c.status === "aborted" || d.status === "aborted")
          return oe;
        (c.status === "dirty" || d.status === "dirty") && t.dirty(), a.set(c.value, d.value);
      }
      return { status: t.value, value: a };
    }
  }
}
eo.create = (n, e, t) => new eo({
  valueType: e,
  keyType: n,
  typeName: ie.ZodMap,
  ...ce(t)
});
class nr extends he {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.parsedType !== U.set)
      return B(r, {
        code: P.invalid_type,
        expected: U.set,
        received: r.parsedType
      }), oe;
    const s = this._def;
    s.minSize !== null && r.data.size < s.minSize.value && (B(r, {
      code: P.too_small,
      minimum: s.minSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.minSize.message
    }), t.dirty()), s.maxSize !== null && r.data.size > s.maxSize.value && (B(r, {
      code: P.too_big,
      maximum: s.maxSize.value,
      type: "set",
      inclusive: !0,
      exact: !1,
      message: s.maxSize.message
    }), t.dirty());
    const i = this._def.valueType;
    function o(l) {
      const c = /* @__PURE__ */ new Set();
      for (const d of l) {
        if (d.status === "aborted")
          return oe;
        d.status === "dirty" && t.dirty(), c.add(d.value);
      }
      return { status: t.value, value: c };
    }
    const a = [...r.data.values()].map((l, c) => i._parse(new Ft(r, l, r.path, c)));
    return r.common.async ? Promise.all(a).then((l) => o(l)) : o(a);
  }
  min(e, t) {
    return new nr({
      ...this._def,
      minSize: { value: e, message: ee.toString(t) }
    });
  }
  max(e, t) {
    return new nr({
      ...this._def,
      maxSize: { value: e, message: ee.toString(t) }
    });
  }
  size(e, t) {
    return this.min(e, t).max(e, t);
  }
  nonempty(e) {
    return this.min(1, e);
  }
}
nr.create = (n, e) => new nr({
  valueType: n,
  minSize: null,
  maxSize: null,
  typeName: ie.ZodSet,
  ...ce(e)
});
class Sr extends he {
  constructor() {
    super(...arguments), this.validate = this.implement;
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== U.function)
      return B(t, {
        code: P.invalid_type,
        expected: U.function,
        received: t.parsedType
      }), oe;
    function r(a, l) {
      return Gi({
        data: a,
        path: t.path,
        errorMaps: [
          t.common.contextualErrorMap,
          t.schemaErrorMap,
          Ji(),
          Ir
        ].filter((c) => !!c),
        issueData: {
          code: P.invalid_arguments,
          argumentsError: l
        }
      });
    }
    function s(a, l) {
      return Gi({
        data: a,
        path: t.path,
        errorMaps: [
          t.common.contextualErrorMap,
          t.schemaErrorMap,
          Ji(),
          Ir
        ].filter((c) => !!c),
        issueData: {
          code: P.invalid_return_type,
          returnTypeError: l
        }
      });
    }
    const i = { errorMap: t.common.contextualErrorMap }, o = t.data;
    if (this._def.returns instanceof Dr) {
      const a = this;
      return st(async function(...l) {
        const c = new ut([]), d = await a._def.args.parseAsync(l, i).catch((p) => {
          throw c.addIssue(r(l, p)), c;
        }), f = await Reflect.apply(o, this, d);
        return await a._def.returns._def.type.parseAsync(f, i).catch((p) => {
          throw c.addIssue(s(f, p)), c;
        });
      });
    } else {
      const a = this;
      return st(function(...l) {
        const c = a._def.args.safeParse(l, i);
        if (!c.success)
          throw new ut([r(l, c.error)]);
        const d = Reflect.apply(o, this, c.data), f = a._def.returns.safeParse(d, i);
        if (!f.success)
          throw new ut([s(d, f.error)]);
        return f.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...e) {
    return new Sr({
      ...this._def,
      args: Bt.create(e).rest(Kn.create())
    });
  }
  returns(e) {
    return new Sr({
      ...this._def,
      returns: e
    });
  }
  implement(e) {
    return this.parse(e);
  }
  strictImplement(e) {
    return this.parse(e);
  }
  static create(e, t, r) {
    return new Sr({
      args: e || Bt.create([]).rest(Kn.create()),
      returns: t || Kn.create(),
      typeName: ie.ZodFunction,
      ...ce(r)
    });
  }
}
class Ss extends he {
  get schema() {
    return this._def.getter();
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    return this._def.getter()._parse({ data: t.data, path: t.path, parent: t });
  }
}
Ss.create = (n, e) => new Ss({
  getter: n,
  typeName: ie.ZodLazy,
  ...ce(e)
});
class As extends he {
  _parse(e) {
    if (e.data !== this._def.value) {
      const t = this._getOrReturnCtx(e);
      return B(t, {
        received: t.data,
        code: P.invalid_literal,
        expected: this._def.value
      }), oe;
    }
    return { status: "valid", value: e.data };
  }
  get value() {
    return this._def.value;
  }
}
As.create = (n, e) => new As({
  value: n,
  typeName: ie.ZodLiteral,
  ...ce(e)
});
function $h(n, e) {
  return new Sn({
    values: n,
    typeName: ie.ZodEnum,
    ...ce(e)
  });
}
class Sn extends he {
  constructor() {
    super(...arguments), Kr.set(this, void 0);
  }
  _parse(e) {
    if (typeof e.data != "string") {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return B(t, {
        expected: ye.joinValues(r),
        received: t.parsedType,
        code: P.invalid_type
      }), oe;
    }
    if (Yi(this, Kr) || Rh(this, Kr, new Set(this._def.values)), !Yi(this, Kr).has(e.data)) {
      const t = this._getOrReturnCtx(e), r = this._def.values;
      return B(t, {
        received: t.data,
        code: P.invalid_enum_value,
        options: r
      }), oe;
    }
    return st(e.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Values() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  get Enum() {
    const e = {};
    for (const t of this._def.values)
      e[t] = t;
    return e;
  }
  extract(e, t = this._def) {
    return Sn.create(e, {
      ...this._def,
      ...t
    });
  }
  exclude(e, t = this._def) {
    return Sn.create(this.options.filter((r) => !e.includes(r)), {
      ...this._def,
      ...t
    });
  }
}
Kr = /* @__PURE__ */ new WeakMap();
Sn.create = $h;
class Cs extends he {
  constructor() {
    super(...arguments), qr.set(this, void 0);
  }
  _parse(e) {
    const t = ye.getValidEnumValues(this._def.values), r = this._getOrReturnCtx(e);
    if (r.parsedType !== U.string && r.parsedType !== U.number) {
      const s = ye.objectValues(t);
      return B(r, {
        expected: ye.joinValues(s),
        received: r.parsedType,
        code: P.invalid_type
      }), oe;
    }
    if (Yi(this, qr) || Rh(this, qr, new Set(ye.getValidEnumValues(this._def.values))), !Yi(this, qr).has(e.data)) {
      const s = ye.objectValues(t);
      return B(r, {
        received: r.data,
        code: P.invalid_enum_value,
        options: s
      }), oe;
    }
    return st(e.data);
  }
  get enum() {
    return this._def.values;
  }
}
qr = /* @__PURE__ */ new WeakMap();
Cs.create = (n, e) => new Cs({
  values: n,
  typeName: ie.ZodNativeEnum,
  ...ce(e)
});
class Dr extends he {
  unwrap() {
    return this._def.type;
  }
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    if (t.parsedType !== U.promise && t.common.async === !1)
      return B(t, {
        code: P.invalid_type,
        expected: U.promise,
        received: t.parsedType
      }), oe;
    const r = t.parsedType === U.promise ? t.data : Promise.resolve(t.data);
    return st(r.then((s) => this._def.type.parseAsync(s, {
      path: t.path,
      errorMap: t.common.contextualErrorMap
    })));
  }
}
Dr.create = (n, e) => new Dr({
  type: n,
  typeName: ie.ZodPromise,
  ...ce(e)
});
class _t extends he {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ie.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e), s = this._def.effect || null, i = {
      addIssue: (o) => {
        B(r, o), o.fatal ? t.abort() : t.dirty();
      },
      get path() {
        return r.path;
      }
    };
    if (i.addIssue = i.addIssue.bind(i), s.type === "preprocess") {
      const o = s.transform(r.data, i);
      if (r.common.async)
        return Promise.resolve(o).then(async (a) => {
          if (t.value === "aborted")
            return oe;
          const l = await this._def.schema._parseAsync({
            data: a,
            path: r.path,
            parent: r
          });
          return l.status === "aborted" ? oe : l.status === "dirty" || t.value === "dirty" ? vr(l.value) : l;
        });
      {
        if (t.value === "aborted")
          return oe;
        const a = this._def.schema._parseSync({
          data: o,
          path: r.path,
          parent: r
        });
        return a.status === "aborted" ? oe : a.status === "dirty" || t.value === "dirty" ? vr(a.value) : a;
      }
    }
    if (s.type === "refinement") {
      const o = (a) => {
        const l = s.refinement(a, i);
        if (r.common.async)
          return Promise.resolve(l);
        if (l instanceof Promise)
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        return a;
      };
      if (r.common.async === !1) {
        const a = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return a.status === "aborted" ? oe : (a.status === "dirty" && t.dirty(), o(a.value), { status: t.value, value: a.value });
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((a) => a.status === "aborted" ? oe : (a.status === "dirty" && t.dirty(), o(a.value).then(() => ({ status: t.value, value: a.value }))));
    }
    if (s.type === "transform")
      if (r.common.async === !1) {
        const o = this._def.schema._parseSync({
          data: r.data,
          path: r.path,
          parent: r
        });
        if (!ys(o))
          return o;
        const a = s.transform(o.value, i);
        if (a instanceof Promise)
          throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");
        return { status: t.value, value: a };
      } else
        return this._def.schema._parseAsync({ data: r.data, path: r.path, parent: r }).then((o) => ys(o) ? Promise.resolve(s.transform(o.value, i)).then((a) => ({ status: t.value, value: a })) : o);
    ye.assertNever(s);
  }
}
_t.create = (n, e, t) => new _t({
  schema: n,
  typeName: ie.ZodEffects,
  effect: e,
  ...ce(t)
});
_t.createWithPreprocess = (n, e, t) => new _t({
  schema: e,
  effect: { type: "preprocess", transform: n },
  typeName: ie.ZodEffects,
  ...ce(t)
});
class Vt extends he {
  _parse(e) {
    return this._getType(e) === U.undefined ? st(void 0) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Vt.create = (n, e) => new Vt({
  innerType: n,
  typeName: ie.ZodOptional,
  ...ce(e)
});
class An extends he {
  _parse(e) {
    return this._getType(e) === U.null ? st(null) : this._def.innerType._parse(e);
  }
  unwrap() {
    return this._def.innerType;
  }
}
An.create = (n, e) => new An({
  innerType: n,
  typeName: ie.ZodNullable,
  ...ce(e)
});
class Os extends he {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e);
    let r = t.data;
    return t.parsedType === U.undefined && (r = this._def.defaultValue()), this._def.innerType._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
Os.create = (n, e) => new Os({
  innerType: n,
  typeName: ie.ZodDefault,
  defaultValue: typeof e.default == "function" ? e.default : () => e.default,
  ...ce(e)
});
class Ts extends he {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = {
      ...t,
      common: {
        ...t.common,
        issues: []
      }
    }, s = this._def.innerType._parse({
      data: r.data,
      path: r.path,
      parent: {
        ...r
      }
    });
    return bs(s) ? s.then((i) => ({
      status: "valid",
      value: i.status === "valid" ? i.value : this._def.catchValue({
        get error() {
          return new ut(r.common.issues);
        },
        input: r.data
      })
    })) : {
      status: "valid",
      value: s.status === "valid" ? s.value : this._def.catchValue({
        get error() {
          return new ut(r.common.issues);
        },
        input: r.data
      })
    };
  }
  removeCatch() {
    return this._def.innerType;
  }
}
Ts.create = (n, e) => new Ts({
  innerType: n,
  typeName: ie.ZodCatch,
  catchValue: typeof e.catch == "function" ? e.catch : () => e.catch,
  ...ce(e)
});
class to extends he {
  _parse(e) {
    if (this._getType(e) !== U.nan) {
      const r = this._getOrReturnCtx(e);
      return B(r, {
        code: P.invalid_type,
        expected: U.nan,
        received: r.parsedType
      }), oe;
    }
    return { status: "valid", value: e.data };
  }
}
to.create = (n) => new to({
  typeName: ie.ZodNaN,
  ...ce(n)
});
const C3 = Symbol("zod_brand");
class Tl extends he {
  _parse(e) {
    const { ctx: t } = this._processInputParams(e), r = t.data;
    return this._def.type._parse({
      data: r,
      path: t.path,
      parent: t
    });
  }
  unwrap() {
    return this._def.type;
  }
}
class Ps extends he {
  _parse(e) {
    const { status: t, ctx: r } = this._processInputParams(e);
    if (r.common.async)
      return (async () => {
        const i = await this._def.in._parseAsync({
          data: r.data,
          path: r.path,
          parent: r
        });
        return i.status === "aborted" ? oe : i.status === "dirty" ? (t.dirty(), vr(i.value)) : this._def.out._parseAsync({
          data: i.value,
          path: r.path,
          parent: r
        });
      })();
    {
      const s = this._def.in._parseSync({
        data: r.data,
        path: r.path,
        parent: r
      });
      return s.status === "aborted" ? oe : s.status === "dirty" ? (t.dirty(), {
        status: "dirty",
        value: s.value
      }) : this._def.out._parseSync({
        data: s.value,
        path: r.path,
        parent: r
      });
    }
  }
  static create(e, t) {
    return new Ps({
      in: e,
      out: t,
      typeName: ie.ZodPipeline
    });
  }
}
class Ns extends he {
  _parse(e) {
    const t = this._def.innerType._parse(e), r = (s) => (ys(s) && (s.value = Object.freeze(s.value)), s);
    return bs(t) ? t.then((s) => r(s)) : r(t);
  }
  unwrap() {
    return this._def.innerType;
  }
}
Ns.create = (n, e) => new Ns({
  innerType: n,
  typeName: ie.ZodReadonly,
  ...ce(e)
});
function Zh(n, e = {}, t) {
  return n ? Rr.create().superRefine((r, s) => {
    var i, o;
    if (!n(r)) {
      const a = typeof e == "function" ? e(r) : typeof e == "string" ? { message: e } : e, l = (o = (i = a.fatal) !== null && i !== void 0 ? i : t) !== null && o !== void 0 ? o : !0, c = typeof a == "string" ? { message: a } : a;
      s.addIssue({ code: "custom", ...c, fatal: l });
    }
  }) : Rr.create();
}
const O3 = {
  object: Ie.lazycreate
};
var ie;
(function(n) {
  n.ZodString = "ZodString", n.ZodNumber = "ZodNumber", n.ZodNaN = "ZodNaN", n.ZodBigInt = "ZodBigInt", n.ZodBoolean = "ZodBoolean", n.ZodDate = "ZodDate", n.ZodSymbol = "ZodSymbol", n.ZodUndefined = "ZodUndefined", n.ZodNull = "ZodNull", n.ZodAny = "ZodAny", n.ZodUnknown = "ZodUnknown", n.ZodNever = "ZodNever", n.ZodVoid = "ZodVoid", n.ZodArray = "ZodArray", n.ZodObject = "ZodObject", n.ZodUnion = "ZodUnion", n.ZodDiscriminatedUnion = "ZodDiscriminatedUnion", n.ZodIntersection = "ZodIntersection", n.ZodTuple = "ZodTuple", n.ZodRecord = "ZodRecord", n.ZodMap = "ZodMap", n.ZodSet = "ZodSet", n.ZodFunction = "ZodFunction", n.ZodLazy = "ZodLazy", n.ZodLiteral = "ZodLiteral", n.ZodEnum = "ZodEnum", n.ZodEffects = "ZodEffects", n.ZodNativeEnum = "ZodNativeEnum", n.ZodOptional = "ZodOptional", n.ZodNullable = "ZodNullable", n.ZodDefault = "ZodDefault", n.ZodCatch = "ZodCatch", n.ZodPromise = "ZodPromise", n.ZodBranded = "ZodBranded", n.ZodPipeline = "ZodPipeline", n.ZodReadonly = "ZodReadonly";
})(ie || (ie = {}));
const T3 = (n, e = {
  message: `Input not instance of ${n.name}`
}) => Zh((t) => t instanceof n, e), Vh = Ct.create, zh = En.create, N3 = to.create, _3 = Mn.create, jh = vs.create, H3 = tr.create, I3 = Qi.create, R3 = xs.create, D3 = ks.create, L3 = Rr.create, P3 = Kn.create, $3 = Xt.create, Z3 = Xi.create, V3 = Tt.create, z3 = Ie.create, j3 = Ie.strictCreate, F3 = ws.create, B3 = wo.create, W3 = Es.create, U3 = Bt.create, K3 = Ms.create, q3 = eo.create, J3 = nr.create, G3 = Sr.create, Y3 = Ss.create, Q3 = As.create, X3 = Sn.create, eE = Cs.create, tE = Dr.create, Ou = _t.create, nE = Vt.create, rE = An.create, sE = _t.createWithPreprocess, iE = Ps.create, oE = () => Vh().optional(), aE = () => zh().optional(), lE = () => jh().optional(), cE = {
  string: (n) => Ct.create({ ...n, coerce: !0 }),
  number: (n) => En.create({ ...n, coerce: !0 }),
  boolean: (n) => vs.create({
    ...n,
    coerce: !0
  }),
  bigint: (n) => Mn.create({ ...n, coerce: !0 }),
  date: (n) => tr.create({ ...n, coerce: !0 })
}, dE = oe;
var ra = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: Ir,
  setErrorMap: d3,
  getErrorMap: Ji,
  makeIssue: Gi,
  EMPTY_PATH: u3,
  addIssueToContext: B,
  ParseStatus: Qe,
  INVALID: oe,
  DIRTY: vr,
  OK: st,
  isAborted: Wa,
  isDirty: Ua,
  isValid: ys,
  isAsync: bs,
  get util() {
    return ye;
  },
  get objectUtil() {
    return Ba;
  },
  ZodParsedType: U,
  getParsedType: hn,
  ZodType: he,
  datetimeRegex: Ph,
  ZodString: Ct,
  ZodNumber: En,
  ZodBigInt: Mn,
  ZodBoolean: vs,
  ZodDate: tr,
  ZodSymbol: Qi,
  ZodUndefined: xs,
  ZodNull: ks,
  ZodAny: Rr,
  ZodUnknown: Kn,
  ZodNever: Xt,
  ZodVoid: Xi,
  ZodArray: Tt,
  ZodObject: Ie,
  ZodUnion: ws,
  ZodDiscriminatedUnion: wo,
  ZodIntersection: Es,
  ZodTuple: Bt,
  ZodRecord: Ms,
  ZodMap: eo,
  ZodSet: nr,
  ZodFunction: Sr,
  ZodLazy: Ss,
  ZodLiteral: As,
  ZodEnum: Sn,
  ZodNativeEnum: Cs,
  ZodPromise: Dr,
  ZodEffects: _t,
  ZodTransformer: _t,
  ZodOptional: Vt,
  ZodNullable: An,
  ZodDefault: Os,
  ZodCatch: Ts,
  ZodNaN: to,
  BRAND: C3,
  ZodBranded: Tl,
  ZodPipeline: Ps,
  ZodReadonly: Ns,
  custom: Zh,
  Schema: he,
  ZodSchema: he,
  late: O3,
  get ZodFirstPartyTypeKind() {
    return ie;
  },
  coerce: cE,
  any: L3,
  array: V3,
  bigint: _3,
  boolean: jh,
  date: H3,
  discriminatedUnion: B3,
  effect: Ou,
  enum: X3,
  function: G3,
  instanceof: T3,
  intersection: W3,
  lazy: Y3,
  literal: Q3,
  map: q3,
  nan: N3,
  nativeEnum: eE,
  never: $3,
  null: D3,
  nullable: rE,
  number: zh,
  object: z3,
  oboolean: lE,
  onumber: aE,
  optional: nE,
  ostring: oE,
  pipeline: iE,
  preprocess: sE,
  promise: tE,
  record: K3,
  set: J3,
  strictObject: j3,
  string: Vh,
  symbol: I3,
  transformer: Ou,
  tuple: U3,
  undefined: R3,
  union: F3,
  unknown: P3,
  void: Z3,
  NEVER: dE,
  ZodIssueCode: P,
  quotelessJson: c3,
  ZodError: ut
});
const Tu = ({ className: n, ...e }) => /* @__PURE__ */ g("div", { className: T("animate-pulse rounded-md bg-secondary", n), ...e }), Fh = ir(
  "inline-flex items-center justify-center rounded text-sm font-medium transition-colors hover:bg-secondary/60 hover:text-secondary-foreground focus-visible:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-secondary data-[state=on]:text-secondary-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline: "border bg-transparent hover:bg-secondary/60 hover:text-secondary-foreground"
      },
      size: {
        sm: "size-8",
        md: "size-9",
        lg: "size-10"
      }
    },
    defaultVariants: {
      variant: "default",
      size: "md"
    }
  }
), Ze = S(({ className: n, variant: e, size: t, ...r }, s) => /* @__PURE__ */ g(
  Iu.Root,
  {
    ref: s,
    className: T(Fh({ variant: e, size: t, className: n })),
    ...r
  }
));
Ze.displayName = Iu.Root.displayName;
const EM = Cr.Provider, uE = Cr.Root, fE = Cr.Trigger, Bh = S(({ className: n, children: e, sideOffset: t = 6, ...r }, s) => /* @__PURE__ */ g(Cr.Portal, { children: /* @__PURE__ */ g(
  Cr.Content,
  {
    ref: s,
    sideOffset: t,
    className: T(
      "z-50 overflow-hidden rounded bg-primary px-3 py-1.5 text-xs text-primary-foreground shadow-sm animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      n
    ),
    ...r,
    children: e
  }
) }));
Bh.displayName = Cr.Content.displayName;
const Ce = ({ content: n, children: e, ...t }) => /* @__PURE__ */ ge(uE, { children: [
  /* @__PURE__ */ g(fE, { asChild: !0, children: e }),
  /* @__PURE__ */ g(Bh, { ...t, children: n })
] }), hE = ra.object({
  src: ra.string(),
  alt: ra.string().optional()
}), pE = ({ onInsert: n }) => {
  const e = tp({
    resolver: h8(hE),
    defaultValues: { src: "", alt: "" }
  }), t = (r) => {
    n(r), e.reset();
  };
  return /* @__PURE__ */ g(np, { ...e, children: /* @__PURE__ */ ge("form", { className: "space-y-3", onSubmit: e.handleSubmit(t), children: [
    /* @__PURE__ */ g("p", { className: "prose prose-sm prose-zinc dark:prose-invert", children: "Insert an image from an external URL and use it on your resume." }),
    /* @__PURE__ */ g(
      Xc,
      {
        name: "src",
        control: e.control,
        render: ({ field: r }) => /* @__PURE__ */ ge(da, { children: [
          /* @__PURE__ */ g(ua, { children: "URL" }),
          /* @__PURE__ */ g(fa, { children: /* @__PURE__ */ g(si, { placeholder: "https://...", ...r }) }),
          /* @__PURE__ */ g(Ff, {})
        ] })
      }
    ),
    /* @__PURE__ */ g(
      Xc,
      {
        name: "alt",
        control: e.control,
        render: ({ field: r }) => /* @__PURE__ */ ge(da, { children: [
          /* @__PURE__ */ g(ua, { children: "Description" }),
          /* @__PURE__ */ g(fa, { children: /* @__PURE__ */ g(si, { ...r }) })
        ] })
      }
    ),
    /* @__PURE__ */ g("div", { className: "!mt-5 ml-auto max-w-fit", children: /* @__PURE__ */ g(Mt, { type: "submit", variant: "secondary", size: "sm", children: "Insert Image" }) })
  ] }) });
}, mE = ({ editor: n }) => {
  const e = Jr(() => {
    const t = n.getAttributes("link").href, r = window.prompt("URL", t);
    if (r !== null) {
      if (r === "") {
        n.chain().focus().extendMarkRange("link").unsetLink().run();
        return;
      }
      n.chain().focus().extendMarkRange("link").setLink({ href: r }).run();
    }
  }, [n]);
  return /* @__PURE__ */ ge("div", { className: "flex flex-wrap gap-0.5 border p-1", children: [
    /* @__PURE__ */ g(Ce, { content: "Bold", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("bold"),
        disabled: !n.can().chain().toggleBold().run(),
        onPressedChange: () => n.chain().focus().toggleBold().run(),
        children: /* @__PURE__ */ g(af, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Italic", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("italic"),
        disabled: !n.can().chain().focus().toggleItalic().run(),
        onPressedChange: () => n.chain().focus().toggleItalic().run(),
        children: /* @__PURE__ */ g(ff, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Strikethrough", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("strike"),
        disabled: !n.can().chain().focus().toggleStrike().run(),
        onPressedChange: () => n.chain().focus().toggleStrike().run(),
        children: /* @__PURE__ */ g(pf, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Underline", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("underline"),
        disabled: !n.can().chain().focus().toggleUnderline().run(),
        onPressedChange: () => n.chain().focus().toggleUnderline().run(),
        children: /* @__PURE__ */ g(tf, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Highlight", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("highlight"),
        disabled: !n.can().chain().focus().toggleHighlight().run(),
        onPressedChange: () => n.chain().focus().toggleHighlight().run(),
        children: /* @__PURE__ */ g(Uu, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Hyperlink", children: /* @__PURE__ */ g(Mt, { type: "button", size: "sm", variant: "ghost", className: "px-2", onClick: e, children: /* @__PURE__ */ g(Ju, {}) }) }),
    /* @__PURE__ */ g(Ce, { content: "Inline Code", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("code"),
        disabled: !n.can().chain().focus().toggleCode().run(),
        onPressedChange: () => n.chain().focus().toggleCode().run(),
        children: /* @__PURE__ */ g(Fu, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Code Block", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("codeBlock"),
        disabled: !n.can().chain().focus().toggleCodeBlock().run(),
        onPressedChange: () => n.chain().focus().toggleCodeBlock().run(),
        children: /* @__PURE__ */ g(ju, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Heading 1", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("heading", { level: 1 }),
        disabled: !n.can().chain().focus().toggleHeading({ level: 1 }).run(),
        onPressedChange: () => n.chain().focus().toggleHeading({ level: 1 }).run(),
        children: /* @__PURE__ */ g(lf, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Heading 2", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("heading", { level: 2 }),
        disabled: !n.can().chain().focus().toggleHeading({ level: 2 }).run(),
        onPressedChange: () => n.chain().focus().toggleHeading({ level: 2 }).run(),
        children: /* @__PURE__ */ g(df, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Heading 3", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("heading", { level: 3 }),
        disabled: !n.can().chain().focus().toggleHeading({ level: 3 }).run(),
        onPressedChange: () => n.chain().focus().toggleHeading({ level: 3 }).run(),
        children: /* @__PURE__ */ g(cf, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Paragraph", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("paragraph"),
        onPressedChange: () => n.chain().focus().setParagraph().run(),
        children: /* @__PURE__ */ g(ef, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Align Left", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive({ textAlign: "left" }),
        disabled: !n.can().chain().focus().setTextAlign("left").run(),
        onPressedChange: () => n.chain().focus().setTextAlign("left").run(),
        children: /* @__PURE__ */ g(sf, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Align Center", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive({ textAlign: "center" }),
        disabled: !n.can().chain().focus().setTextAlign("center").run(),
        onPressedChange: () => n.chain().focus().setTextAlign("center").run(),
        children: /* @__PURE__ */ g(nf, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Align Right", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive({ textAlign: "right" }),
        disabled: !n.can().chain().focus().setTextAlign("right").run(),
        onPressedChange: () => n.chain().focus().setTextAlign("right").run(),
        children: /* @__PURE__ */ g(of, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Align Justify", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive({ textAlign: "justify" }),
        disabled: !n.can().chain().focus().setTextAlign("justify").run(),
        onPressedChange: () => n.chain().focus().setTextAlign("justify").run(),
        children: /* @__PURE__ */ g(rf, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Bullet List", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("bulletList"),
        disabled: !n.can().chain().focus().toggleBulletList().run(),
        onPressedChange: () => n.chain().focus().toggleBulletList().run(),
        children: /* @__PURE__ */ g(Gu, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Numbered List", children: /* @__PURE__ */ g(
      Ze,
      {
        size: "sm",
        pressed: n.isActive("orderedList"),
        disabled: !n.can().chain().focus().toggleOrderedList().run(),
        onPressedChange: () => n.chain().focus().toggleOrderedList().run(),
        children: /* @__PURE__ */ g(Yu, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Outdent", children: /* @__PURE__ */ g(
      Mt,
      {
        size: "sm",
        variant: "ghost",
        className: "px-2",
        disabled: !n.can().chain().focus().liftListItem("listItem").run(),
        onClick: () => n.chain().focus().liftListItem("listItem").run(),
        children: /* @__PURE__ */ g(hf, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Indent", children: /* @__PURE__ */ g(
      Mt,
      {
        size: "sm",
        variant: "ghost",
        className: "px-2",
        disabled: !n.can().chain().focus().sinkListItem("listItem").run(),
        onClick: () => n.chain().focus().sinkListItem("listItem").run(),
        children: /* @__PURE__ */ g(uf, {})
      }
    ) }),
    /* @__PURE__ */ ge(Zf, { children: [
      /* @__PURE__ */ g(Ce, { content: "Insert Image", children: /* @__PURE__ */ g(Yh, { asChild: !0, children: /* @__PURE__ */ g(Mt, { size: "sm", variant: "ghost", className: "px-2", children: /* @__PURE__ */ g(Ku, {}) }) }) }),
      /* @__PURE__ */ g(nl, { className: "w-80", children: /* @__PURE__ */ g(pE, { onInsert: (t) => n.chain().focus().setImage(t).run() }) })
    ] }),
    /* @__PURE__ */ g(Ce, { content: "Insert Break Line", children: /* @__PURE__ */ g(
      Mt,
      {
        size: "sm",
        variant: "ghost",
        className: "px-2",
        disabled: !n.can().chain().focus().setHardBreak().run(),
        onClick: () => n.chain().focus().setHardBreak().run(),
        children: /* @__PURE__ */ g(qu, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Insert Horizontal Rule", children: /* @__PURE__ */ g(
      Mt,
      {
        size: "sm",
        variant: "ghost",
        className: "px-2",
        disabled: !n.can().chain().focus().setHorizontalRule().run(),
        onClick: () => n.chain().focus().setHorizontalRule().run(),
        children: /* @__PURE__ */ g(Xu, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Undo", children: /* @__PURE__ */ g(
      Mt,
      {
        size: "sm",
        variant: "ghost",
        className: "px-2",
        disabled: !n.can().undo(),
        onClick: () => n.chain().focus().undo().run(),
        children: /* @__PURE__ */ g(Vu, {})
      }
    ) }),
    /* @__PURE__ */ g(Ce, { content: "Redo", children: /* @__PURE__ */ g(
      Mt,
      {
        size: "sm",
        variant: "ghost",
        className: "px-2",
        disabled: !n.can().redo(),
        onClick: () => n.chain().focus().redo().run(),
        children: /* @__PURE__ */ g(Zu, {})
      }
    ) })
  ] });
}, gE = S(
  ({ content: n, onChange: e, footer: t, hideToolbar: r = !1, className: s, editorClassName: i, ...o }, a) => {
    const l = iw({
      extensions: [
        l3,
        yk,
        Fk,
        mk,
        jk.configure({ types: ["heading", "paragraph"] }),
        zk.extend({ inclusive: !1 }).configure({ openOnClick: !1 })
      ],
      editorProps: {
        attributes: {
          class: T(
            "prose prose-sm prose-zinc max-h-[200px] max-w-none overflow-y-scroll dark:prose-invert focus:outline-none [&_*]:my-2",
            i
          )
        }
      },
      content: n,
      parseOptions: { preserveWhitespace: "full" },
      onUpdate: ({ editor: c }) => e == null ? void 0 : e(c.getHTML())
    });
    return l ? /* @__PURE__ */ ge("div", { children: [
      !r && /* @__PURE__ */ g(mE, { editor: l }),
      /* @__PURE__ */ g(
        Yk,
        {
          editor: l,
          className: T(
            "grid min-h-[160px] w-full rounded-sm border bg-transparent px-3 py-2 text-sm placeholder:opacity-80 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-primary disabled:cursor-not-allowed disabled:opacity-50",
            r && "pt-2",
            s
          ),
          ...o
        }
      ),
      t == null ? void 0 : t(l)
    ] }) : /* @__PURE__ */ ge("div", { className: "space-y-2", children: [
      /* @__PURE__ */ g(Tu, { className: T("h-[42px] w-full", r && "hidden") }),
      /* @__PURE__ */ g(Tu, { className: "h-[90px] w-full" })
    ] });
  }
);
gE.displayName = "RichInput";
const yE = S(
  ({
    type: n = "scroll",
    orientation: e = "vertical",
    hideScrollbar: t = !1,
    className: r,
    children: s,
    ...i
  }, o) => /* @__PURE__ */ ge(
    Vn.Root,
    {
      ref: o,
      type: n,
      className: T("relative overflow-hidden", r),
      ...i,
      children: [
        /* @__PURE__ */ g(Vn.Viewport, { className: "size-full rounded-[inherit]", children: s }),
        /* @__PURE__ */ g(Wh, { orientation: e, className: T(t && "opacity-0") }),
        /* @__PURE__ */ g(Vn.Corner, {})
      ]
    }
  )
);
yE.displayName = Vn.Root.displayName;
const Wh = S(({ className: n, orientation: e, ...t }, r) => /* @__PURE__ */ g(
  Vn.ScrollAreaScrollbar,
  {
    ref: r,
    orientation: e,
    className: T(
      "flex touch-none select-none transition-colors",
      e === "vertical" && "h-full w-2.5 border-l border-l-transparent p-px",
      e === "horizontal" && "h-2.5 border-t border-t-transparent p-px",
      n
    ),
    ...t,
    children: /* @__PURE__ */ g(Vn.ScrollAreaThumb, { className: "relative flex-1 rounded-full bg-border" })
  }
));
Wh.displayName = Vn.ScrollAreaScrollbar.displayName;
const MM = ze.Root, SM = ze.Group, AM = ze.Value, bE = S(({ className: n, children: e, ...t }, r) => /* @__PURE__ */ ge(
  ze.Trigger,
  {
    ref: r,
    className: T(
      "flex h-9 w-full items-center justify-between rounded border border-border bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-secondary-foreground focus:outline-none focus:ring-1 focus:ring-primary disabled:cursor-not-allowed disabled:opacity-50",
      n
    ),
    ...t,
    children: [
      e,
      /* @__PURE__ */ g(ze.Icon, { asChild: !0, children: /* @__PURE__ */ g(zu, { className: "size-4 opacity-50" }) })
    ]
  }
));
bE.displayName = ze.Trigger.displayName;
const vE = S(({ className: n, children: e, position: t = "popper", ...r }, s) => /* @__PURE__ */ g(ze.Portal, { children: /* @__PURE__ */ g(
  ze.Content,
  {
    ref: s,
    className: T(
      "relative z-50 min-w-32 overflow-hidden rounded border border-border bg-background text-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      t === "popper" && "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
      n
    ),
    position: t,
    ...r,
    children: /* @__PURE__ */ g(
      ze.Viewport,
      {
        className: T(
          "p-1",
          t === "popper" && "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        ),
        children: e
      }
    )
  }
) }));
vE.displayName = ze.Content.displayName;
const xE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ze.Label,
  {
    ref: t,
    className: T("px-2 py-1.5 text-sm font-semibold", n),
    ...e
  }
));
xE.displayName = ze.Label.displayName;
const kE = S(({ className: n, children: e, ...t }, r) => /* @__PURE__ */ ge(
  ze.Item,
  {
    ref: r,
    className: T(
      "relative flex w-full cursor-default select-none items-center rounded py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-secondary focus:text-secondary-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      n
    ),
    ...t,
    children: [
      /* @__PURE__ */ g("span", { className: "absolute right-2 flex size-3.5 items-center justify-center", children: /* @__PURE__ */ g(ze.ItemIndicator, { children: /* @__PURE__ */ g(sr, { className: "size-4" }) }) }),
      /* @__PURE__ */ g(ze.ItemText, { children: e })
    ]
  }
));
kE.displayName = ze.Item.displayName;
const wE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ze.Separator,
  {
    ref: t,
    className: T("-mx-1 my-1 h-px opacity-60", n),
    ...e
  }
));
wE.displayName = ze.Separator.displayName;
const EE = S(({ className: n, orientation: e = "horizontal", decorative: t = !0, ...r }, s) => /* @__PURE__ */ g(
  Ru.Root,
  {
    ref: s,
    decorative: t,
    orientation: e,
    className: T(
      "shrink-0 bg-border",
      e === "horizontal" ? "h-px w-full" : "h-full w-px",
      n
    ),
    ...r
  }
));
EE.displayName = Ru.Root.displayName;
const ME = ir(
  "fixed z-50 gap-4 bg-background p-4 shadow-sm transition ease-in-out focus:outline-none data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 w-screen border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom: "inset-x-0 bottom-0 w-screen border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-screen w-11/12 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right: "inset-y-0 right-0 h-screen w-11/12 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm"
      }
    },
    defaultVariants: {
      side: "right"
    }
  }
), CM = ke.Root, OM = ke.Trigger, TM = ke.Close, Uh = (n) => /* @__PURE__ */ g(ke.Portal, { ...n });
Uh.displayName = ke.Portal.displayName;
const Kh = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ke.Overlay,
  {
    className: T(
      "fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      n
    ),
    ...e,
    ref: t
  }
));
Kh.displayName = ke.Overlay.displayName;
const SE = S(({ side: n = "right", className: e, children: t, showClose: r = !0, ...s }, i) => /* @__PURE__ */ ge(Uh, { children: [
  /* @__PURE__ */ g(Kh, {}),
  /* @__PURE__ */ ge(ke.Content, { ref: i, className: T(ME({ side: n }), e), ...s, children: [
    t,
    r && /* @__PURE__ */ ge(ke.Close, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary", children: [
      /* @__PURE__ */ g(no, { className: "size-4" }),
      /* @__PURE__ */ g("span", { className: "sr-only", children: "Close" })
    ] })
  ] })
] }));
SE.displayName = ke.Content.displayName;
const AE = ({ className: n, ...e }) => /* @__PURE__ */ g("div", { className: T("flex flex-col space-y-2 text-center sm:text-left", n), ...e });
AE.displayName = "SheetHeader";
const CE = ({ className: n, ...e }) => /* @__PURE__ */ g(
  "div",
  {
    className: T("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", n),
    ...e
  }
);
CE.displayName = "SheetFooter";
const OE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ke.Title,
  {
    ref: t,
    className: T("text-base font-medium text-foreground", n),
    ...e
  }
));
OE.displayName = ke.Title.displayName;
const TE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(ke.Description, { ref: t, className: T("opacity-60", n), ...e }));
TE.displayName = ke.Description.displayName;
const NE = ({
  className: n,
  defaultValue: e = !1,
  ...t
}) => {
  const { value: r, setValue: s } = o8(e);
  return rs(() => {
    const i = (a) => {
      a.key === "Control" && s(!0);
    }, o = (a) => {
      a.key === "Control" && s(!1);
    };
    return document.addEventListener("keydown", i), document.addEventListener("keyup", o), () => {
      document.removeEventListener("keydown", i), document.removeEventListener("keyup", o);
    };
  }, [s]), /* @__PURE__ */ g(
    "span",
    {
      className: T(
        "ml-auto text-xs tracking-widest transition-opacity",
        r ? "scale-100 opacity-60" : "scale-0 opacity-0",
        n
      ),
      ...t
    }
  );
};
NE.displayName = "KeyboardShortcut";
const _E = S(({ className: n, ...e }, t) => /* @__PURE__ */ ge(
  Fr.Root,
  {
    ref: t,
    className: T("relative flex w-full touch-none select-none items-center", n),
    ...e,
    children: [
      /* @__PURE__ */ g(Fr.Track, { className: "relative h-2.5 w-full grow overflow-hidden rounded-full bg-secondary", children: /* @__PURE__ */ g(Fr.Range, { className: "absolute h-full bg-primary" }) }),
      /* @__PURE__ */ g(Fr.Thumb, { className: "block size-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" })
    ]
  }
));
_E.displayName = Fr.Root.displayName;
const HE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  oa.Root,
  {
    ref: t,
    className: T(
      "peer inline-flex h-[24px] w-[44px] shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-border",
      n
    ),
    ...e,
    children: /* @__PURE__ */ g(
      oa.Thumb,
      {
        className: T(
          "pointer-events-none block size-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
        )
      }
    )
  }
));
HE.displayName = oa.Root.displayName;
const NM = rr.Root, IE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  rr.List,
  {
    ref: t,
    className: T(
      "inline-flex h-9 items-center justify-center rounded bg-secondary-accent px-0.5 text-foreground",
      n
    ),
    ...e
  }
));
IE.displayName = rr.List.displayName;
const RE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  rr.Trigger,
  {
    ref: t,
    className: T(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-4 py-1 text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-0 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      n
    ),
    ...e
  }
));
RE.displayName = rr.Trigger.displayName;
const DE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  rr.Content,
  {
    ref: t,
    className: T("mt-3 focus-visible:outline-none focus-visible:ring-0", n),
    ...e
  }
));
DE.displayName = rr.Content.displayName;
const LE = ir(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        primary: "group/primary border-primary bg-primary text-primary-foreground",
        secondary: "group/secondary border-secondary bg-secondary text-secondary-foreground",
        error: "group/error border-error bg-error text-error-foreground",
        warning: "group/warning border-warning bg-warning text-warning-foreground",
        info: "group/info border-info bg-info text-info-foreground",
        success: "group/success border-success bg-success text-success-foreground"
      }
    },
    defaultVariants: {
      variant: "default"
    }
  }
), _M = ht.Provider, PE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ht.Viewport,
  {
    ref: t,
    className: T(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      n
    ),
    ...e
  }
));
PE.displayName = ht.Viewport.displayName;
const $E = S(({ className: n, variant: e, ...t }, r) => /* @__PURE__ */ g(
  ht.Root,
  {
    ref: r,
    className: T(LE({ variant: e }), n),
    ...t
  }
));
$E.displayName = ht.Root.displayName;
const ZE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ht.Action,
  {
    ref: t,
    className: T(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-primary disabled:pointer-events-none disabled:opacity-50",
      "group/primary:border-border/40 group-hover/primary:border-primary/30 group-hover/primary:bg-primary group-hover/primary:text-primary-foreground group-focus/primary:ring-primary",
      "group/secondary:border-border/40 group-hover/secondary:border-secondary/30 group-hover/secondary:bg-secondary group-hover/secondary:text-secondary-foreground group-focus/secondary:ring-secondary",
      "group/error:border-border/40 group-hover/error:border-error/30 group-hover/error:bg-error group-hover/error:text-error-foreground group-focus/error:ring-error",
      "group/warning:border-border/40 group-hover/warning:border-warning/30 group-hover/warning:bg-warning group-hover/warning:text-warning-foreground group-focus/warning:ring-warning",
      "group/info:border-border/40 group-hover/info:border-info/30 group-hover/info:bg-info group-hover/info:text-info-foreground group-focus/info:ring-info",
      "group/success:border-border/40 group-hover/success:border-success/30 group-hover/success:bg-success group-hover/success:text-success-foreground group-focus/success:ring-success",
      n
    ),
    ...e
  }
));
ZE.displayName = ht.Action.displayName;
const VE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ht.Close,
  {
    ref: t,
    className: T(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100",
      "group/primary:text-primary group-hover/primary:text-primary-foreground group-focus/primary:ring-primary group-focus/primary:ring-offset-primary",
      "group/secondary:text-secondary group-hover/secondary:text-secondary-foreground group-focus/secondary:ring-secondary group-focus/secondary:ring-offset-secondary",
      "group/error:text-error group-hover/error:text-error-foreground group-focus/error:ring-error group-focus/error:ring-offset-error",
      "group/warning:text-warning group-hover/warning:text-warning-foreground group-focus/warning:ring-warning group-focus/warning:ring-offset-warning",
      "group/info:text-info group-hover/info:text-info-foreground group-focus/info:ring-info group-focus/info:ring-offset-info",
      "group/success:text-success group-hover/success:text-success-foreground group-focus/success:ring-success group-focus/success:ring-offset-success",
      n
    ),
    "toast-close": "",
    ...e,
    children: /* @__PURE__ */ g(no, { className: "size-4" })
  }
));
VE.displayName = ht.Close.displayName;
const zE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ht.Title,
  {
    ref: t,
    className: T("text-sm font-semibold [&+div]:text-xs", n),
    ...e
  }
));
zE.displayName = ht.Title.displayName;
const jE = S(({ className: n, ...e }, t) => /* @__PURE__ */ g(
  ht.Description,
  {
    ref: t,
    className: T("line-clamp-2 text-sm opacity-90", n),
    ...e
  }
));
jE.displayName = ht.Description.displayName;
const HM = Du.Root, IM = S(({ className: n, variant: e, size: t, ...r }, s) => /* @__PURE__ */ g(
  Du.Item,
  {
    ref: s,
    className: T(
      Fh({ variant: e, size: t, className: n }),
      "rounded-none first:rounded-l last:rounded-r"
    ),
    ...r
  }
));
export {
  GE as Accordion,
  $6 as AccordionContent,
  L6 as AccordionItem,
  P6 as AccordionTrigger,
  z6 as Alert,
  F6 as AlertDescription,
  YE as AlertDialog,
  J6 as AlertDialogAction,
  G6 as AlertDialogCancel,
  B6 as AlertDialogContent,
  q6 as AlertDialogDescription,
  U6 as AlertDialogFooter,
  W6 as AlertDialogHeader,
  Ef as AlertDialogOverlay,
  wf as AlertDialogPortal,
  K6 as AlertDialogTitle,
  QE as AlertDialogTrigger,
  j6 as AlertTitle,
  XE as AspectRatio,
  Y6 as Avatar,
  X6 as AvatarFallback,
  Q6 as AvatarImage,
  eM as Badge,
  tM as BadgeInput,
  Mt as Button,
  ty as Card,
  iy as CardContent,
  sy as CardDescription,
  oy as CardFooter,
  ny as CardHeader,
  ry as CardTitle,
  ay as Checkbox,
  iM as Combobox,
  tl as Command,
  rM as CommandDialog,
  Lf as CommandEmpty,
  Pf as CommandGroup,
  Rf as CommandInput,
  $f as CommandItem,
  Df as CommandList,
  Py as CommandSeparator,
  oM as ContextMenu,
  Wy as ContextMenuCheckboxItem,
  Fy as ContextMenuContent,
  lM as ContextMenuGroup,
  By as ContextMenuItem,
  Ky as ContextMenuLabel,
  cM as ContextMenuPortal,
  uM as ContextMenuRadioGroup,
  Uy as ContextMenuRadioItem,
  qy as ContextMenuSeparator,
  dM as ContextMenuSub,
  jy as ContextMenuSubContent,
  zy as ContextMenuSubTrigger,
  aM as ContextMenuTrigger,
  Hy as Dialog,
  If as DialogContent,
  Ly as DialogDescription,
  Ry as DialogFooter,
  Iy as DialogHeader,
  Hf as DialogOverlay,
  _f as DialogPortal,
  Dy as DialogTitle,
  nM as DialogTrigger,
  fM as DropdownMenu,
  e8 as DropdownMenuCheckboxItem,
  Qy as DropdownMenuContent,
  pM as DropdownMenuGroup,
  Xy as DropdownMenuItem,
  n8 as DropdownMenuLabel,
  Jy as DropdownMenuPortal,
  gM as DropdownMenuRadioGroup,
  t8 as DropdownMenuRadioItem,
  r8 as DropdownMenuSeparator,
  mM as DropdownMenuSub,
  Yy as DropdownMenuSubContent,
  Gy as DropdownMenuSubTrigger,
  hM as DropdownMenuTrigger,
  LM as Form,
  fa as FormControl,
  l8 as FormDescription,
  Xc as FormField,
  da as FormItem,
  ua as FormLabel,
  Ff as FormMessage,
  yM as HoverCard,
  c8 as HoverCardContent,
  bM as HoverCardTrigger,
  si as Input,
  NE as KeyboardShortcut,
  jf as Label,
  kM as Panel,
  xM as PanelGroup,
  wM as PanelResizeHandle,
  Zf as Popover,
  sM as PopoverArrow,
  nl as PopoverContent,
  $y as PopoverTrigger,
  vM as Portal,
  gE as RichInput,
  yE as ScrollArea,
  Wh as ScrollBar,
  MM as Select,
  vE as SelectContent,
  SM as SelectGroup,
  kE as SelectItem,
  xE as SelectLabel,
  wE as SelectSeparator,
  bE as SelectTrigger,
  AM as SelectValue,
  EE as Separator,
  CM as Sheet,
  TM as SheetClose,
  SE as SheetContent,
  TE as SheetDescription,
  CE as SheetFooter,
  AE as SheetHeader,
  Kh as SheetOverlay,
  Uh as SheetPortal,
  OE as SheetTitle,
  OM as SheetTrigger,
  Tu as Skeleton,
  _E as Slider,
  HE as Switch,
  NM as Tabs,
  DE as TabsContent,
  IE as TabsList,
  RE as TabsTrigger,
  $E as Toast,
  ZE as ToastAction,
  VE as ToastClose,
  jE as ToastDescription,
  _M as ToastProvider,
  zE as ToastTitle,
  PE as ToastViewport,
  Ze as Toggle,
  HM as ToggleGroup,
  IM as ToggleGroupItem,
  Ce as Tooltip,
  Bh as TooltipContent,
  EM as TooltipProvider,
  uE as TooltipRoot,
  fE as TooltipTrigger,
  V6 as alertVariants,
  ey as badgeVariants,
  Qa as buttonVariants,
  a8 as labelVariants,
  ME as sheetVariants,
  LE as toastVariants,
  Fh as toggleVariants
};
