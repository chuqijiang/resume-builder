Object.defineProperty(exports, '__esModule', { value: true });

const core$1 = require('@opentelemetry/core');
const instrumentationConnect = require('@opentelemetry/instrumentation-connect');
const core = require('@sentry/core');
const opentelemetry = require('@sentry/opentelemetry');
const utils = require('@sentry/utils');

const _connectIntegration = (() => {
  return {
    name: 'Connect',
    setupOnce() {
      opentelemetry.addOpenTelemetryInstrumentation(new instrumentationConnect.ConnectInstrumentation({}));
    },
  };
}) ;

const connectIntegration = core.defineIntegration(_connectIntegration);

// eslint-disable-next-line @typescript-eslint/no-explicit-any
function connectErrorMiddleware(err, req, res, next) {
  core.captureException(err);
  next(err);
}

const setupConnectErrorHandler = (app) => {
  app.use(connectErrorMiddleware);

  if (!core$1.isWrapped(app.use) && core.isEnabled()) {
    utils.consoleSandbox(() => {
      // eslint-disable-next-line no-console
      console.warn(
        '[Sentry] Connect is not instrumented. This is likely because you required/imported connect before calling `Sentry.init()`.',
      );
    });
  }
};

exports.connectIntegration = connectIntegration;
exports.setupConnectErrorHandler = setupConnectErrorHandler;
//# sourceMappingURL=connect.js.map
