var {
  _optionalChain
} = require('@sentry/utils');

Object.defineProperty(exports, '__esModule', { value: true });

const core = require('@sentry/core');
const utils = require('@sentry/utils');
const worker_threads = require('worker_threads');
const common = require('./common.js');

// This string is a placeholder that gets overwritten with the worker code.
const base64WorkerScript = 'LyohIEBzZW50cnkvbm9kZSA4LjIuMSAoYmIyZjFiYykgfCBodHRwczovL2dpdGh1Yi5jb20vZ2V0c2VudHJ5L3NlbnRyeS1qYXZhc2NyaXB0ICovCmltcG9ydHtTZXNzaW9uIGFzIGV9ZnJvbSJub2RlOmluc3BlY3Rvci9wcm9taXNlcyI7aW1wb3J0e3dvcmtlckRhdGEgYXMgbixwYXJlbnRQb3J0IGFzIHR9ZnJvbSJ3b3JrZXJfdGhyZWFkcyI7aW1wb3J0e3Bvc2l4IGFzIG8sc2VwIGFzIHJ9ZnJvbSJwYXRoIjtjb25zdCBpPTUwLHM9Ij8iLGM9L1woZXJyb3I6ICguKilcKS8sYT0vY2FwdHVyZU1lc3NhZ2V8Y2FwdHVyZUV4Y2VwdGlvbi87Y29uc3QgdT0vXihcUys6XFx8XC8/KShbXHNcU10qPykoKD86XC57MSwyfXxbXi9cXF0rP3wpKFwuW14uL1xcXSp8KSkoPzpbL1xcXSopJC87ZnVuY3Rpb24gZihlKXtjb25zdCBuPWZ1bmN0aW9uKGUpe2NvbnN0IG49ZS5sZW5ndGg+MTAyND9gPHRydW5jYXRlZD4ke2Uuc2xpY2UoLTEwMjQpfWA6ZSx0PXUuZXhlYyhuKTtyZXR1cm4gdD90LnNsaWNlKDEpOltdfShlKSx0PW5bMF07bGV0IG89blsxXTtyZXR1cm4gdHx8bz8obyYmKG89by5zbGljZSgwLG8ubGVuZ3RoLTEpKSx0K28pOiIuIn1mdW5jdGlvbiBsKGUsbj0hMSl7cmV0dXJuIShufHxlJiYhZS5zdGFydHNXaXRoKCIvIikmJiFlLm1hdGNoKC9eW0EtWl06LykmJiFlLnN0YXJ0c1dpdGgoIi4iKSYmIWUubWF0Y2goL15bYS16QS1aXShbYS16QS1aMC05LlwtK10pKjpcL1wvLykpJiZ2b2lkIDAhPT1lJiYhZS5pbmNsdWRlcygibm9kZV9tb2R1bGVzLyIpfWZ1bmN0aW9uIGQoZSl7Y29uc3Qgbj0vXlxzKlstXXs0LH0kLyx0PS9hdCAoPzphc3luYyApPyg/OiguKz8pXHMrXCgpPyg/OiguKyk6KFxkKyk6KFxkKyk/fChbXildKykpXCk/LztyZXR1cm4gbz0+e2NvbnN0IHI9by5tYXRjaCh0KTtpZihyKXtsZXQgbix0LG8saSxjO2lmKHJbMV0pe289clsxXTtsZXQgZT1vLmxhc3RJbmRleE9mKCIuIik7aWYoIi4iPT09b1tlLTFdJiZlLS0sZT4wKXtuPW8uc2xpY2UoMCxlKSx0PW8uc2xpY2UoZSsxKTtjb25zdCByPW4uaW5kZXhPZigiLk1vZHVsZSIpO3I+MCYmKG89by5zbGljZShyKzEpLG49bi5zbGljZSgwLHIpKX1pPXZvaWQgMH10JiYoaT1uLGM9dCksIjxhbm9ueW1vdXM+Ij09PXQmJihjPXZvaWQgMCxvPXZvaWQgMCksdm9pZCAwPT09byYmKGM9Y3x8cyxvPWk/YCR7aX0uJHtjfWA6Yyk7bGV0IGE9clsyXSYmclsyXS5zdGFydHNXaXRoKCJmaWxlOi8vIik/clsyXS5zbGljZSg3KTpyWzJdO2NvbnN0IHU9Im5hdGl2ZSI9PT1yWzVdO3JldHVybiBhJiZhLm1hdGNoKC9cL1tBLVpdOi8pJiYoYT1hLnNsaWNlKDEpKSxhfHwhcls1XXx8dXx8KGE9cls1XSkse2ZpbGVuYW1lOmEsbW9kdWxlOmU/ZShhKTp2b2lkIDAsZnVuY3Rpb246byxsaW5lbm86cGFyc2VJbnQoclszXSwxMCl8fHZvaWQgMCxjb2xubzpwYXJzZUludChyWzRdLDEwKXx8dm9pZCAwLGluX2FwcDpsKGEsdSl9fWlmKG8ubWF0Y2gobikpcmV0dXJue2ZpbGVuYW1lOm99fX1mdW5jdGlvbiBwKGUpe3JldHVybiBlLnJlcGxhY2UoL15bQS1aXTovLCIiKS5yZXBsYWNlKC9cXC9nLCIvIil9Y29uc3QgZz1uLG09ZnVuY3Rpb24oLi4uZSl7Y29uc3Qgbj1lLnNvcnQoKChlLG4pPT5lWzBdLW5bMF0pKS5tYXAoKGU9PmVbMV0pKTtyZXR1cm4oZSx0PTAsbz0wKT0+e2NvbnN0IHI9W10sdT1lLnNwbGl0KCJcbiIpO2ZvcihsZXQgZT10O2U8dS5sZW5ndGg7ZSsrKXtjb25zdCB0PXVbZV07aWYodC5sZW5ndGg+MTAyNCljb250aW51ZTtjb25zdCBzPWMudGVzdCh0KT90LnJlcGxhY2UoYywiJDEiKTp0O2lmKCFzLm1hdGNoKC9cUypFcnJvcjogLykpe2Zvcihjb25zdCBlIG9mIG4pe2NvbnN0IG49ZShzKTtpZihuKXtyLnB1c2gobik7YnJlYWt9fWlmKHIubGVuZ3RoPj1pK28pYnJlYWt9fXJldHVybiBmdW5jdGlvbihlKXtpZighZS5sZW5ndGgpcmV0dXJuW107Y29uc3Qgbj1BcnJheS5mcm9tKGUpOy9zZW50cnlXcmFwcGVkLy50ZXN0KG5bbi5sZW5ndGgtMV0uZnVuY3Rpb258fCIiKSYmbi5wb3AoKTtuLnJldmVyc2UoKSxhLnRlc3QobltuLmxlbmd0aC0xXS5mdW5jdGlvbnx8IiIpJiYobi5wb3AoKSxhLnRlc3QobltuLmxlbmd0aC0xXS5mdW5jdGlvbnx8IiIpJiZuLnBvcCgpKTtyZXR1cm4gbi5zbGljZSgwLGkpLm1hcCgoZT0+KHsuLi5lLGZpbGVuYW1lOmUuZmlsZW5hbWV8fG5bbi5sZW5ndGgtMV0uZmlsZW5hbWUsZnVuY3Rpb246ZS5mdW5jdGlvbnx8c30pKSl9KHIuc2xpY2UobykpfX0oWzkwLGQoZnVuY3Rpb24oZT0ocHJvY2Vzcy5hcmd2WzFdP2YocHJvY2Vzcy5hcmd2WzFdKTpwcm9jZXNzLmN3ZCgpKSxuPSJcXCI9PT1yKXtjb25zdCB0PW4/cChlKTplO3JldHVybiBlPT57aWYoIWUpcmV0dXJuO2NvbnN0IHI9bj9wKGUpOmU7bGV0e2RpcjppLGJhc2U6cyxleHQ6Y309by5wYXJzZShyKTsiLmpzIiE9PWMmJiIubWpzIiE9PWMmJiIuY2pzIiE9PWN8fChzPXMuc2xpY2UoMCwtMSpjLmxlbmd0aCkpLGl8fChpPSIuIik7Y29uc3QgYT1pLmxhc3RJbmRleE9mKCIvbm9kZV9tb2R1bGVzIik7aWYoYT4tMSlyZXR1cm5gJHtpLnNsaWNlKGErMTQpLnJlcGxhY2UoL1wvL2csIi4iKX06JHtzfWA7aWYoaS5zdGFydHNXaXRoKHQpKXtsZXQgZT1pLnNsaWNlKHQubGVuZ3RoKzEpLnJlcGxhY2UoL1wvL2csIi4iKTtyZXR1cm4gZSYmKGUrPSI6IiksZSs9cyxlfXJldHVybiBzfX0oZy5iYXNlUGF0aCkpXSk7ZnVuY3Rpb24gYiguLi5lKXtnLmRlYnVnJiZjb25zb2xlLmxvZygiW0xvY2FsVmFyaWFibGVzIFdvcmtlcl0iLC4uLmUpfWFzeW5jIGZ1bmN0aW9uIHYoZSxuLHQsbyl7Y29uc3Qgcj1hd2FpdCBlLnBvc3QoIlJ1bnRpbWUuZ2V0UHJvcGVydGllcyIse29iamVjdElkOm4sb3duUHJvcGVydGllczohMH0pO29bdF09ci5yZXN1bHQuZmlsdGVyKChlPT4ibGVuZ3RoIiE9PWUubmFtZSYmIWlzTmFOKHBhcnNlSW50KGUubmFtZSwxMCkpKSkuc29ydCgoKGUsbik9PnBhcnNlSW50KGUubmFtZSwxMCktcGFyc2VJbnQobi5uYW1lLDEwKSkpLm1hcCgoZT0+ZS52YWx1ZT8udmFsdWUpKX1hc3luYyBmdW5jdGlvbiAkKGUsbix0LG8pe2NvbnN0IHI9YXdhaXQgZS5wb3N0KCJSdW50aW1lLmdldFByb3BlcnRpZXMiLHtvYmplY3RJZDpuLG93blByb3BlcnRpZXM6ITB9KTtvW3RdPXIucmVzdWx0Lm1hcCgoZT0+W2UubmFtZSxlLnZhbHVlPy52YWx1ZV0pKS5yZWR1Y2UoKChlLFtuLHRdKT0+KGVbbl09dCxlKSkse30pfWZ1bmN0aW9uIHcoZSxuKXtlLnZhbHVlJiYoInZhbHVlImluIGUudmFsdWU/dm9pZCAwPT09ZS52YWx1ZS52YWx1ZXx8bnVsbD09PWUudmFsdWUudmFsdWU/bltlLm5hbWVdPWA8JHtlLnZhbHVlLnZhbHVlfT5gOm5bZS5uYW1lXT1lLnZhbHVlLnZhbHVlOiJkZXNjcmlwdGlvbiJpbiBlLnZhbHVlJiYiZnVuY3Rpb24iIT09ZS52YWx1ZS50eXBlP25bZS5uYW1lXT1gPCR7ZS52YWx1ZS5kZXNjcmlwdGlvbn0+YDoidW5kZWZpbmVkIj09PWUudmFsdWUudHlwZSYmKG5bZS5uYW1lXT0iPHVuZGVmaW5lZD4iKSl9YXN5bmMgZnVuY3Rpb24geShlLG4pe2NvbnN0IHQ9YXdhaXQgZS5wb3N0KCJSdW50aW1lLmdldFByb3BlcnRpZXMiLHtvYmplY3RJZDpuLG93blByb3BlcnRpZXM6ITB9KSxvPXt9O2Zvcihjb25zdCBuIG9mIHQucmVzdWx0KWlmKG4/LnZhbHVlPy5vYmplY3RJZCYmIkFycmF5Ij09PW4/LnZhbHVlLmNsYXNzTmFtZSl7Y29uc3QgdD1uLnZhbHVlLm9iamVjdElkO2F3YWl0IHYoZSx0LG4ubmFtZSxvKX1lbHNlIGlmKG4/LnZhbHVlPy5vYmplY3RJZCYmIk9iamVjdCI9PT1uPy52YWx1ZT8uY2xhc3NOYW1lKXtjb25zdCB0PW4udmFsdWUub2JqZWN0SWQ7YXdhaXQgJChlLHQsbi5uYW1lLG8pfWVsc2Ugbj8udmFsdWUmJncobixvKTtyZXR1cm4gb31sZXQgaDsoYXN5bmMgZnVuY3Rpb24oKXtjb25zdCBuPW5ldyBlO24uY29ubmVjdFRvTWFpblRocmVhZCgpLGIoIkNvbm5lY3RlZCB0byBtYWluIHRocmVhZCIpO2xldCBvPSExO24ub24oIkRlYnVnZ2VyLnJlc3VtZWQiLCgoKT0+e289ITF9KSksbi5vbigiRGVidWdnZXIucGF1c2VkIiwoZT0+e289ITAsYXN5bmMgZnVuY3Rpb24oZSxuLHtyZWFzb246byxkYXRhOnIsY2FsbEZyYW1lczppfSl7aWYoImV4Y2VwdGlvbiIhPT1vJiYicHJvbWlzZVJlamVjdGlvbiIhPT1vKXJldHVybjtoPy4oKTtjb25zdCBzPWZ1bmN0aW9uKGUsbil7aWYodm9pZCAwIT09bilyZXR1cm4gZnVuY3Rpb24oZSl7aWYodm9pZCAwIT09ZSlyZXR1cm4gZS5zbGljZSgtMTApLnJlZHVjZSgoKGUsbik9PmAke2V9LCR7bi5mdW5jdGlvbn0sJHtuLmxpbmVub30sJHtuLmNvbG5vfWApLCIiKX0oZShuLDEpKX0obixyPy5kZXNjcmlwdGlvbik7aWYobnVsbD09cylyZXR1cm47Y29uc3QgYz1bXTtmb3IobGV0IG49MDtuPGkubGVuZ3RoO24rKyl7Y29uc3R7c2NvcGVDaGFpbjp0LGZ1bmN0aW9uTmFtZTpvLHRoaXM6cn09aVtuXSxzPXQuZmluZCgoZT0+ImxvY2FsIj09PWUudHlwZSkpLGE9Imdsb2JhbCIhPT1yLmNsYXNzTmFtZSYmci5jbGFzc05hbWU/YCR7ci5jbGFzc05hbWV9LiR7b31gOm87aWYodm9pZCAwPT09cz8ub2JqZWN0Lm9iamVjdElkKWNbbl09e2Z1bmN0aW9uOmF9O2Vsc2V7Y29uc3QgdD1hd2FpdCB5KGUscy5vYmplY3Qub2JqZWN0SWQpO2Nbbl09e2Z1bmN0aW9uOmEsdmFyczp0fX19dD8ucG9zdE1lc3NhZ2Uoe2V4Y2VwdGlvbkhhc2g6cyxmcmFtZXM6Y30pfShuLG0sZS5wYXJhbXMpLnRoZW4oKCgpPT5vP24ucG9zdCgiRGVidWdnZXIucmVzdW1lIik6UHJvbWlzZS5yZXNvbHZlKCkpLChlPT57fSkpfSkpLGF3YWl0IG4ucG9zdCgiRGVidWdnZXIuZW5hYmxlIik7Y29uc3Qgcj0hMSE9PWcuY2FwdHVyZUFsbEV4Y2VwdGlvbnM7aWYoYXdhaXQgbi5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOnI/ImFsbCI6InVuY2F1Z2h0In0pLHIpe2NvbnN0IGU9Zy5tYXhFeGNlcHRpb25zUGVyU2Vjb25kfHw1MDtoPWZ1bmN0aW9uKGUsbix0KXtsZXQgbz0wLHI9NSxpPTA7cmV0dXJuIHNldEludGVydmFsKCgoKT0+ezA9PT1pP28+ZSYmKHIqPTIsdChyKSxyPjg2NDAwJiYocj04NjQwMCksaT1yKTooaS09MSwwPT09aSYmbigpKSxvPTB9KSwxZTMpLnVucmVmKCksKCk9PntvKz0xfX0oZSwoYXN5bmMoKT0+e2IoIlJhdGUtbGltaXQgbGlmdGVkLiIpLGF3YWl0IG4ucG9zdCgiRGVidWdnZXIuc2V0UGF1c2VPbkV4Y2VwdGlvbnMiLHtzdGF0ZToiYWxsIn0pfSksKGFzeW5jIGU9PntiKGBSYXRlLWxpbWl0IGV4Y2VlZGVkLiBEaXNhYmxpbmcgY2FwdHVyaW5nIG9mIGNhdWdodCBleGNlcHRpb25zIGZvciAke2V9IHNlY29uZHMuYCksYXdhaXQgbi5wb3N0KCJEZWJ1Z2dlci5zZXRQYXVzZU9uRXhjZXB0aW9ucyIse3N0YXRlOiJ1bmNhdWdodCJ9KX0pKX19KSgpLmNhdGNoKChlPT57YigiRmFpbGVkIHRvIHN0YXJ0IGRlYnVnZ2VyIixlKX0pKSxzZXRJbnRlcnZhbCgoKCk9Pnt9KSwxZTQpOw==';

function log(...args) {
  utils.logger.log('[LocalVariables]', ...args);
}

/**
 * Adds local variables to exception frames
 */
const localVariablesAsyncIntegration = core.defineIntegration(((
  integrationOptions = {},
) => {
  const cachedFrames = new utils.LRUMap(20);

  function addLocalVariablesToException(exception) {
    const hash = common.hashFrames(_optionalChain([exception, 'optionalAccess', _ => _.stacktrace, 'optionalAccess', _2 => _2.frames]));

    if (hash === undefined) {
      return;
    }

    // Check if we have local variables for an exception that matches the hash
    // remove is identical to get but also removes the entry from the cache
    const cachedFrame = cachedFrames.remove(hash);

    if (cachedFrame === undefined) {
      return;
    }

    // Filter out frames where the function name is `new Promise` since these are in the error.stack frames
    // but do not appear in the debugger call frames
    const frames = (_optionalChain([exception, 'access', _3 => _3.stacktrace, 'optionalAccess', _4 => _4.frames]) || []).filter(frame => frame.function !== 'new Promise');

    for (let i = 0; i < frames.length; i++) {
      // Sentry frames are in reverse order
      const frameIndex = frames.length - i - 1;

      // Drop out if we run out of frames to match up
      if (!frames[frameIndex] || !cachedFrame[i]) {
        break;
      }

      if (
        // We need to have vars to add
        cachedFrame[i].vars === undefined ||
        // We're not interested in frames that are not in_app because the vars are not relevant
        frames[frameIndex].in_app === false ||
        // The function names need to match
        !common.functionNamesMatch(frames[frameIndex].function, cachedFrame[i].function)
      ) {
        continue;
      }

      frames[frameIndex].vars = cachedFrame[i].vars;
    }
  }

  function addLocalVariablesToEvent(event) {
    for (const exception of _optionalChain([event, 'access', _5 => _5.exception, 'optionalAccess', _6 => _6.values]) || []) {
      addLocalVariablesToException(exception);
    }

    return event;
  }

  async function startInspector() {
    // We load inspector dynamically because on some platforms Node is built without inspector support
    const inspector = await import('inspector');
    if (!inspector.url()) {
      inspector.open(0);
    }
  }

  function startWorker(options) {
    const worker = new worker_threads.Worker(new URL(`data:application/javascript;base64,${base64WorkerScript}`), {
      workerData: options,
      // We don't want any Node args to be passed to the worker
      execArgv: [],
    });

    process.on('exit', () => {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      worker.terminate();
    });

    worker.on('message', ({ exceptionHash, frames }) => {
      cachedFrames.set(exceptionHash, frames);
    });

    worker.once('error', (err) => {
      log('Worker error', err);
    });

    worker.once('exit', (code) => {
      log('Worker exit', code);
    });

    // Ensure this thread can't block app exit
    worker.unref();
  }

  return {
    name: 'LocalVariablesAsync',
    setup(client) {
      const clientOptions = client.getOptions();

      if (!clientOptions.includeLocalVariables) {
        return;
      }

      const options = {
        ...integrationOptions,
        debug: utils.logger.isEnabled(),
      };

      startInspector().then(
        () => {
          try {
            startWorker(options);
          } catch (e) {
            utils.logger.error('Failed to start worker', e);
          }
        },
        e => {
          utils.logger.error('Failed to start inspector', e);
        },
      );
    },
    processEvent(event) {
      return addLocalVariablesToEvent(event);
    },
  };
}) );

exports.base64WorkerScript = base64WorkerScript;
exports.localVariablesAsyncIntegration = localVariablesAsyncIntegration;
//# sourceMappingURL=local-variables-async.js.map
