Object.defineProperty(exports, '__esModule', { value: true });

const api = require('@opentelemetry/api');
const core = require('@sentry/core');
const opentelemetry = require('@sentry/opentelemetry');
const utils = require('@sentry/utils');
const debugBuild = require('../debug-build.js');
const nodeVersion = require('../nodeVersion.js');
const addOriginToSpan = require('../utils/addOriginToSpan.js');

const _nativeNodeFetchIntegration = ((options = {}) => {
  const _breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;
  const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;

  async function getInstrumentation() {
    // Only add NodeFetch if Node >= 18, as previous versions do not support it
    if (nodeVersion.NODE_MAJOR < 18) {
      debugBuild.DEBUG_BUILD && utils.logger.log('NodeFetch is not supported on Node < 18, skipping instrumentation...');
      return;
    }

    try {
      const pkg = await import('opentelemetry-instrumentation-fetch-node');
      return new pkg.FetchInstrumentation({
        ignoreRequestHook: (request) => {
          const url = request.origin;
          return _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);
        },
        onRequest: ({ span }) => {
          _updateSpan(span);

          if (_breadcrumbs) {
            _addRequestBreadcrumb(span);
          }
        },
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      } );
    } catch (error) {
      // Could not load instrumentation
      debugBuild.DEBUG_BUILD && utils.logger.log('Could not load NodeFetch instrumentation.');
    }
  }

  return {
    name: 'NodeFetch',
    setupOnce() {
      // eslint-disable-next-line @typescript-eslint/no-floating-promises
      getInstrumentation().then(instrumentation => {
        if (instrumentation) {
          opentelemetry.addOpenTelemetryInstrumentation(instrumentation);
        }
      });
    },
  };
}) ;

const nativeNodeFetchIntegration = core.defineIntegration(_nativeNodeFetchIntegration);

/** Update the span with data we need. */
function _updateSpan(span) {
  addOriginToSpan.addOriginToSpan(span, 'auto.http.otel.node_fetch');
}

/** Add a breadcrumb for outgoing requests. */
function _addRequestBreadcrumb(span) {
  if (opentelemetry.getSpanKind(span) !== api.SpanKind.CLIENT) {
    return;
  }

  const data = opentelemetry.getRequestSpanData(span);
  core.addBreadcrumb({
    category: 'http',
    data: {
      ...data,
    },
    type: 'http',
  });
}

exports.nativeNodeFetchIntegration = nativeNodeFetchIntegration;
//# sourceMappingURL=node-fetch.js.map
