{"version":3,"file":"node-fetch.js","sources":["../../../src/integrations/node-fetch.ts"],"sourcesContent":["import type { Span } from '@opentelemetry/api';\nimport { SpanKind } from '@opentelemetry/api';\nimport { addBreadcrumb, defineIntegration } from '@sentry/core';\nimport { addOpenTelemetryInstrumentation } from '@sentry/opentelemetry';\nimport { getRequestSpanData, getSpanKind } from '@sentry/opentelemetry';\nimport type { IntegrationFn } from '@sentry/types';\nimport { logger } from '@sentry/utils';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { NODE_MAJOR } from '../nodeVersion';\n\nimport type { FetchInstrumentation } from 'opentelemetry-instrumentation-fetch-node';\n\nimport { addOriginToSpan } from '../utils/addOriginToSpan';\n\ninterface NodeFetchOptions {\n  /**\n   * Whether breadcrumbs should be recorded for requests.\n   * Defaults to true\n   */\n  breadcrumbs?: boolean;\n\n  /**\n   * Do not capture spans or breadcrumbs for outgoing fetch requests to URLs where the given callback returns `true`.\n   * This controls both span & breadcrumb creation - spans will be non recording if tracing is disabled.\n   */\n  ignoreOutgoingRequests?: (url: string) => boolean;\n}\n\nconst _nativeNodeFetchIntegration = ((options: NodeFetchOptions = {}) => {\n  const _breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n  const _ignoreOutgoingRequests = options.ignoreOutgoingRequests;\n\n  async function getInstrumentation(): Promise<FetchInstrumentation | void> {\n    // Only add NodeFetch if Node >= 18, as previous versions do not support it\n    if (NODE_MAJOR < 18) {\n      DEBUG_BUILD && logger.log('NodeFetch is not supported on Node < 18, skipping instrumentation...');\n      return;\n    }\n\n    try {\n      const pkg = await import('opentelemetry-instrumentation-fetch-node');\n      return new pkg.FetchInstrumentation({\n        ignoreRequestHook: (request: { origin?: string }) => {\n          const url = request.origin;\n          return _ignoreOutgoingRequests && url && _ignoreOutgoingRequests(url);\n        },\n        onRequest: ({ span }: { span: Span }) => {\n          _updateSpan(span);\n\n          if (_breadcrumbs) {\n            _addRequestBreadcrumb(span);\n          }\n        },\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      } as any);\n    } catch (error) {\n      // Could not load instrumentation\n      DEBUG_BUILD && logger.log('Could not load NodeFetch instrumentation.');\n    }\n  }\n\n  return {\n    name: 'NodeFetch',\n    setupOnce() {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      getInstrumentation().then(instrumentation => {\n        if (instrumentation) {\n          addOpenTelemetryInstrumentation(instrumentation);\n        }\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const nativeNodeFetchIntegration = defineIntegration(_nativeNodeFetchIntegration);\n\n/** Update the span with data we need. */\nfunction _updateSpan(span: Span): void {\n  addOriginToSpan(span, 'auto.http.otel.node_fetch');\n}\n\n/** Add a breadcrumb for outgoing requests. */\nfunction _addRequestBreadcrumb(span: Span): void {\n  if (getSpanKind(span) !== SpanKind.CLIENT) {\n    return;\n  }\n\n  const data = getRequestSpanData(span);\n  addBreadcrumb({\n    category: 'http',\n    data: {\n      ...data,\n    },\n    type: 'http',\n  });\n}\n"],"names":["NODE_MAJOR","DEBUG_BUILD","logger","addOpenTelemetryInstrumentation","defineIntegration","addOriginToSpan","getSpanKind","SpanKind","getRequestSpanData","addBreadcrumb"],"mappings":";;;;;;;;;;AA4BA,MAAM,2BAAA,IAA+B,CAAC,OAAO,GAAqB,EAAE,KAAK;AACzE,EAAE,MAAM,YAAA,GAAe,OAAO,OAAO,CAAC,WAAA,KAAgB,WAAA,GAAc,IAAA,GAAO,OAAO,CAAC,WAAW,CAAA;AAC9F,EAAE,MAAM,uBAAA,GAA0B,OAAO,CAAC,sBAAsB,CAAA;AAChE;AACA,EAAE,eAAe,kBAAkB,GAAyC;AAC5E;AACA,IAAI,IAAIA,sBAAW,GAAE,EAAE,EAAE;AACzB,MAAMC,0BAAeC,YAAM,CAAC,GAAG,CAAC,sEAAsE,CAAC,CAAA;AACvG,MAAM,OAAM;AACZ,KAAI;AACJ;AACA,IAAI,IAAI;AACR,MAAM,MAAM,GAAI,GAAE,MAAM,OAAO,0CAA0C,CAAC,CAAA;AAC1E,MAAM,OAAO,IAAI,GAAG,CAAC,oBAAoB,CAAC;AAC1C,QAAQ,iBAAiB,EAAE,CAAC,OAAO,KAA0B;AAC7D,UAAU,MAAM,GAAA,GAAM,OAAO,CAAC,MAAM,CAAA;AACpC,UAAU,OAAO,2BAA2B,GAAA,IAAO,uBAAuB,CAAC,GAAG,CAAC,CAAA;AAC/E,SAAS;AACT,QAAQ,SAAS,EAAE,CAAC,EAAE,IAAK,EAAC,KAAqB;AACjD,UAAU,WAAW,CAAC,IAAI,CAAC,CAAA;AAC3B;AACA,UAAU,IAAI,YAAY,EAAE;AAC5B,YAAY,qBAAqB,CAAC,IAAI,CAAC,CAAA;AACvC,WAAU;AACV,SAAS;AACT;AACA,SAAe,CAAA;AACf,KAAM,CAAA,OAAO,KAAK,EAAE;AACpB;AACA,MAAMD,0BAAeC,YAAM,CAAC,GAAG,CAAC,2CAA2C,CAAC,CAAA;AAC5E,KAAI;AACJ,GAAE;AACF;AACA,EAAE,OAAO;AACT,IAAI,IAAI,EAAE,WAAW;AACrB,IAAI,SAAS,GAAG;AAChB;AACA,MAAM,kBAAkB,EAAE,CAAC,IAAI,CAAC,mBAAmB;AACnD,QAAQ,IAAI,eAAe,EAAE;AAC7B,UAAUC,6CAA+B,CAAC,eAAe,CAAC,CAAA;AAC1D,SAAQ;AACR,OAAO,CAAC,CAAA;AACR,KAAK;AACL,GAAG,CAAA;AACH,CAAC,CAAE,EAAA;AACH;MACa,0BAA2B,GAAEC,sBAAiB,CAAC,2BAA2B,EAAC;AACxF;AACA;AACA,SAAS,WAAW,CAAC,IAAI,EAAc;AACvC,EAAEC,+BAAe,CAAC,IAAI,EAAE,2BAA2B,CAAC,CAAA;AACpD,CAAA;AACA;AACA;AACA,SAAS,qBAAqB,CAAC,IAAI,EAAc;AACjD,EAAE,IAAIC,yBAAW,CAAC,IAAI,MAAMC,YAAQ,CAAC,MAAM,EAAE;AAC7C,IAAI,OAAM;AACV,GAAE;AACF;AACA,EAAE,MAAM,IAAK,GAAEC,gCAAkB,CAAC,IAAI,CAAC,CAAA;AACvC,EAAEC,kBAAa,CAAC;AAChB,IAAI,QAAQ,EAAE,MAAM;AACpB,IAAI,IAAI,EAAE;AACV,MAAM,GAAG,IAAI;AACb,KAAK;AACL,IAAI,IAAI,EAAE,MAAM;AAChB,GAAG,CAAC,CAAA;AACJ;;;;"}