Object.defineProperty(exports, '__esModule', { value: true });

const core$1 = require('@opentelemetry/core');
const instrumentationKoa = require('@opentelemetry/instrumentation-koa');
const semanticConventions = require('@opentelemetry/semantic-conventions');
const core = require('@sentry/core');
const opentelemetry = require('@sentry/opentelemetry');
const utils = require('@sentry/utils');
const debugBuild = require('../../debug-build.js');

const _koaIntegration = (() => {
  return {
    name: 'Koa',
    setupOnce() {
      opentelemetry.addOpenTelemetryInstrumentation(
        new instrumentationKoa.KoaInstrumentation({
          requestHook(span, info) {
            if (core.getIsolationScope() === core.getDefaultIsolationScope()) {
              debugBuild.DEBUG_BUILD &&
                utils.logger.warn('Isolation scope is default isolation scope - skipping setting transactionName');
              return;
            }
            const attributes = core.spanToJSON(span).data;
            const route = attributes && attributes[semanticConventions.SEMATTRS_HTTP_ROUTE];
            const method = info.context.request.method.toUpperCase() || 'GET';
            if (route) {
              core.getIsolationScope().setTransactionName(`${method} ${route}`);
            }
          },
        }),
      );
    },
  };
}) ;

const koaIntegration = core.defineIntegration(_koaIntegration);

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const setupKoaErrorHandler = (app) => {
  app.use(async (ctx, next) => {
    try {
      await next();
    } catch (error) {
      core.captureException(error);
    }
  });

  if (!core$1.isWrapped(app.use) && core.isEnabled()) {
    utils.consoleSandbox(() => {
      // eslint-disable-next-line no-console
      console.warn(
        '[Sentry] Koa is not instrumented. This is likely because you required/imported koa before calling `Sentry.init()`.',
      );
    });
  }
};

exports.koaIntegration = koaIntegration;
exports.setupKoaErrorHandler = setupKoaErrorHandler;
//# sourceMappingURL=koa.js.map
