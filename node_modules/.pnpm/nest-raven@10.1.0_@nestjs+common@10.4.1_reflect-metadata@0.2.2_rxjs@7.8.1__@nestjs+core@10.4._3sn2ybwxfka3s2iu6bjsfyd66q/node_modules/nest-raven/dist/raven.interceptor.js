"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RavenInterceptor = void 0;
const common_1 = require("@nestjs/common");
const core_1 = require("@nestjs/core");
const node_1 = require("@sentry/node");
const operators_1 = require("rxjs/operators");
const raven_decorators_1 = require("./raven.decorators");
let GqlArgumentsHost;
try {
    ({ GqlArgumentsHost } = require("@nestjs/graphql"));
}
catch (e) { }
let RavenInterceptor = class RavenInterceptor {
    constructor(options = {}, reflector = new core_1.Reflector()) {
        this.options = options;
        this.reflector = reflector;
    }
    intercept(context, next) {
        const localTransformers = this.reflector.get(raven_decorators_1.RAVEN_LOCAL_TRANSFORMERS_METADATA, context.getHandler());
        return next.handle().pipe((0, operators_1.tap)({
            error: (exception) => {
                if (this.shouldReport(exception)) {
                    (0, node_1.withScope)((scope) => {
                        switch (context.getType()) {
                            case "http":
                                this.addHttpExceptionMetadatas(scope, context.switchToHttp());
                                return this.captureException(scope, exception, localTransformers, context);
                            case "ws":
                                this.addWsExceptionMetadatas(scope, context.switchToWs());
                                return this.captureException(scope, exception, localTransformers, context);
                            case "rpc":
                                this.addRpcExceptionMetadatas(scope, context.switchToRpc());
                                return this.captureException(scope, exception, localTransformers, context);
                            case "graphql":
                                if (!GqlArgumentsHost)
                                    return this.captureException(scope, exception, localTransformers, context);
                                this.addGraphQLExceptionMetadatas(scope, GqlArgumentsHost.create(context));
                                return this.captureException(scope, exception, localTransformers, context);
                            default:
                                return this.captureException(scope, exception, localTransformers, context);
                        }
                    });
                }
            },
        }));
    }
    addGraphQLExceptionMetadatas(scope, gqlHost) {
        const context = gqlHost.getContext();
        const data = (0, node_1.addRequestDataToEvent)({}, (context === null || context === void 0 ? void 0 : context.req) || context, this.options.include
            ? { include: this.options.include }
            : {
                include: {
                    request: this.options.request,
                    transaction: this.options.transaction,
                    user: this.options.user,
                },
            });
        scope.setExtra("req", data.request);
        data.extra && scope.setExtras(data.extra);
        if (data.user)
            scope.setUser(data.user);
        const info = gqlHost.getInfo();
        scope.setExtra("fieldName", info.fieldName);
        const args = gqlHost.getArgs();
        scope.setExtra("args", args);
    }
    addHttpExceptionMetadatas(scope, http) {
        const data = (0, node_1.addRequestDataToEvent)({}, http.getRequest(), this.options.include
            ? { include: this.options.include }
            : {
                include: {
                    request: this.options.request,
                    transaction: this.options.transaction,
                    user: this.options.user,
                },
            });
        scope.setExtra("req", data.request);
        data.extra && scope.setExtras(data.extra);
        if (data.user)
            scope.setUser(data.user);
    }
    addRpcExceptionMetadatas(scope, rpc) {
        scope.setExtra("rpc_data", rpc.getData());
    }
    addWsExceptionMetadatas(scope, ws) {
        scope.setExtra("ws_client", ws.getClient());
        scope.setExtra("ws_data", ws.getData());
    }
    captureException(scope, exception, localTransformers, context) {
        if (this.options.level)
            scope.setLevel(this.options.level);
        if (this.options.fingerprint)
            scope.setFingerprint(this.options.fingerprint);
        if (this.options.extra)
            scope.setExtras(this.options.extra);
        if (this.options.tags)
            scope.setTags(this.options.tags);
        if (this.options.transformers) {
            for (const transformer of this.options.transformers) {
                transformer(scope, context);
            }
        }
        if (localTransformers) {
            for (const transformer of localTransformers) {
                transformer(scope, context);
            }
        }
        (0, node_1.captureException)(exception);
    }
    shouldReport(exception) {
        if (!this.options.filters)
            return true;
        return this.options.filters.every(({ type, filter }) => {
            return !(exception instanceof type && (!filter || filter(exception)));
        });
    }
};
exports.RavenInterceptor = RavenInterceptor;
exports.RavenInterceptor = RavenInterceptor = __decorate([
    (0, common_1.Injectable)(),
    __metadata("design:paramtypes", [Object, core_1.Reflector])
], RavenInterceptor);
